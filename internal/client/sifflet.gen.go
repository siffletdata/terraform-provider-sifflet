// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	JWTScopes = "JWT.Scopes"
)

// Defines values for AccessTokenProviderDtoType.
const (
	AccessTokenProviderDtoTypeACCESSTOKEN AccessTokenProviderDtoType = "ACCESS_TOKEN"
	AccessTokenProviderDtoTypeDATASOURCE  AccessTokenProviderDtoType = "DATASOURCE"
	AccessTokenProviderDtoTypeGENERIC     AccessTokenProviderDtoType = "GENERIC"
	AccessTokenProviderDtoTypeUSER        AccessTokenProviderDtoType = "USER"
)

// Defines values for AlertingHookDtoType.
const (
	AlertingHookDtoTypeMAIL    AlertingHookDtoType = "MAIL"
	AlertingHookDtoTypeMSTEAMS AlertingHookDtoType = "MS_TEAMS"
	AlertingHookDtoTypeSLACK   AlertingHookDtoType = "SLACK"
	AlertingHookDtoTypeWEBHOOK AlertingHookDtoType = "WEBHOOK"
)

// Defines values for ChangeDtoType.
const (
	Create          ChangeDtoType = "Create"
	CreateIfMissing ChangeDtoType = "CreateIfMissing"
	Delete          ChangeDtoType = "Delete"
	Move            ChangeDtoType = "Move"
	MoveAndUpdate   ChangeDtoType = "MoveAndUpdate"
	None            ChangeDtoType = "None"
	Update          ChangeDtoType = "Update"
)

// Defines values for Criticality.
const (
	CriticalityCRITICAL Criticality = "CRITICAL"
	CriticalityHIGH     Criticality = "HIGH"
	CriticalityLOW      Criticality = "LOW"
	CriticalityMODERATE Criticality = "MODERATE"
)

// Defines values for DatasourceProviderDtoType.
const (
	DatasourceProviderDtoTypeACCESSTOKEN DatasourceProviderDtoType = "ACCESS_TOKEN"
	DatasourceProviderDtoTypeDATASOURCE  DatasourceProviderDtoType = "DATASOURCE"
	DatasourceProviderDtoTypeGENERIC     DatasourceProviderDtoType = "GENERIC"
	DatasourceProviderDtoTypeUSER        DatasourceProviderDtoType = "USER"
)

// Defines values for GenericProviderDtoType.
const (
	GenericProviderDtoTypeACCESSTOKEN GenericProviderDtoType = "ACCESS_TOKEN"
	GenericProviderDtoTypeDATASOURCE  GenericProviderDtoType = "DATASOURCE"
	GenericProviderDtoTypeGENERIC     GenericProviderDtoType = "GENERIC"
	GenericProviderDtoTypeUSER        GenericProviderDtoType = "USER"
)

// Defines values for GetCollaborationToolItemDtoType.
const (
	GetCollaborationToolItemDtoTypeJIRA       GetCollaborationToolItemDtoType = "JIRA"
	GetCollaborationToolItemDtoTypeSERVICENOW GetCollaborationToolItemDtoType = "SERVICENOW"
)

// Defines values for GitConnectionAuthType.
const (
	HTTPAUTHORIZATIONHEADER GitConnectionAuthType = "HTTP_AUTHORIZATION_HEADER"
	SSH                     GitConnectionAuthType = "SSH"
	USERPASSWORD            GitConnectionAuthType = "USER_PASSWORD"
)

// Defines values for IncidentLightDtoQualification.
const (
	AUTOMATIC      IncidentLightDtoQualification = "AUTOMATIC"
	DUPLICATE      IncidentLightDtoQualification = "DUPLICATE"
	FALSEPOSITIVE  IncidentLightDtoQualification = "FALSE_POSITIVE"
	FIXED          IncidentLightDtoQualification = "FIXED"
	NOACTIONNEEDED IncidentLightDtoQualification = "NO_ACTION_NEEDED"
)

// Defines values for IncidentLightDtoStatus.
const (
	IncidentLightDtoStatusCLOSED     IncidentLightDtoStatus = "CLOSED"
	IncidentLightDtoStatusINPROGRESS IncidentLightDtoStatus = "IN_PROGRESS"
	IncidentLightDtoStatusOPEN       IncidentLightDtoStatus = "OPEN"
)

// Defines values for LastRunStatusDtoStatus.
const (
	LastRunStatusDtoStatusFAILED                LastRunStatusDtoStatus = "FAILED"
	LastRunStatusDtoStatusPENDING               LastRunStatusDtoStatus = "PENDING"
	LastRunStatusDtoStatusREQUIRESYOURATTENTION LastRunStatusDtoStatus = "REQUIRES_YOUR_ATTENTION"
	LastRunStatusDtoStatusRUNNING               LastRunStatusDtoStatus = "RUNNING"
	LastRunStatusDtoStatusSUCCESS               LastRunStatusDtoStatus = "SUCCESS"
	LastRunStatusDtoStatusTECHNICALERROR        LastRunStatusDtoStatus = "TECHNICAL_ERROR"
)

// Defines values for LogDtoLevel.
const (
	LogDtoLevelError   LogDtoLevel = "Error"
	LogDtoLevelFatal   LogDtoLevel = "Fatal"
	LogDtoLevelInfo    LogDtoLevel = "Info"
	LogDtoLevelWarning LogDtoLevel = "Warning"
)

// Defines values for ProviderDtoType.
const (
	ProviderDtoTypeACCESSTOKEN ProviderDtoType = "ACCESS_TOKEN"
	ProviderDtoTypeDATASOURCE  ProviderDtoType = "DATASOURCE"
	ProviderDtoTypeGENERIC     ProviderDtoType = "GENERIC"
	ProviderDtoTypeUSER        ProviderDtoType = "USER"
)

// Defines values for PublicAirflowParametersDtoType.
const (
	PublicAirflowParametersDtoTypeAIRFLOW           PublicAirflowParametersDtoType = "AIRFLOW"
	PublicAirflowParametersDtoTypeATHENA            PublicAirflowParametersDtoType = "ATHENA"
	PublicAirflowParametersDtoTypeBIGQUERY          PublicAirflowParametersDtoType = "BIGQUERY"
	PublicAirflowParametersDtoTypeDATABRICKS        PublicAirflowParametersDtoType = "DATABRICKS"
	PublicAirflowParametersDtoTypeDBT               PublicAirflowParametersDtoType = "DBT"
	PublicAirflowParametersDtoTypeDBTCLOUD          PublicAirflowParametersDtoType = "DBT_CLOUD"
	PublicAirflowParametersDtoTypeDECLARATIVE       PublicAirflowParametersDtoType = "DECLARATIVE"
	PublicAirflowParametersDtoTypeFIVETRAN          PublicAirflowParametersDtoType = "FIVETRAN"
	PublicAirflowParametersDtoTypeLOOKER            PublicAirflowParametersDtoType = "LOOKER"
	PublicAirflowParametersDtoTypeMSSQL             PublicAirflowParametersDtoType = "MSSQL"
	PublicAirflowParametersDtoTypeMYSQL             PublicAirflowParametersDtoType = "MYSQL"
	PublicAirflowParametersDtoTypeORACLE            PublicAirflowParametersDtoType = "ORACLE"
	PublicAirflowParametersDtoTypePOSTGRESQL        PublicAirflowParametersDtoType = "POSTGRESQL"
	PublicAirflowParametersDtoTypePOWERBI           PublicAirflowParametersDtoType = "POWER_BI"
	PublicAirflowParametersDtoTypeQUICKSIGHT        PublicAirflowParametersDtoType = "QUICKSIGHT"
	PublicAirflowParametersDtoTypeREDSHIFT          PublicAirflowParametersDtoType = "REDSHIFT"
	PublicAirflowParametersDtoTypeSNOWFLAKE         PublicAirflowParametersDtoType = "SNOWFLAKE"
	PublicAirflowParametersDtoTypeSYNAPSE           PublicAirflowParametersDtoType = "SYNAPSE"
	PublicAirflowParametersDtoTypeTABLEAU           PublicAirflowParametersDtoType = "TABLEAU"
	PublicAirflowParametersDtoTypeUnderscoreUNKNOWN PublicAirflowParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicAssetFilterDtoHealthStatus.
const (
	PublicAssetFilterDtoHealthStatusHIGHRISKINCIDENTS PublicAssetFilterDtoHealthStatus = "HIGH_RISK_INCIDENTS"
	PublicAssetFilterDtoHealthStatusNOINCIDENTS       PublicAssetFilterDtoHealthStatus = "NO_INCIDENTS"
	PublicAssetFilterDtoHealthStatusNOTMONITORED      PublicAssetFilterDtoHealthStatus = "NOT_MONITORED"
	PublicAssetFilterDtoHealthStatusUNSUPPORTED       PublicAssetFilterDtoHealthStatus = "UNSUPPORTED"
	PublicAssetFilterDtoHealthStatusURGENTINCIDENTS   PublicAssetFilterDtoHealthStatus = "URGENT_INCIDENTS"
)

// Defines values for PublicAssetFilterDtoIngestionMethod.
const (
	PublicAssetFilterDtoIngestionMethodDECLARATIVE    PublicAssetFilterDtoIngestionMethod = "DECLARATIVE"
	PublicAssetFilterDtoIngestionMethodSIFFLETSOURCED PublicAssetFilterDtoIngestionMethod = "SIFFLET_SOURCED"
)

// Defines values for PublicAssetFilterDtoLevelOfUsage.
const (
	PublicAssetFilterDtoLevelOfUsageHIGH        PublicAssetFilterDtoLevelOfUsage = "HIGH"
	PublicAssetFilterDtoLevelOfUsageLOW         PublicAssetFilterDtoLevelOfUsage = "LOW"
	PublicAssetFilterDtoLevelOfUsageMEDIUM      PublicAssetFilterDtoLevelOfUsage = "MEDIUM"
	PublicAssetFilterDtoLevelOfUsageUNSUPPORTED PublicAssetFilterDtoLevelOfUsage = "UNSUPPORTED"
)

// Defines values for PublicAthenaParametersDtoType.
const (
	PublicAthenaParametersDtoTypeAIRFLOW           PublicAthenaParametersDtoType = "AIRFLOW"
	PublicAthenaParametersDtoTypeATHENA            PublicAthenaParametersDtoType = "ATHENA"
	PublicAthenaParametersDtoTypeBIGQUERY          PublicAthenaParametersDtoType = "BIGQUERY"
	PublicAthenaParametersDtoTypeDATABRICKS        PublicAthenaParametersDtoType = "DATABRICKS"
	PublicAthenaParametersDtoTypeDBT               PublicAthenaParametersDtoType = "DBT"
	PublicAthenaParametersDtoTypeDBTCLOUD          PublicAthenaParametersDtoType = "DBT_CLOUD"
	PublicAthenaParametersDtoTypeDECLARATIVE       PublicAthenaParametersDtoType = "DECLARATIVE"
	PublicAthenaParametersDtoTypeFIVETRAN          PublicAthenaParametersDtoType = "FIVETRAN"
	PublicAthenaParametersDtoTypeLOOKER            PublicAthenaParametersDtoType = "LOOKER"
	PublicAthenaParametersDtoTypeMSSQL             PublicAthenaParametersDtoType = "MSSQL"
	PublicAthenaParametersDtoTypeMYSQL             PublicAthenaParametersDtoType = "MYSQL"
	PublicAthenaParametersDtoTypeORACLE            PublicAthenaParametersDtoType = "ORACLE"
	PublicAthenaParametersDtoTypePOSTGRESQL        PublicAthenaParametersDtoType = "POSTGRESQL"
	PublicAthenaParametersDtoTypePOWERBI           PublicAthenaParametersDtoType = "POWER_BI"
	PublicAthenaParametersDtoTypeQUICKSIGHT        PublicAthenaParametersDtoType = "QUICKSIGHT"
	PublicAthenaParametersDtoTypeREDSHIFT          PublicAthenaParametersDtoType = "REDSHIFT"
	PublicAthenaParametersDtoTypeSNOWFLAKE         PublicAthenaParametersDtoType = "SNOWFLAKE"
	PublicAthenaParametersDtoTypeSYNAPSE           PublicAthenaParametersDtoType = "SYNAPSE"
	PublicAthenaParametersDtoTypeTABLEAU           PublicAthenaParametersDtoType = "TABLEAU"
	PublicAthenaParametersDtoTypeUnderscoreUNKNOWN PublicAthenaParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicBigQueryParametersDtoType.
const (
	PublicBigQueryParametersDtoTypeAIRFLOW           PublicBigQueryParametersDtoType = "AIRFLOW"
	PublicBigQueryParametersDtoTypeATHENA            PublicBigQueryParametersDtoType = "ATHENA"
	PublicBigQueryParametersDtoTypeBIGQUERY          PublicBigQueryParametersDtoType = "BIGQUERY"
	PublicBigQueryParametersDtoTypeDATABRICKS        PublicBigQueryParametersDtoType = "DATABRICKS"
	PublicBigQueryParametersDtoTypeDBT               PublicBigQueryParametersDtoType = "DBT"
	PublicBigQueryParametersDtoTypeDBTCLOUD          PublicBigQueryParametersDtoType = "DBT_CLOUD"
	PublicBigQueryParametersDtoTypeDECLARATIVE       PublicBigQueryParametersDtoType = "DECLARATIVE"
	PublicBigQueryParametersDtoTypeFIVETRAN          PublicBigQueryParametersDtoType = "FIVETRAN"
	PublicBigQueryParametersDtoTypeLOOKER            PublicBigQueryParametersDtoType = "LOOKER"
	PublicBigQueryParametersDtoTypeMSSQL             PublicBigQueryParametersDtoType = "MSSQL"
	PublicBigQueryParametersDtoTypeMYSQL             PublicBigQueryParametersDtoType = "MYSQL"
	PublicBigQueryParametersDtoTypeORACLE            PublicBigQueryParametersDtoType = "ORACLE"
	PublicBigQueryParametersDtoTypePOSTGRESQL        PublicBigQueryParametersDtoType = "POSTGRESQL"
	PublicBigQueryParametersDtoTypePOWERBI           PublicBigQueryParametersDtoType = "POWER_BI"
	PublicBigQueryParametersDtoTypeQUICKSIGHT        PublicBigQueryParametersDtoType = "QUICKSIGHT"
	PublicBigQueryParametersDtoTypeREDSHIFT          PublicBigQueryParametersDtoType = "REDSHIFT"
	PublicBigQueryParametersDtoTypeSNOWFLAKE         PublicBigQueryParametersDtoType = "SNOWFLAKE"
	PublicBigQueryParametersDtoTypeSYNAPSE           PublicBigQueryParametersDtoType = "SYNAPSE"
	PublicBigQueryParametersDtoTypeTABLEAU           PublicBigQueryParametersDtoType = "TABLEAU"
	PublicBigQueryParametersDtoTypeUnderscoreUNKNOWN PublicBigQueryParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicCalendarGetDtoStandardCalendar.
const (
	BELGIUMPUBLICHOLIDAYS     PublicCalendarGetDtoStandardCalendar = "BELGIUM_PUBLIC_HOLIDAYS"
	FRANCEPUBLICHOLIDAYS      PublicCalendarGetDtoStandardCalendar = "FRANCE_PUBLIC_HOLIDAYS"
	GERMANYPUBLICHOLIDAYS     PublicCalendarGetDtoStandardCalendar = "GERMANY_PUBLIC_HOLIDAYS"
	NETHERLANDSPUBLICHOLIDAYS PublicCalendarGetDtoStandardCalendar = "NETHERLANDS_PUBLIC_HOLIDAYS"
	SPAINPUBLICHOLIDAYS       PublicCalendarGetDtoStandardCalendar = "SPAIN_PUBLIC_HOLIDAYS"
	SUNDAYS                   PublicCalendarGetDtoStandardCalendar = "SUNDAYS"
	UKPUBLICHOLIDAYS          PublicCalendarGetDtoStandardCalendar = "UK_PUBLIC_HOLIDAYS"
	USPUBLICHOLIDAYS          PublicCalendarGetDtoStandardCalendar = "US_PUBLIC_HOLIDAYS"
	WEEKENDS                  PublicCalendarGetDtoStandardCalendar = "WEEKENDS"
)

// Defines values for PublicDatabricksParametersDtoType.
const (
	PublicDatabricksParametersDtoTypeAIRFLOW           PublicDatabricksParametersDtoType = "AIRFLOW"
	PublicDatabricksParametersDtoTypeATHENA            PublicDatabricksParametersDtoType = "ATHENA"
	PublicDatabricksParametersDtoTypeBIGQUERY          PublicDatabricksParametersDtoType = "BIGQUERY"
	PublicDatabricksParametersDtoTypeDATABRICKS        PublicDatabricksParametersDtoType = "DATABRICKS"
	PublicDatabricksParametersDtoTypeDBT               PublicDatabricksParametersDtoType = "DBT"
	PublicDatabricksParametersDtoTypeDBTCLOUD          PublicDatabricksParametersDtoType = "DBT_CLOUD"
	PublicDatabricksParametersDtoTypeDECLARATIVE       PublicDatabricksParametersDtoType = "DECLARATIVE"
	PublicDatabricksParametersDtoTypeFIVETRAN          PublicDatabricksParametersDtoType = "FIVETRAN"
	PublicDatabricksParametersDtoTypeLOOKER            PublicDatabricksParametersDtoType = "LOOKER"
	PublicDatabricksParametersDtoTypeMSSQL             PublicDatabricksParametersDtoType = "MSSQL"
	PublicDatabricksParametersDtoTypeMYSQL             PublicDatabricksParametersDtoType = "MYSQL"
	PublicDatabricksParametersDtoTypeORACLE            PublicDatabricksParametersDtoType = "ORACLE"
	PublicDatabricksParametersDtoTypePOSTGRESQL        PublicDatabricksParametersDtoType = "POSTGRESQL"
	PublicDatabricksParametersDtoTypePOWERBI           PublicDatabricksParametersDtoType = "POWER_BI"
	PublicDatabricksParametersDtoTypeQUICKSIGHT        PublicDatabricksParametersDtoType = "QUICKSIGHT"
	PublicDatabricksParametersDtoTypeREDSHIFT          PublicDatabricksParametersDtoType = "REDSHIFT"
	PublicDatabricksParametersDtoTypeSNOWFLAKE         PublicDatabricksParametersDtoType = "SNOWFLAKE"
	PublicDatabricksParametersDtoTypeSYNAPSE           PublicDatabricksParametersDtoType = "SYNAPSE"
	PublicDatabricksParametersDtoTypeTABLEAU           PublicDatabricksParametersDtoType = "TABLEAU"
	PublicDatabricksParametersDtoTypeUnderscoreUNKNOWN PublicDatabricksParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicDbtCloudParametersDtoType.
const (
	PublicDbtCloudParametersDtoTypeAIRFLOW           PublicDbtCloudParametersDtoType = "AIRFLOW"
	PublicDbtCloudParametersDtoTypeATHENA            PublicDbtCloudParametersDtoType = "ATHENA"
	PublicDbtCloudParametersDtoTypeBIGQUERY          PublicDbtCloudParametersDtoType = "BIGQUERY"
	PublicDbtCloudParametersDtoTypeDATABRICKS        PublicDbtCloudParametersDtoType = "DATABRICKS"
	PublicDbtCloudParametersDtoTypeDBT               PublicDbtCloudParametersDtoType = "DBT"
	PublicDbtCloudParametersDtoTypeDBTCLOUD          PublicDbtCloudParametersDtoType = "DBT_CLOUD"
	PublicDbtCloudParametersDtoTypeDECLARATIVE       PublicDbtCloudParametersDtoType = "DECLARATIVE"
	PublicDbtCloudParametersDtoTypeFIVETRAN          PublicDbtCloudParametersDtoType = "FIVETRAN"
	PublicDbtCloudParametersDtoTypeLOOKER            PublicDbtCloudParametersDtoType = "LOOKER"
	PublicDbtCloudParametersDtoTypeMSSQL             PublicDbtCloudParametersDtoType = "MSSQL"
	PublicDbtCloudParametersDtoTypeMYSQL             PublicDbtCloudParametersDtoType = "MYSQL"
	PublicDbtCloudParametersDtoTypeORACLE            PublicDbtCloudParametersDtoType = "ORACLE"
	PublicDbtCloudParametersDtoTypePOSTGRESQL        PublicDbtCloudParametersDtoType = "POSTGRESQL"
	PublicDbtCloudParametersDtoTypePOWERBI           PublicDbtCloudParametersDtoType = "POWER_BI"
	PublicDbtCloudParametersDtoTypeQUICKSIGHT        PublicDbtCloudParametersDtoType = "QUICKSIGHT"
	PublicDbtCloudParametersDtoTypeREDSHIFT          PublicDbtCloudParametersDtoType = "REDSHIFT"
	PublicDbtCloudParametersDtoTypeSNOWFLAKE         PublicDbtCloudParametersDtoType = "SNOWFLAKE"
	PublicDbtCloudParametersDtoTypeSYNAPSE           PublicDbtCloudParametersDtoType = "SYNAPSE"
	PublicDbtCloudParametersDtoTypeTABLEAU           PublicDbtCloudParametersDtoType = "TABLEAU"
	PublicDbtCloudParametersDtoTypeUnderscoreUNKNOWN PublicDbtCloudParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicDbtParametersDtoType.
const (
	PublicDbtParametersDtoTypeAIRFLOW           PublicDbtParametersDtoType = "AIRFLOW"
	PublicDbtParametersDtoTypeATHENA            PublicDbtParametersDtoType = "ATHENA"
	PublicDbtParametersDtoTypeBIGQUERY          PublicDbtParametersDtoType = "BIGQUERY"
	PublicDbtParametersDtoTypeDATABRICKS        PublicDbtParametersDtoType = "DATABRICKS"
	PublicDbtParametersDtoTypeDBT               PublicDbtParametersDtoType = "DBT"
	PublicDbtParametersDtoTypeDBTCLOUD          PublicDbtParametersDtoType = "DBT_CLOUD"
	PublicDbtParametersDtoTypeDECLARATIVE       PublicDbtParametersDtoType = "DECLARATIVE"
	PublicDbtParametersDtoTypeFIVETRAN          PublicDbtParametersDtoType = "FIVETRAN"
	PublicDbtParametersDtoTypeLOOKER            PublicDbtParametersDtoType = "LOOKER"
	PublicDbtParametersDtoTypeMSSQL             PublicDbtParametersDtoType = "MSSQL"
	PublicDbtParametersDtoTypeMYSQL             PublicDbtParametersDtoType = "MYSQL"
	PublicDbtParametersDtoTypeORACLE            PublicDbtParametersDtoType = "ORACLE"
	PublicDbtParametersDtoTypePOSTGRESQL        PublicDbtParametersDtoType = "POSTGRESQL"
	PublicDbtParametersDtoTypePOWERBI           PublicDbtParametersDtoType = "POWER_BI"
	PublicDbtParametersDtoTypeQUICKSIGHT        PublicDbtParametersDtoType = "QUICKSIGHT"
	PublicDbtParametersDtoTypeREDSHIFT          PublicDbtParametersDtoType = "REDSHIFT"
	PublicDbtParametersDtoTypeSNOWFLAKE         PublicDbtParametersDtoType = "SNOWFLAKE"
	PublicDbtParametersDtoTypeSYNAPSE           PublicDbtParametersDtoType = "SYNAPSE"
	PublicDbtParametersDtoTypeTABLEAU           PublicDbtParametersDtoType = "TABLEAU"
	PublicDbtParametersDtoTypeUnderscoreUNKNOWN PublicDbtParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicDeclarativeAssetDtoType.
const (
	Dashboard PublicDeclarativeAssetDtoType = "Dashboard"
	Dataset   PublicDeclarativeAssetDtoType = "Dataset"
	Generic   PublicDeclarativeAssetDtoType = "Generic"
	MlModel   PublicDeclarativeAssetDtoType = "MlModel"
	Pipeline  PublicDeclarativeAssetDtoType = "Pipeline"
)

// Defines values for PublicDescriptionDtoOrigin.
const (
	PublicDescriptionDtoOriginACCELDATA                 PublicDescriptionDtoOrigin = "ACCELDATA"
	PublicDescriptionDtoOriginACRYLDATA                 PublicDescriptionDtoOrigin = "ACRYL_DATA"
	PublicDescriptionDtoOriginACTIANVECTOR              PublicDescriptionDtoOrigin = "ACTIAN_VECTOR"
	PublicDescriptionDtoOriginACTIVECAMPAIGN            PublicDescriptionDtoOrigin = "ACTIVE_CAMPAIGN"
	PublicDescriptionDtoOriginADA                       PublicDescriptionDtoOrigin = "ADA"
	PublicDescriptionDtoOriginADJUST                    PublicDescriptionDtoOrigin = "ADJUST"
	PublicDescriptionDtoOriginADOBE                     PublicDescriptionDtoOrigin = "ADOBE"
	PublicDescriptionDtoOriginADPWFN                    PublicDescriptionDtoOrigin = "ADP_WFN"
	PublicDescriptionDtoOriginADROLL                    PublicDescriptionDtoOrigin = "ADROLL"
	PublicDescriptionDtoOriginAFFINITY                  PublicDescriptionDtoOrigin = "AFFINITY"
	PublicDescriptionDtoOriginAIRBYTE                   PublicDescriptionDtoOrigin = "AIRBYTE"
	PublicDescriptionDtoOriginAIRCALL                   PublicDescriptionDtoOrigin = "AIRCALL"
	PublicDescriptionDtoOriginAIRFLOW                   PublicDescriptionDtoOrigin = "AIRFLOW"
	PublicDescriptionDtoOriginAIRTABLE                  PublicDescriptionDtoOrigin = "AIRTABLE"
	PublicDescriptionDtoOriginALATION                   PublicDescriptionDtoOrigin = "ALATION"
	PublicDescriptionDtoOriginALCHEMER                  PublicDescriptionDtoOrigin = "ALCHEMER"
	PublicDescriptionDtoOriginALVINAI                   PublicDescriptionDtoOrigin = "ALVIN_AI"
	PublicDescriptionDtoOriginAMAZON                    PublicDescriptionDtoOrigin = "AMAZON"
	PublicDescriptionDtoOriginAMAZONCLOUDFRONT          PublicDescriptionDtoOrigin = "AMAZON_CLOUDFRONT"
	PublicDescriptionDtoOriginAMAZONDOCUMENTDB          PublicDescriptionDtoOrigin = "AMAZON_DOCUMENTDB"
	PublicDescriptionDtoOriginAMAZONDYNAMODB            PublicDescriptionDtoOrigin = "AMAZON_DYNAMODB"
	PublicDescriptionDtoOriginAMAZONFIREHOSE            PublicDescriptionDtoOrigin = "AMAZON_FIREHOSE"
	PublicDescriptionDtoOriginAMAZONSAGEMAKER           PublicDescriptionDtoOrigin = "AMAZON_SAGEMAKER"
	PublicDescriptionDtoOriginAMAZONSELLINGPARTNER      PublicDescriptionDtoOrigin = "AMAZON_SELLING_PARTNER"
	PublicDescriptionDtoOriginAMPLITUDE                 PublicDescriptionDtoOrigin = "AMPLITUDE"
	PublicDescriptionDtoOriginANAPLAN                   PublicDescriptionDtoOrigin = "ANAPLAN"
	PublicDescriptionDtoOriginANOMALO                   PublicDescriptionDtoOrigin = "ANOMALO"
	PublicDescriptionDtoOriginAPACHEKAFKA               PublicDescriptionDtoOrigin = "APACHE_KAFKA"
	PublicDescriptionDtoOriginAPACHESPARK               PublicDescriptionDtoOrigin = "APACHE_SPARK"
	PublicDescriptionDtoOriginAPPCUES                   PublicDescriptionDtoOrigin = "APPCUES"
	PublicDescriptionDtoOriginAPPFIGURES                PublicDescriptionDtoOrigin = "APPFIGURES"
	PublicDescriptionDtoOriginAPPLE                     PublicDescriptionDtoOrigin = "APPLE"
	PublicDescriptionDtoOriginAPPLEAPPSTORE             PublicDescriptionDtoOrigin = "APPLE_APP_STORE"
	PublicDescriptionDtoOriginAPPSFLYER                 PublicDescriptionDtoOrigin = "APPSFLYER"
	PublicDescriptionDtoOriginASANA                     PublicDescriptionDtoOrigin = "ASANA"
	PublicDescriptionDtoOriginASSEMBLED                 PublicDescriptionDtoOrigin = "ASSEMBLED"
	PublicDescriptionDtoOriginATHENA                    PublicDescriptionDtoOrigin = "ATHENA"
	PublicDescriptionDtoOriginATLAN                     PublicDescriptionDtoOrigin = "ATLAN"
	PublicDescriptionDtoOriginATLASSIANCONFLUENCE       PublicDescriptionDtoOrigin = "ATLASSIAN_CONFLUENCE"
	PublicDescriptionDtoOriginATLASSIANJIRA             PublicDescriptionDtoOrigin = "ATLASSIAN_JIRA"
	PublicDescriptionDtoOriginATLASSIANOPSGENIE         PublicDescriptionDtoOrigin = "ATLASSIAN_OPSGENIE"
	PublicDescriptionDtoOriginAUTH0                     PublicDescriptionDtoOrigin = "AUTH0"
	PublicDescriptionDtoOriginAUTODESKBIM360            PublicDescriptionDtoOrigin = "AUTODESK_BIM_360"
	PublicDescriptionDtoOriginAWIN                      PublicDescriptionDtoOrigin = "AWIN"
	PublicDescriptionDtoOriginAWSCLOUDTRAIL             PublicDescriptionDtoOrigin = "AWS_CLOUDTRAIL"
	PublicDescriptionDtoOriginAWSCOSTEXPLORER           PublicDescriptionDtoOrigin = "AWS_COST_EXPLORER"
	PublicDescriptionDtoOriginAWSINVENTORY              PublicDescriptionDtoOrigin = "AWS_INVENTORY"
	PublicDescriptionDtoOriginAWSLAMBDA                 PublicDescriptionDtoOrigin = "AWS_LAMBDA"
	PublicDescriptionDtoOriginAZURE                     PublicDescriptionDtoOrigin = "AZURE"
	PublicDescriptionDtoOriginBALLOTREADY               PublicDescriptionDtoOrigin = "BALLOT_READY"
	PublicDescriptionDtoOriginBAMBOOHR                  PublicDescriptionDtoOrigin = "BAMBOOHR"
	PublicDescriptionDtoOriginBIGCOMMERCE               PublicDescriptionDtoOrigin = "BIGCOMMERCE"
	PublicDescriptionDtoOriginBIGEYE                    PublicDescriptionDtoOrigin = "BIGEYE"
	PublicDescriptionDtoOriginBIGQUERY                  PublicDescriptionDtoOrigin = "BIGQUERY"
	PublicDescriptionDtoOriginBILLINGPLATFORM           PublicDescriptionDtoOrigin = "BILLINGPLATFORM"
	PublicDescriptionDtoOriginBIRDEYE                   PublicDescriptionDtoOrigin = "BIRDEYE"
	PublicDescriptionDtoOriginBLACKBOARD                PublicDescriptionDtoOrigin = "BLACKBOARD"
	PublicDescriptionDtoOriginBOX                       PublicDescriptionDtoOrigin = "BOX"
	PublicDescriptionDtoOriginBRAINTREE                 PublicDescriptionDtoOrigin = "BRAINTREE"
	PublicDescriptionDtoOriginBRAZE                     PublicDescriptionDtoOrigin = "BRAZE"
	PublicDescriptionDtoOriginBREVO                     PublicDescriptionDtoOrigin = "BREVO"
	PublicDescriptionDtoOriginBREX                      PublicDescriptionDtoOrigin = "BREX"
	PublicDescriptionDtoOriginBUILDKITE                 PublicDescriptionDtoOrigin = "BUILDKITE"
	PublicDescriptionDtoOriginBUZZSPROUT                PublicDescriptionDtoOrigin = "BUZZSPROUT"
	PublicDescriptionDtoOriginCALENDLY                  PublicDescriptionDtoOrigin = "CALENDLY"
	PublicDescriptionDtoOriginCAMPAIGNMONITOR           PublicDescriptionDtoOrigin = "CAMPAIGN_MONITOR"
	PublicDescriptionDtoOriginCANNY                     PublicDescriptionDtoOrigin = "CANNY"
	PublicDescriptionDtoOriginCANVAS                    PublicDescriptionDtoOrigin = "CANVAS"
	PublicDescriptionDtoOriginCAPTERRA                  PublicDescriptionDtoOrigin = "CAPTERRA"
	PublicDescriptionDtoOriginCASTORDOC                 PublicDescriptionDtoOrigin = "CASTOR_DOC"
	PublicDescriptionDtoOriginCENSUS                    PublicDescriptionDtoOrigin = "CENSUS"
	PublicDescriptionDtoOriginCERTINIA                  PublicDescriptionDtoOrigin = "CERTINIA"
	PublicDescriptionDtoOriginCHAMELEON                 PublicDescriptionDtoOrigin = "CHAMELEON"
	PublicDescriptionDtoOriginCHANNELADVISOR            PublicDescriptionDtoOrigin = "CHANNEL_ADVISOR"
	PublicDescriptionDtoOriginCHARGEBEE                 PublicDescriptionDtoOrigin = "CHARGEBEE"
	PublicDescriptionDtoOriginCHARGEDESK                PublicDescriptionDtoOrigin = "CHARGEDESK"
	PublicDescriptionDtoOriginCHARTMOGUL                PublicDescriptionDtoOrigin = "CHARTMOGUL"
	PublicDescriptionDtoOriginCHORUSAI                  PublicDescriptionDtoOrigin = "CHORUS_AI"
	PublicDescriptionDtoOriginCHURNKEY                  PublicDescriptionDtoOrigin = "CHURNKEY"
	PublicDescriptionDtoOriginCHURNZERO                 PublicDescriptionDtoOrigin = "CHURNZERO"
	PublicDescriptionDtoOriginCIMIS                     PublicDescriptionDtoOrigin = "CIMIS"
	PublicDescriptionDtoOriginCIN7                      PublicDescriptionDtoOrigin = "CIN7"
	PublicDescriptionDtoOriginCIRCLECI                  PublicDescriptionDtoOrigin = "CIRCLE_CI"
	PublicDescriptionDtoOriginCLARI                     PublicDescriptionDtoOrigin = "CLARI"
	PublicDescriptionDtoOriginCLICKUP                   PublicDescriptionDtoOrigin = "CLICKUP"
	PublicDescriptionDtoOriginCLIFFAI                   PublicDescriptionDtoOrigin = "CLIFF_AI"
	PublicDescriptionDtoOriginCLOSE                     PublicDescriptionDtoOrigin = "CLOSE"
	PublicDescriptionDtoOriginCOLLIBRA                  PublicDescriptionDtoOrigin = "COLLIBRA"
	PublicDescriptionDtoOriginCOMMERCETOOLS             PublicDescriptionDtoOrigin = "COMMERCETOOLS"
	PublicDescriptionDtoOriginCOMPOSER                  PublicDescriptionDtoOrigin = "COMPOSER"
	PublicDescriptionDtoOriginCONFLUENTCLOUD            PublicDescriptionDtoOrigin = "CONFLUENT_CLOUD"
	PublicDescriptionDtoOriginCONTRASTSECURITY          PublicDescriptionDtoOrigin = "CONTRAST_SECURITY"
	PublicDescriptionDtoOriginCOUPA                     PublicDescriptionDtoOrigin = "COUPA"
	PublicDescriptionDtoOriginCRITEO                    PublicDescriptionDtoOrigin = "CRITEO"
	PublicDescriptionDtoOriginCROSSBEAM                 PublicDescriptionDtoOrigin = "CROSSBEAM"
	PublicDescriptionDtoOriginCRUNCHBASE                PublicDescriptionDtoOrigin = "CRUNCHBASE"
	PublicDescriptionDtoOriginCUSTOMERIO                PublicDescriptionDtoOrigin = "CUSTOMER_IO"
	PublicDescriptionDtoOriginD2LBRIGHTSPACE            PublicDescriptionDtoOrigin = "D2L_BRIGHTSPACE"
	PublicDescriptionDtoOriginDAGSTER                   PublicDescriptionDtoOrigin = "DAGSTER"
	PublicDescriptionDtoOriginDATABAND                  PublicDescriptionDtoOrigin = "DATABAND"
	PublicDescriptionDtoOriginDATABRICKS                PublicDescriptionDtoOrigin = "DATABRICKS"
	PublicDescriptionDtoOriginDATADOG                   PublicDescriptionDtoOrigin = "DATADOG"
	PublicDescriptionDtoOriginDATAEDO                   PublicDescriptionDtoOrigin = "DATAEDO"
	PublicDescriptionDtoOriginDATAFOLD                  PublicDescriptionDtoOrigin = "DATAFOLD"
	PublicDescriptionDtoOriginDATAGALAXY                PublicDescriptionDtoOrigin = "DATAGALAXY"
	PublicDescriptionDtoOriginDATAHUB                   PublicDescriptionDtoOrigin = "DATAHUB"
	PublicDescriptionDtoOriginDATAIKU                   PublicDescriptionDtoOrigin = "DATAIKU"
	PublicDescriptionDtoOriginDATAWORLD                 PublicDescriptionDtoOrigin = "DATA_WORLD"
	PublicDescriptionDtoOriginDB2                       PublicDescriptionDtoOrigin = "DB2"
	PublicDescriptionDtoOriginDBT                       PublicDescriptionDtoOrigin = "DBT"
	PublicDescriptionDtoOriginDBTCLOUD                  PublicDescriptionDtoOrigin = "DBTCLOUD"
	PublicDescriptionDtoOriginDCLLOGISTICS              PublicDescriptionDtoOrigin = "DCL_LOGISTICS"
	PublicDescriptionDtoOriginDEAR                      PublicDescriptionDtoOrigin = "DEAR"
	PublicDescriptionDtoOriginDECUBE                    PublicDescriptionDtoOrigin = "DECUBE"
	PublicDescriptionDtoOriginDELIGHTED                 PublicDescriptionDtoOrigin = "DELIGHTED"
	PublicDescriptionDtoOriginDEPUTY                    PublicDescriptionDtoOrigin = "DEPUTY"
	PublicDescriptionDtoOriginDESTINI                   PublicDescriptionDtoOrigin = "DESTINI"
	PublicDescriptionDtoOriginDIXA                      PublicDescriptionDtoOrigin = "DIXA"
	PublicDescriptionDtoOriginDOCEBO                    PublicDescriptionDtoOrigin = "DOCEBO"
	PublicDescriptionDtoOriginDRATA                     PublicDescriptionDtoOrigin = "DRATA"
	PublicDescriptionDtoOriginDRIFT                     PublicDescriptionDtoOrigin = "DRIFT"
	PublicDescriptionDtoOriginDRIP                      PublicDescriptionDtoOrigin = "DRIP"
	PublicDescriptionDtoOriginDROPBOX                   PublicDescriptionDtoOrigin = "DROPBOX"
	PublicDescriptionDtoOriginDUOPLANE                  PublicDescriptionDtoOrigin = "DUOPLANE"
	PublicDescriptionDtoOriginEASYPOST                  PublicDescriptionDtoOrigin = "EASY_POST"
	PublicDescriptionDtoOriginECONOMIC                  PublicDescriptionDtoOrigin = "E_CONOMIC"
	PublicDescriptionDtoOriginELASTICSEARCH             PublicDescriptionDtoOrigin = "ELASTICSEARCH"
	PublicDescriptionDtoOriginELEMENTARY                PublicDescriptionDtoOrigin = "ELEMENTARY"
	PublicDescriptionDtoOriginELLUCIAN                  PublicDescriptionDtoOrigin = "ELLUCIAN"
	PublicDescriptionDtoOriginELOQUA                    PublicDescriptionDtoOrigin = "ELOQUA"
	PublicDescriptionDtoOriginEMAIL                     PublicDescriptionDtoOrigin = "EMAIL"
	PublicDescriptionDtoOriginEMPLOYMENTHERO            PublicDescriptionDtoOrigin = "EMPLOYMENT_HERO"
	PublicDescriptionDtoOriginEPICORPROPHET21           PublicDescriptionDtoOrigin = "EPICOR_PROPHET_21"
	PublicDescriptionDtoOriginEVENTBRITE                PublicDescriptionDtoOrigin = "EVENTBRITE"
	PublicDescriptionDtoOriginEVERHOUR                  PublicDescriptionDtoOrigin = "EVERHOUR"
	PublicDescriptionDtoOriginEXCEL                     PublicDescriptionDtoOrigin = "EXCEL"
	PublicDescriptionDtoOriginEXPENSIFY                 PublicDescriptionDtoOrigin = "EXPENSIFY"
	PublicDescriptionDtoOriginFACEBOOK                  PublicDescriptionDtoOrigin = "FACEBOOK"
	PublicDescriptionDtoOriginFIFTEENFIVE               PublicDescriptionDtoOrigin = "FIFTEENFIVE"
	PublicDescriptionDtoOriginFIGMA                     PublicDescriptionDtoOrigin = "FIGMA"
	PublicDescriptionDtoOriginFIREBASE                  PublicDescriptionDtoOrigin = "FIREBASE"
	PublicDescriptionDtoOriginFIREBOLT                  PublicDescriptionDtoOrigin = "FIREBOLT"
	PublicDescriptionDtoOriginFIVETRAN                  PublicDescriptionDtoOrigin = "FIVETRAN"
	PublicDescriptionDtoOriginFLEXPORT                  PublicDescriptionDtoOrigin = "FLEXPORT"
	PublicDescriptionDtoOriginFORJ                      PublicDescriptionDtoOrigin = "FORJ"
	PublicDescriptionDtoOriginFOUNTAIN                  PublicDescriptionDtoOrigin = "FOUNTAIN"
	PublicDescriptionDtoOriginFREIGHTVIEW               PublicDescriptionDtoOrigin = "FREIGHTVIEW"
	PublicDescriptionDtoOriginFRESHBOOKS                PublicDescriptionDtoOrigin = "FRESHBOOKS"
	PublicDescriptionDtoOriginFRESHCHAT                 PublicDescriptionDtoOrigin = "FRESHCHAT"
	PublicDescriptionDtoOriginFRESHDESK                 PublicDescriptionDtoOrigin = "FRESHDESK"
	PublicDescriptionDtoOriginFRESHDESKCONTACTCENTER    PublicDescriptionDtoOrigin = "FRESHDESK_CONTACT_CENTER"
	PublicDescriptionDtoOriginFRESHSERVICE              PublicDescriptionDtoOrigin = "FRESHSERVICE"
	PublicDescriptionDtoOriginFRESHSUCCESS              PublicDescriptionDtoOrigin = "FRESHSUCCESS"
	PublicDescriptionDtoOriginFRESHTEAM                 PublicDescriptionDtoOrigin = "FRESHTEAM"
	PublicDescriptionDtoOriginFRIENDBUY                 PublicDescriptionDtoOrigin = "FRIENDBUY"
	PublicDescriptionDtoOriginFRONT                     PublicDescriptionDtoOrigin = "FRONT"
	PublicDescriptionDtoOriginFTP                       PublicDescriptionDtoOrigin = "FTP"
	PublicDescriptionDtoOriginFULLSTORY                 PublicDescriptionDtoOrigin = "FULLSTORY"
	PublicDescriptionDtoOriginG2                        PublicDescriptionDtoOrigin = "G2"
	PublicDescriptionDtoOriginGAINSIGHT                 PublicDescriptionDtoOrigin = "GAINSIGHT"
	PublicDescriptionDtoOriginGEM                       PublicDescriptionDtoOrigin = "GEM"
	PublicDescriptionDtoOriginGIT                       PublicDescriptionDtoOrigin = "GIT"
	PublicDescriptionDtoOriginGITHUB                    PublicDescriptionDtoOrigin = "GITHUB"
	PublicDescriptionDtoOriginGITLAB                    PublicDescriptionDtoOrigin = "GITLAB"
	PublicDescriptionDtoOriginGLADLY                    PublicDescriptionDtoOrigin = "GLADLY"
	PublicDescriptionDtoOriginGOCARDLESS                PublicDescriptionDtoOrigin = "GOCARDLESS"
	PublicDescriptionDtoOriginGONG                      PublicDescriptionDtoOrigin = "GONG"
	PublicDescriptionDtoOriginGOOGLE                    PublicDescriptionDtoOrigin = "GOOGLE"
	PublicDescriptionDtoOriginGOOGLEADMANAGER           PublicDescriptionDtoOrigin = "GOOGLE_AD_MANAGER"
	PublicDescriptionDtoOriginGOOGLEADS                 PublicDescriptionDtoOrigin = "GOOGLE_ADS"
	PublicDescriptionDtoOriginGOOGLEANALYTICS           PublicDescriptionDtoOrigin = "GOOGLE_ANALYTICS"
	PublicDescriptionDtoOriginGOOGLECALENDAR            PublicDescriptionDtoOrigin = "GOOGLE_CALENDAR"
	PublicDescriptionDtoOriginGOOGLECAMPAIGNMANAGER     PublicDescriptionDtoOrigin = "GOOGLE_CAMPAIGN_MANAGER"
	PublicDescriptionDtoOriginGOOGLECHROME              PublicDescriptionDtoOrigin = "GOOGLE_CHROME"
	PublicDescriptionDtoOriginGOOGLECLOUD               PublicDescriptionDtoOrigin = "GOOGLE_CLOUD"
	PublicDescriptionDtoOriginGOOGLECLOUDSTORAGE        PublicDescriptionDtoOrigin = "GOOGLE_CLOUD_STORAGE"
	PublicDescriptionDtoOriginGOOGLEDISPLAY             PublicDescriptionDtoOrigin = "GOOGLE_DISPLAY"
	PublicDescriptionDtoOriginGOOGLEDRIVE               PublicDescriptionDtoOrigin = "GOOGLE_DRIVE"
	PublicDescriptionDtoOriginGOOGLEPLAY                PublicDescriptionDtoOrigin = "GOOGLE_PLAY"
	PublicDescriptionDtoOriginGOOGLESEARCHADS360        PublicDescriptionDtoOrigin = "GOOGLE_SEARCH_ADS_360"
	PublicDescriptionDtoOriginGOOGLESEARCHCONSOLE       PublicDescriptionDtoOrigin = "GOOGLE_SEARCH_CONSOLE"
	PublicDescriptionDtoOriginGOOGLESHEETS              PublicDescriptionDtoOrigin = "GOOGLE_SHEETS"
	PublicDescriptionDtoOriginGOOGLETASKS               PublicDescriptionDtoOrigin = "GOOGLE_TASKS"
	PublicDescriptionDtoOriginGORGIAS                   PublicDescriptionDtoOrigin = "GORGIAS"
	PublicDescriptionDtoOriginGREENHOUSE                PublicDescriptionDtoOrigin = "GREENHOUSE"
	PublicDescriptionDtoOriginGREENPLUM                 PublicDescriptionDtoOrigin = "GREENPLUM"
	PublicDescriptionDtoOriginGREENPOWERMONITOR         PublicDescriptionDtoOrigin = "GREEN_POWER_MONITOR"
	PublicDescriptionDtoOriginGREPSR                    PublicDescriptionDtoOrigin = "GREPSR"
	PublicDescriptionDtoOriginGRIN                      PublicDescriptionDtoOrigin = "GRIN"
	PublicDescriptionDtoOriginGURU                      PublicDescriptionDtoOrigin = "GURU"
	PublicDescriptionDtoOriginH2                        PublicDescriptionDtoOrigin = "H2"
	PublicDescriptionDtoOriginHARVEST                   PublicDescriptionDtoOrigin = "HARVEST"
	PublicDescriptionDtoOriginHDFS                      PublicDescriptionDtoOrigin = "HDFS"
	PublicDescriptionDtoOriginHEAP                      PublicDescriptionDtoOrigin = "HEAP"
	PublicDescriptionDtoOriginHEIGHT                    PublicDescriptionDtoOrigin = "HEIGHT"
	PublicDescriptionDtoOriginHELPSCOUT                 PublicDescriptionDtoOrigin = "HELP_SCOUT"
	PublicDescriptionDtoOriginHELPSHIFT                 PublicDescriptionDtoOrigin = "HELPSHIFT"
	PublicDescriptionDtoOriginHEROKUKAFKA               PublicDescriptionDtoOrigin = "HEROKU_KAFKA"
	PublicDescriptionDtoOriginHEX                       PublicDescriptionDtoOrigin = "HEX"
	PublicDescriptionDtoOriginHIBOB                     PublicDescriptionDtoOrigin = "HIBOB"
	PublicDescriptionDtoOriginHIGHTOUCH                 PublicDescriptionDtoOrigin = "HIGH_TOUCH"
	PublicDescriptionDtoOriginHOPIN                     PublicDescriptionDtoOrigin = "HOPIN"
	PublicDescriptionDtoOriginHUBSPOT                   PublicDescriptionDtoOrigin = "HUBSPOT"
	PublicDescriptionDtoOriginIMPACT                    PublicDescriptionDtoOrigin = "IMPACT"
	PublicDescriptionDtoOriginINCIDENTIO                PublicDescriptionDtoOrigin = "INCIDENT_IO"
	PublicDescriptionDtoOriginINFOBIP                   PublicDescriptionDtoOrigin = "INFOBIP"
	PublicDescriptionDtoOriginINFORMATICA               PublicDescriptionDtoOrigin = "INFORMATICA"
	PublicDescriptionDtoOriginINSIGHTLY                 PublicDescriptionDtoOrigin = "INSIGHTLY"
	PublicDescriptionDtoOriginINSTAGRAM                 PublicDescriptionDtoOrigin = "INSTAGRAM"
	PublicDescriptionDtoOriginINTERCOM                  PublicDescriptionDtoOrigin = "INTERCOM"
	PublicDescriptionDtoOriginINVESTOPEDIA              PublicDescriptionDtoOrigin = "INVESTOPEDIA"
	PublicDescriptionDtoOriginIRONCLAD                  PublicDescriptionDtoOrigin = "IRONCLAD"
	PublicDescriptionDtoOriginIRONSOURCE                PublicDescriptionDtoOrigin = "IRONSOURCE"
	PublicDescriptionDtoOriginITERABLE                  PublicDescriptionDtoOrigin = "ITERABLE"
	PublicDescriptionDtoOriginJAVA                      PublicDescriptionDtoOrigin = "JAVA"
	PublicDescriptionDtoOriginJENKINS                   PublicDescriptionDtoOrigin = "JENKINS"
	PublicDescriptionDtoOriginJUSTCALL                  PublicDescriptionDtoOrigin = "JUSTCALL"
	PublicDescriptionDtoOriginKANDJI                    PublicDescriptionDtoOrigin = "KANDJI"
	PublicDescriptionDtoOriginKENSU                     PublicDescriptionDtoOrigin = "KENSU"
	PublicDescriptionDtoOriginKHOROSCARE                PublicDescriptionDtoOrigin = "KHOROS_CARE"
	PublicDescriptionDtoOriginKISSMETRICS               PublicDescriptionDtoOrigin = "KISSMETRICS"
	PublicDescriptionDtoOriginKLAVIYO                   PublicDescriptionDtoOrigin = "KLAVIYO"
	PublicDescriptionDtoOriginKNOWBE4                   PublicDescriptionDtoOrigin = "KNOWBE4"
	PublicDescriptionDtoOriginKONNECTINSIGHTS           PublicDescriptionDtoOrigin = "KONNECT_INSIGHTS"
	PublicDescriptionDtoOriginKUSTOMER                  PublicDescriptionDtoOrigin = "KUSTOMER"
	PublicDescriptionDtoOriginLARIATDATA                PublicDescriptionDtoOrigin = "LARIAT_DATA"
	PublicDescriptionDtoOriginLATTICE                   PublicDescriptionDtoOrigin = "LATTICE"
	PublicDescriptionDtoOriginLAUNCHDARKLY              PublicDescriptionDtoOrigin = "LAUNCH_DARKLY"
	PublicDescriptionDtoOriginLEARNUPON                 PublicDescriptionDtoOrigin = "LEARN_UPON"
	PublicDescriptionDtoOriginLESSONLY                  PublicDescriptionDtoOrigin = "LESSONLY"
	PublicDescriptionDtoOriginLEVER                     PublicDescriptionDtoOrigin = "LEVER"
	PublicDescriptionDtoOriginLIFTOFF                   PublicDescriptionDtoOrigin = "LIFTOFF"
	PublicDescriptionDtoOriginLIGHTDASH                 PublicDescriptionDtoOrigin = "LIGHTDASH"
	PublicDescriptionDtoOriginLIGHTSPEED                PublicDescriptionDtoOrigin = "LIGHTSPEED"
	PublicDescriptionDtoOriginLIGHTSUP                  PublicDescriptionDtoOrigin = "LIGHTSUP"
	PublicDescriptionDtoOriginLINEAR                    PublicDescriptionDtoOrigin = "LINEAR"
	PublicDescriptionDtoOriginLINKEDIN                  PublicDescriptionDtoOrigin = "LINKEDIN"
	PublicDescriptionDtoOriginLIVECHAT                  PublicDescriptionDtoOrigin = "LIVECHAT"
	PublicDescriptionDtoOriginLOADEDCOMMERCE            PublicDescriptionDtoOrigin = "LOADED_COMMERCE"
	PublicDescriptionDtoOriginLOB                       PublicDescriptionDtoOrigin = "LOB"
	PublicDescriptionDtoOriginLOOKER                    PublicDescriptionDtoOrigin = "LOOKER"
	PublicDescriptionDtoOriginLOOP                      PublicDescriptionDtoOrigin = "LOOP"
	PublicDescriptionDtoOriginLOOPIO                    PublicDescriptionDtoOrigin = "LOOPIO"
	PublicDescriptionDtoOriginLUMA                      PublicDescriptionDtoOrigin = "LUMA"
	PublicDescriptionDtoOriginMAGENTO                   PublicDescriptionDtoOrigin = "MAGENTO"
	PublicDescriptionDtoOriginMAILCHIMP                 PublicDescriptionDtoOrigin = "MAILCHIMP"
	PublicDescriptionDtoOriginMAILGUN                   PublicDescriptionDtoOrigin = "MAILGUN"
	PublicDescriptionDtoOriginMANDRILL                  PublicDescriptionDtoOrigin = "MANDRILL"
	PublicDescriptionDtoOriginMANTA                     PublicDescriptionDtoOrigin = "MANTA"
	PublicDescriptionDtoOriginMARIADB                   PublicDescriptionDtoOrigin = "MARIADB"
	PublicDescriptionDtoOriginMARINSOFTWARE             PublicDescriptionDtoOrigin = "MARIN_SOFTWARE"
	PublicDescriptionDtoOriginMARKETO                   PublicDescriptionDtoOrigin = "MARKETO"
	PublicDescriptionDtoOriginMATTERMOST                PublicDescriptionDtoOrigin = "MATTERMOST"
	PublicDescriptionDtoOriginMAVENLINK                 PublicDescriptionDtoOrigin = "MAVENLINK"
	PublicDescriptionDtoOriginMAXIO                     PublicDescriptionDtoOrigin = "MAXIO"
	PublicDescriptionDtoOriginMEDALLIA                  PublicDescriptionDtoOrigin = "MEDALLIA"
	PublicDescriptionDtoOriginMETA                      PublicDescriptionDtoOrigin = "META"
	PublicDescriptionDtoOriginMETABASE                  PublicDescriptionDtoOrigin = "METABASE"
	PublicDescriptionDtoOriginMETAPHOR                  PublicDescriptionDtoOrigin = "METAPHOR"
	PublicDescriptionDtoOriginMETAPLANE                 PublicDescriptionDtoOrigin = "METAPLANE"
	PublicDescriptionDtoOriginMICROSOFT                 PublicDescriptionDtoOrigin = "MICROSOFT"
	PublicDescriptionDtoOriginMICROSOFTAZUREBLOBSTORAGE PublicDescriptionDtoOrigin = "MICROSOFT_AZURE_BLOB_STORAGE"
	PublicDescriptionDtoOriginMICROSOFTAZUREML          PublicDescriptionDtoOrigin = "MICROSOFT_AZURE_ML"
	PublicDescriptionDtoOriginMICROSOFTDYNAMICS         PublicDescriptionDtoOrigin = "MICROSOFT_DYNAMICS"
	PublicDescriptionDtoOriginMICROSOFTONEDRIVE         PublicDescriptionDtoOrigin = "MICROSOFT_ONEDRIVE"
	PublicDescriptionDtoOriginMICROSOFTPURVIEW          PublicDescriptionDtoOrigin = "MICROSOFT_PURVIEW"
	PublicDescriptionDtoOriginMICROSOFTTEAMS            PublicDescriptionDtoOrigin = "MICROSOFT_TEAMS"
	PublicDescriptionDtoOriginMICROSTRATEGY             PublicDescriptionDtoOrigin = "MICROSTRATEGY"
	PublicDescriptionDtoOriginMIXMAX                    PublicDescriptionDtoOrigin = "MIXMAX"
	PublicDescriptionDtoOriginMIXPANEL                  PublicDescriptionDtoOrigin = "MIXPANEL"
	PublicDescriptionDtoOriginMONDAYCOM                 PublicDescriptionDtoOrigin = "MONDAY_COM"
	PublicDescriptionDtoOriginMONGODB                   PublicDescriptionDtoOrigin = "MONGODB"
	PublicDescriptionDtoOriginMONTECARLO                PublicDescriptionDtoOrigin = "MONTE_CARLO"
	PublicDescriptionDtoOriginMOUNTAIN                  PublicDescriptionDtoOrigin = "MOUNTAIN"
	PublicDescriptionDtoOriginMSSQL                     PublicDescriptionDtoOrigin = "MSSQL"
	PublicDescriptionDtoOriginMULESOFT                  PublicDescriptionDtoOrigin = "MULESOFT"
	PublicDescriptionDtoOriginMUX                       PublicDescriptionDtoOrigin = "MUX"
	PublicDescriptionDtoOriginMWAA                      PublicDescriptionDtoOrigin = "MWAA"
	PublicDescriptionDtoOriginMYSQL                     PublicDescriptionDtoOrigin = "MYSQL"
	PublicDescriptionDtoOriginNAMELY                    PublicDescriptionDtoOrigin = "NAMELY"
	PublicDescriptionDtoOriginNCINO                     PublicDescriptionDtoOrigin = "NCINO"
	PublicDescriptionDtoOriginNETSUITEANALYTICS         PublicDescriptionDtoOrigin = "NETSUITE_ANALYTICS"
	PublicDescriptionDtoOriginNEWRELIC                  PublicDescriptionDtoOrigin = "NEW_RELIC"
	PublicDescriptionDtoOriginNOTION                    PublicDescriptionDtoOrigin = "NOTION"
	PublicDescriptionDtoOriginNYLAS                     PublicDescriptionDtoOrigin = "NYLAS"
	PublicDescriptionDtoOriginOBSERVE                   PublicDescriptionDtoOrigin = "OBSERVE"
	PublicDescriptionDtoOriginOCTOPAI                   PublicDescriptionDtoOrigin = "OCTOPAI"
	PublicDescriptionDtoOriginOKTA                      PublicDescriptionDtoOrigin = "OKTA"
	PublicDescriptionDtoOriginOPENAI                    PublicDescriptionDtoOrigin = "OPEN_AI"
	PublicDescriptionDtoOriginOPENDATADC                PublicDescriptionDtoOrigin = "OPEN_DATA_DC"
	PublicDescriptionDtoOriginOPENEXCHANGESRATES        PublicDescriptionDtoOrigin = "OPEN_EXCHANGES_RATES"
	PublicDescriptionDtoOriginOPENSEARCH                PublicDescriptionDtoOrigin = "OPEN_SEARCH"
	PublicDescriptionDtoOriginOPTIMIZELY                PublicDescriptionDtoOrigin = "OPTIMIZELY"
	PublicDescriptionDtoOriginORACLE                    PublicDescriptionDtoOrigin = "ORACLE"
	PublicDescriptionDtoOriginORBITCOMMUNITYPLATFORM    PublicDescriptionDtoOrigin = "ORBIT_COMMUNITY_PLATFORM"
	PublicDescriptionDtoOriginORDWAY                    PublicDescriptionDtoOrigin = "ORDWAY"
	PublicDescriptionDtoOriginORTTO                     PublicDescriptionDtoOrigin = "ORTTO"
	PublicDescriptionDtoOriginOSCOMMERCE                PublicDescriptionDtoOrigin = "OS_COMMERCE"
	PublicDescriptionDtoOriginOUTBRAIN                  PublicDescriptionDtoOrigin = "OUTBRAIN"
	PublicDescriptionDtoOriginOUTREACH                  PublicDescriptionDtoOrigin = "OUTREACH"
	PublicDescriptionDtoOriginOVALEDGE                  PublicDescriptionDtoOrigin = "OVALEDGE"
	PublicDescriptionDtoOriginPAGERDUTY                 PublicDescriptionDtoOrigin = "PAGERDUTY"
	PublicDescriptionDtoOriginPAGERSHIFT                PublicDescriptionDtoOrigin = "PAGERSHIFT"
	PublicDescriptionDtoOriginPAYPAL                    PublicDescriptionDtoOrigin = "PAYPAL"
	PublicDescriptionDtoOriginPENDO                     PublicDescriptionDtoOrigin = "PENDO"
	PublicDescriptionDtoOriginPINGDOM                   PublicDescriptionDtoOrigin = "PINGDOM"
	PublicDescriptionDtoOriginPINTEREST                 PublicDescriptionDtoOrigin = "PINTEREST"
	PublicDescriptionDtoOriginPIPE17                    PublicDescriptionDtoOrigin = "PIPE17"
	PublicDescriptionDtoOriginPIPEDRIVE                 PublicDescriptionDtoOrigin = "PIPEDRIVE"
	PublicDescriptionDtoOriginPIVOTALTRACKER            PublicDescriptionDtoOrigin = "PIVOTAL_TRACKER"
	PublicDescriptionDtoOriginPLAYVOX                   PublicDescriptionDtoOrigin = "PLAYVOX"
	PublicDescriptionDtoOriginPOSTGRES                  PublicDescriptionDtoOrigin = "POSTGRES"
	PublicDescriptionDtoOriginPOSTHOG                   PublicDescriptionDtoOrigin = "POSTHOG"
	PublicDescriptionDtoOriginPOWERBI                   PublicDescriptionDtoOrigin = "POWER_BI"
	PublicDescriptionDtoOriginPOWERSCHOOL               PublicDescriptionDtoOrigin = "POWERSCHOOL"
	PublicDescriptionDtoOriginPREFECT                   PublicDescriptionDtoOrigin = "PREFECT"
	PublicDescriptionDtoOriginPRESTASHOP                PublicDescriptionDtoOrigin = "PRESTASHOP"
	PublicDescriptionDtoOriginPRESTO                    PublicDescriptionDtoOrigin = "PRESTO"
	PublicDescriptionDtoOriginPRODUCTBOARD              PublicDescriptionDtoOrigin = "PRODUCTBOARD"
	PublicDescriptionDtoOriginPYTHON                    PublicDescriptionDtoOrigin = "PYTHON"
	PublicDescriptionDtoOriginQLIK                      PublicDescriptionDtoOrigin = "QLIK"
	PublicDescriptionDtoOriginQUALAROO                  PublicDescriptionDtoOrigin = "QUALAROO"
	PublicDescriptionDtoOriginQUALTRICS                 PublicDescriptionDtoOrigin = "QUALTRICS"
	PublicDescriptionDtoOriginQUICKBOOKS                PublicDescriptionDtoOrigin = "QUICKBOOKS"
	PublicDescriptionDtoOriginQUICKSIGHT                PublicDescriptionDtoOrigin = "QUICKSIGHT"
	PublicDescriptionDtoOriginRAMP                      PublicDescriptionDtoOrigin = "RAMP"
	PublicDescriptionDtoOriginRARIBLE                   PublicDescriptionDtoOrigin = "RARIBLE"
	PublicDescriptionDtoOriginRECHARGE                  PublicDescriptionDtoOrigin = "RECHARGE"
	PublicDescriptionDtoOriginRECURLY                   PublicDescriptionDtoOrigin = "RECURLY"
	PublicDescriptionDtoOriginREDDIT                    PublicDescriptionDtoOrigin = "REDDIT"
	PublicDescriptionDtoOriginREDSHIFT                  PublicDescriptionDtoOrigin = "REDSHIFT"
	PublicDescriptionDtoOriginRELTIO                    PublicDescriptionDtoOrigin = "RELTIO"
	PublicDescriptionDtoOriginREPLYIO                   PublicDescriptionDtoOrigin = "REPLY_IO"
	PublicDescriptionDtoOriginRETAILNEXT                PublicDescriptionDtoOrigin = "RETAILNEXT"
	PublicDescriptionDtoOriginRETENTLY                  PublicDescriptionDtoOrigin = "RETENTLY"
	PublicDescriptionDtoOriginREVELSYSTEMS              PublicDescriptionDtoOrigin = "REVEL_SYSTEMS"
	PublicDescriptionDtoOriginRINGCENTRAL               PublicDescriptionDtoOrigin = "RINGCENTRAL"
	PublicDescriptionDtoOriginRIPPLING                  PublicDescriptionDtoOrigin = "RIPPLING"
	PublicDescriptionDtoOriginROLLBAR                   PublicDescriptionDtoOrigin = "ROLLBAR"
	PublicDescriptionDtoOriginROOTLY                    PublicDescriptionDtoOrigin = "ROOTLY"
	PublicDescriptionDtoOriginS3                        PublicDescriptionDtoOrigin = "S3"
	PublicDescriptionDtoOriginSAGEHR                    PublicDescriptionDtoOrigin = "SAGE_HR"
	PublicDescriptionDtoOriginSAGEINTACCT               PublicDescriptionDtoOrigin = "SAGE_INTACCT"
	PublicDescriptionDtoOriginSAILTHRU                  PublicDescriptionDtoOrigin = "SAILTHRU"
	PublicDescriptionDtoOriginSALESFORCE                PublicDescriptionDtoOrigin = "SALESFORCE"
	PublicDescriptionDtoOriginSALESLOFT                 PublicDescriptionDtoOrigin = "SALESLOFT"
	PublicDescriptionDtoOriginSALSIFY                   PublicDescriptionDtoOrigin = "SALSIFY"
	PublicDescriptionDtoOriginSAMSARA                   PublicDescriptionDtoOrigin = "SAMSARA"
	PublicDescriptionDtoOriginSAP                       PublicDescriptionDtoOrigin = "SAP"
	PublicDescriptionDtoOriginSAPCONCUR                 PublicDescriptionDtoOrigin = "SAP_CONCUR"
	PublicDescriptionDtoOriginSCORM                     PublicDescriptionDtoOrigin = "SCORM"
	PublicDescriptionDtoOriginSECODA                    PublicDescriptionDtoOrigin = "SECODA"
	PublicDescriptionDtoOriginSECURITYJOURNEY           PublicDescriptionDtoOrigin = "SECURITY_JOURNEY"
	PublicDescriptionDtoOriginSEGMENT                   PublicDescriptionDtoOrigin = "SEGMENT"
	PublicDescriptionDtoOriginSELECTSTAR                PublicDescriptionDtoOrigin = "SELECT_STAR"
	PublicDescriptionDtoOriginSENDGRID                  PublicDescriptionDtoOrigin = "SENDGRID"
	PublicDescriptionDtoOriginSERVICENOW                PublicDescriptionDtoOrigin = "SERVICE_NOW"
	PublicDescriptionDtoOriginSFTP                      PublicDescriptionDtoOrigin = "SFTP"
	PublicDescriptionDtoOriginSHAREPOINT                PublicDescriptionDtoOrigin = "SHAREPOINT"
	PublicDescriptionDtoOriginSHARETRIBE                PublicDescriptionDtoOrigin = "SHARETRIBE"
	PublicDescriptionDtoOriginSHIPHERO                  PublicDescriptionDtoOrigin = "SHIPHERO"
	PublicDescriptionDtoOriginSHIPSTATION               PublicDescriptionDtoOrigin = "SHIPSTATION"
	PublicDescriptionDtoOriginSHOPIFY                   PublicDescriptionDtoOrigin = "SHOPIFY"
	PublicDescriptionDtoOriginSHOPWARE                  PublicDescriptionDtoOrigin = "SHOPWARE"
	PublicDescriptionDtoOriginSHORTIO                   PublicDescriptionDtoOrigin = "SHORT_IO"
	PublicDescriptionDtoOriginSIFFLET                   PublicDescriptionDtoOrigin = "SIFFLET"
	PublicDescriptionDtoOriginSIGMA                     PublicDescriptionDtoOrigin = "SIGMA"
	PublicDescriptionDtoOriginSIMPLECAST                PublicDescriptionDtoOrigin = "SIMPLECAST"
	PublicDescriptionDtoOriginSIMPLESAT                 PublicDescriptionDtoOrigin = "SIMPLESAT"
	PublicDescriptionDtoOriginSINGLESTORE               PublicDescriptionDtoOrigin = "SINGLESTORE"
	PublicDescriptionDtoOriginSISENSE                   PublicDescriptionDtoOrigin = "SISENSE"
	PublicDescriptionDtoOriginSIXSENSE                  PublicDescriptionDtoOrigin = "SIXSENSE"
	PublicDescriptionDtoOriginSKILLJAR                  PublicDescriptionDtoOrigin = "SKILLJAR"
	PublicDescriptionDtoOriginSKUVAULT                  PublicDescriptionDtoOrigin = "SKUVAULT"
	PublicDescriptionDtoOriginSLAB                      PublicDescriptionDtoOrigin = "SLAB"
	PublicDescriptionDtoOriginSLACK                     PublicDescriptionDtoOrigin = "SLACK"
	PublicDescriptionDtoOriginSMADEX                    PublicDescriptionDtoOrigin = "SMADEX"
	PublicDescriptionDtoOriginSNAPCHAT                  PublicDescriptionDtoOrigin = "SNAPCHAT"
	PublicDescriptionDtoOriginSNOWFLAKE                 PublicDescriptionDtoOrigin = "SNOWFLAKE"
	PublicDescriptionDtoOriginSNOWPLOW                  PublicDescriptionDtoOrigin = "SNOWPLOW"
	PublicDescriptionDtoOriginSODA                      PublicDescriptionDtoOrigin = "SODA"
	PublicDescriptionDtoOriginSONARQUBE                 PublicDescriptionDtoOrigin = "SONARQUBE"
	PublicDescriptionDtoOriginSPLITIO                   PublicDescriptionDtoOrigin = "SPLIT_IO"
	PublicDescriptionDtoOriginSPLUNK                    PublicDescriptionDtoOrigin = "SPLUNK"
	PublicDescriptionDtoOriginSPOTIFY                   PublicDescriptionDtoOrigin = "SPOTIFY"
	PublicDescriptionDtoOriginSPREECOMMERCE             PublicDescriptionDtoOrigin = "SPREE_COMMERCE"
	PublicDescriptionDtoOriginSPROUTSOCIAL              PublicDescriptionDtoOrigin = "SPROUT_SOCIAL"
	PublicDescriptionDtoOriginSQUARE                    PublicDescriptionDtoOrigin = "SQUARE"
	PublicDescriptionDtoOriginSQUARESPACE               PublicDescriptionDtoOrigin = "SQUARESPACE"
	PublicDescriptionDtoOriginSTACKADAPT                PublicDescriptionDtoOrigin = "STACK_ADAPT"
	PublicDescriptionDtoOriginSTATSIG                   PublicDescriptionDtoOrigin = "STATSIG"
	PublicDescriptionDtoOriginSTITCH                    PublicDescriptionDtoOrigin = "STITCH"
	PublicDescriptionDtoOriginSTRIPE                    PublicDescriptionDtoOrigin = "STRIPE"
	PublicDescriptionDtoOriginSTYLIGHT                  PublicDescriptionDtoOrigin = "STYLIGHT"
	PublicDescriptionDtoOriginSUBSCRIPT                 PublicDescriptionDtoOrigin = "SUBSCRIPT"
	PublicDescriptionDtoOriginSYNAPSE                   PublicDescriptionDtoOrigin = "SYNAPSE"
	PublicDescriptionDtoOriginTABLEAU                   PublicDescriptionDtoOrigin = "TABLEAU"
	PublicDescriptionDtoOriginTABOOLA                   PublicDescriptionDtoOrigin = "TABOOLA"
	PublicDescriptionDtoOriginTALEND                    PublicDescriptionDtoOrigin = "TALEND"
	PublicDescriptionDtoOriginTALKDESK                  PublicDescriptionDtoOrigin = "TALKDESK"
	PublicDescriptionDtoOriginTALKWALKER                PublicDescriptionDtoOrigin = "TALKWALKER"
	PublicDescriptionDtoOriginTEAMWORKCOM               PublicDescriptionDtoOrigin = "TEAMWORK_COM"
	PublicDescriptionDtoOriginTEMPOIO                   PublicDescriptionDtoOrigin = "TEMPO_IO"
	PublicDescriptionDtoOriginTERADATA                  PublicDescriptionDtoOrigin = "TERADATA"
	PublicDescriptionDtoOriginTERRAFORM                 PublicDescriptionDtoOrigin = "TERRAFORM"
	PublicDescriptionDtoOriginTHETRADEDESK              PublicDescriptionDtoOrigin = "THE_TRADE_DESK"
	PublicDescriptionDtoOriginTHOUGHTSPOT               PublicDescriptionDtoOrigin = "THOUGHT_SPOT"
	PublicDescriptionDtoOriginTHREESIXTYLEARNING        PublicDescriptionDtoOrigin = "THREESIXTYLEARNING"
	PublicDescriptionDtoOriginTIKTOK                    PublicDescriptionDtoOrigin = "TIKTOK"
	PublicDescriptionDtoOriginTOGGL                     PublicDescriptionDtoOrigin = "TOGGL"
	PublicDescriptionDtoOriginTRANSCEND                 PublicDescriptionDtoOrigin = "TRANSCEND"
	PublicDescriptionDtoOriginTRELLO                    PublicDescriptionDtoOrigin = "TRELLO"
	PublicDescriptionDtoOriginTRINET                    PublicDescriptionDtoOrigin = "TRINET"
	PublicDescriptionDtoOriginTRISOLUTE                 PublicDescriptionDtoOrigin = "TRISOLUTE"
	PublicDescriptionDtoOriginTWILIO                    PublicDescriptionDtoOrigin = "TWILIO"
	PublicDescriptionDtoOriginTYPEFORM                  PublicDescriptionDtoOrigin = "TYPEFORM"
	PublicDescriptionDtoOriginUNKNOWN                   PublicDescriptionDtoOrigin = "UNKNOWN"
	PublicDescriptionDtoOriginUPLAND                    PublicDescriptionDtoOrigin = "UPLAND"
	PublicDescriptionDtoOriginUSERVOICE                 PublicDescriptionDtoOrigin = "USERVOICE"
	PublicDescriptionDtoOriginVALIDIO                   PublicDescriptionDtoOrigin = "VALIDIO"
	PublicDescriptionDtoOriginVEEVA                     PublicDescriptionDtoOrigin = "VEEVA"
	PublicDescriptionDtoOriginVERIZONMEDIA              PublicDescriptionDtoOrigin = "VERIZON_MEDIA"
	PublicDescriptionDtoOriginVITALLY                   PublicDescriptionDtoOrigin = "VITALLY"
	PublicDescriptionDtoOriginVONAGE                    PublicDescriptionDtoOrigin = "VONAGE"
	PublicDescriptionDtoOriginVUETIFY                   PublicDescriptionDtoOrigin = "VUETIFY"
	PublicDescriptionDtoOriginWEBHOOKS                  PublicDescriptionDtoOrigin = "WEBHOOKS"
	PublicDescriptionDtoOriginWEBSCRAPER                PublicDescriptionDtoOrigin = "WEB_SCRAPER"
	PublicDescriptionDtoOriginWHENIWORK                 PublicDescriptionDtoOrigin = "WHEN_I_WORK"
	PublicDescriptionDtoOriginWHEREFOUR                 PublicDescriptionDtoOrigin = "WHEREFOUR"
	PublicDescriptionDtoOriginWIKIPEDIA                 PublicDescriptionDtoOrigin = "WIKIPEDIA"
	PublicDescriptionDtoOriginWOOCOMMERCE               PublicDescriptionDtoOrigin = "WOOCOMMERCE"
	PublicDescriptionDtoOriginWORDPRESS                 PublicDescriptionDtoOrigin = "WORDPRESS"
	PublicDescriptionDtoOriginWORKABLE                  PublicDescriptionDtoOrigin = "WORKABLE"
	PublicDescriptionDtoOriginWORKDAY                   PublicDescriptionDtoOrigin = "WORKDAY"
	PublicDescriptionDtoOriginWORKFLOWMAX               PublicDescriptionDtoOrigin = "WORKFLOW_MAX"
	PublicDescriptionDtoOriginWRIKE                     PublicDescriptionDtoOrigin = "WRIKE"
	PublicDescriptionDtoOriginX                         PublicDescriptionDtoOrigin = "X"
	PublicDescriptionDtoOriginXERO                      PublicDescriptionDtoOrigin = "XERO"
	PublicDescriptionDtoOriginXRAY                      PublicDescriptionDtoOrigin = "XRAY"
	PublicDescriptionDtoOriginYAHOO                     PublicDescriptionDtoOrigin = "YAHOO"
	PublicDescriptionDtoOriginYOTPO                     PublicDescriptionDtoOrigin = "YOTPO"
	PublicDescriptionDtoOriginYOUTUBE                   PublicDescriptionDtoOrigin = "YOUTUBE"
	PublicDescriptionDtoOriginZEENEA                    PublicDescriptionDtoOrigin = "ZEENEA"
	PublicDescriptionDtoOriginZENCART                   PublicDescriptionDtoOrigin = "ZEN_CART"
	PublicDescriptionDtoOriginZENDESKCHAT               PublicDescriptionDtoOrigin = "ZENDESK_CHAT"
	PublicDescriptionDtoOriginZENDESKSELL               PublicDescriptionDtoOrigin = "ZENDESK_SELL"
	PublicDescriptionDtoOriginZENDESKSUNSHINE           PublicDescriptionDtoOrigin = "ZENDESK_SUNSHINE"
	PublicDescriptionDtoOriginZENDESKSUPPORT            PublicDescriptionDtoOrigin = "ZENDESK_SUPPORT"
	PublicDescriptionDtoOriginZINGTREE                  PublicDescriptionDtoOrigin = "ZINGTREE"
	PublicDescriptionDtoOriginZOHOBOOKS                 PublicDescriptionDtoOrigin = "ZOHO_BOOKS"
	PublicDescriptionDtoOriginZOHOCAMPAIGNS             PublicDescriptionDtoOrigin = "ZOHO_CAMPAIGNS"
	PublicDescriptionDtoOriginZOHOCRM                   PublicDescriptionDtoOrigin = "ZOHO_CRM"
	PublicDescriptionDtoOriginZOOM                      PublicDescriptionDtoOrigin = "ZOOM"
	PublicDescriptionDtoOriginZUORA                     PublicDescriptionDtoOrigin = "ZUORA"
)

// Defines values for PublicFivetranParametersDtoType.
const (
	PublicFivetranParametersDtoTypeAIRFLOW           PublicFivetranParametersDtoType = "AIRFLOW"
	PublicFivetranParametersDtoTypeATHENA            PublicFivetranParametersDtoType = "ATHENA"
	PublicFivetranParametersDtoTypeBIGQUERY          PublicFivetranParametersDtoType = "BIGQUERY"
	PublicFivetranParametersDtoTypeDATABRICKS        PublicFivetranParametersDtoType = "DATABRICKS"
	PublicFivetranParametersDtoTypeDBT               PublicFivetranParametersDtoType = "DBT"
	PublicFivetranParametersDtoTypeDBTCLOUD          PublicFivetranParametersDtoType = "DBT_CLOUD"
	PublicFivetranParametersDtoTypeDECLARATIVE       PublicFivetranParametersDtoType = "DECLARATIVE"
	PublicFivetranParametersDtoTypeFIVETRAN          PublicFivetranParametersDtoType = "FIVETRAN"
	PublicFivetranParametersDtoTypeLOOKER            PublicFivetranParametersDtoType = "LOOKER"
	PublicFivetranParametersDtoTypeMSSQL             PublicFivetranParametersDtoType = "MSSQL"
	PublicFivetranParametersDtoTypeMYSQL             PublicFivetranParametersDtoType = "MYSQL"
	PublicFivetranParametersDtoTypeORACLE            PublicFivetranParametersDtoType = "ORACLE"
	PublicFivetranParametersDtoTypePOSTGRESQL        PublicFivetranParametersDtoType = "POSTGRESQL"
	PublicFivetranParametersDtoTypePOWERBI           PublicFivetranParametersDtoType = "POWER_BI"
	PublicFivetranParametersDtoTypeQUICKSIGHT        PublicFivetranParametersDtoType = "QUICKSIGHT"
	PublicFivetranParametersDtoTypeREDSHIFT          PublicFivetranParametersDtoType = "REDSHIFT"
	PublicFivetranParametersDtoTypeSNOWFLAKE         PublicFivetranParametersDtoType = "SNOWFLAKE"
	PublicFivetranParametersDtoTypeSYNAPSE           PublicFivetranParametersDtoType = "SYNAPSE"
	PublicFivetranParametersDtoTypeTABLEAU           PublicFivetranParametersDtoType = "TABLEAU"
	PublicFivetranParametersDtoTypeUnderscoreUNKNOWN PublicFivetranParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicGetAssetDtoHealthStatus.
const (
	PublicGetAssetDtoHealthStatusHIGHRISKINCIDENTS PublicGetAssetDtoHealthStatus = "HIGH_RISK_INCIDENTS"
	PublicGetAssetDtoHealthStatusNOINCIDENTS       PublicGetAssetDtoHealthStatus = "NO_INCIDENTS"
	PublicGetAssetDtoHealthStatusNOTMONITORED      PublicGetAssetDtoHealthStatus = "NOT_MONITORED"
	PublicGetAssetDtoHealthStatusUNSUPPORTED       PublicGetAssetDtoHealthStatus = "UNSUPPORTED"
	PublicGetAssetDtoHealthStatusURGENTINCIDENTS   PublicGetAssetDtoHealthStatus = "URGENT_INCIDENTS"
)

// Defines values for PublicGetAssetDtoIngestionMethod.
const (
	PublicGetAssetDtoIngestionMethodDECLARATIVE    PublicGetAssetDtoIngestionMethod = "DECLARATIVE"
	PublicGetAssetDtoIngestionMethodSIFFLETSOURCED PublicGetAssetDtoIngestionMethod = "SIFFLET_SOURCED"
)

// Defines values for PublicGetAssetDtoTechnology.
const (
	PublicGetAssetDtoTechnologyACCELDATA                 PublicGetAssetDtoTechnology = "ACCELDATA"
	PublicGetAssetDtoTechnologyACRYLDATA                 PublicGetAssetDtoTechnology = "ACRYL_DATA"
	PublicGetAssetDtoTechnologyACTIANVECTOR              PublicGetAssetDtoTechnology = "ACTIAN_VECTOR"
	PublicGetAssetDtoTechnologyACTIVECAMPAIGN            PublicGetAssetDtoTechnology = "ACTIVE_CAMPAIGN"
	PublicGetAssetDtoTechnologyADA                       PublicGetAssetDtoTechnology = "ADA"
	PublicGetAssetDtoTechnologyADJUST                    PublicGetAssetDtoTechnology = "ADJUST"
	PublicGetAssetDtoTechnologyADOBE                     PublicGetAssetDtoTechnology = "ADOBE"
	PublicGetAssetDtoTechnologyADPWFN                    PublicGetAssetDtoTechnology = "ADP_WFN"
	PublicGetAssetDtoTechnologyADROLL                    PublicGetAssetDtoTechnology = "ADROLL"
	PublicGetAssetDtoTechnologyAFFINITY                  PublicGetAssetDtoTechnology = "AFFINITY"
	PublicGetAssetDtoTechnologyAIRBYTE                   PublicGetAssetDtoTechnology = "AIRBYTE"
	PublicGetAssetDtoTechnologyAIRCALL                   PublicGetAssetDtoTechnology = "AIRCALL"
	PublicGetAssetDtoTechnologyAIRFLOW                   PublicGetAssetDtoTechnology = "AIRFLOW"
	PublicGetAssetDtoTechnologyAIRTABLE                  PublicGetAssetDtoTechnology = "AIRTABLE"
	PublicGetAssetDtoTechnologyALATION                   PublicGetAssetDtoTechnology = "ALATION"
	PublicGetAssetDtoTechnologyALCHEMER                  PublicGetAssetDtoTechnology = "ALCHEMER"
	PublicGetAssetDtoTechnologyALVINAI                   PublicGetAssetDtoTechnology = "ALVIN_AI"
	PublicGetAssetDtoTechnologyAMAZON                    PublicGetAssetDtoTechnology = "AMAZON"
	PublicGetAssetDtoTechnologyAMAZONCLOUDFRONT          PublicGetAssetDtoTechnology = "AMAZON_CLOUDFRONT"
	PublicGetAssetDtoTechnologyAMAZONDOCUMENTDB          PublicGetAssetDtoTechnology = "AMAZON_DOCUMENTDB"
	PublicGetAssetDtoTechnologyAMAZONDYNAMODB            PublicGetAssetDtoTechnology = "AMAZON_DYNAMODB"
	PublicGetAssetDtoTechnologyAMAZONFIREHOSE            PublicGetAssetDtoTechnology = "AMAZON_FIREHOSE"
	PublicGetAssetDtoTechnologyAMAZONSAGEMAKER           PublicGetAssetDtoTechnology = "AMAZON_SAGEMAKER"
	PublicGetAssetDtoTechnologyAMAZONSELLINGPARTNER      PublicGetAssetDtoTechnology = "AMAZON_SELLING_PARTNER"
	PublicGetAssetDtoTechnologyAMPLITUDE                 PublicGetAssetDtoTechnology = "AMPLITUDE"
	PublicGetAssetDtoTechnologyANAPLAN                   PublicGetAssetDtoTechnology = "ANAPLAN"
	PublicGetAssetDtoTechnologyANOMALO                   PublicGetAssetDtoTechnology = "ANOMALO"
	PublicGetAssetDtoTechnologyAPACHEKAFKA               PublicGetAssetDtoTechnology = "APACHE_KAFKA"
	PublicGetAssetDtoTechnologyAPACHESPARK               PublicGetAssetDtoTechnology = "APACHE_SPARK"
	PublicGetAssetDtoTechnologyAPPCUES                   PublicGetAssetDtoTechnology = "APPCUES"
	PublicGetAssetDtoTechnologyAPPFIGURES                PublicGetAssetDtoTechnology = "APPFIGURES"
	PublicGetAssetDtoTechnologyAPPLE                     PublicGetAssetDtoTechnology = "APPLE"
	PublicGetAssetDtoTechnologyAPPLEAPPSTORE             PublicGetAssetDtoTechnology = "APPLE_APP_STORE"
	PublicGetAssetDtoTechnologyAPPSFLYER                 PublicGetAssetDtoTechnology = "APPSFLYER"
	PublicGetAssetDtoTechnologyASANA                     PublicGetAssetDtoTechnology = "ASANA"
	PublicGetAssetDtoTechnologyASSEMBLED                 PublicGetAssetDtoTechnology = "ASSEMBLED"
	PublicGetAssetDtoTechnologyATHENA                    PublicGetAssetDtoTechnology = "ATHENA"
	PublicGetAssetDtoTechnologyATLAN                     PublicGetAssetDtoTechnology = "ATLAN"
	PublicGetAssetDtoTechnologyATLASSIANCONFLUENCE       PublicGetAssetDtoTechnology = "ATLASSIAN_CONFLUENCE"
	PublicGetAssetDtoTechnologyATLASSIANJIRA             PublicGetAssetDtoTechnology = "ATLASSIAN_JIRA"
	PublicGetAssetDtoTechnologyATLASSIANOPSGENIE         PublicGetAssetDtoTechnology = "ATLASSIAN_OPSGENIE"
	PublicGetAssetDtoTechnologyAUTH0                     PublicGetAssetDtoTechnology = "AUTH0"
	PublicGetAssetDtoTechnologyAUTODESKBIM360            PublicGetAssetDtoTechnology = "AUTODESK_BIM_360"
	PublicGetAssetDtoTechnologyAWIN                      PublicGetAssetDtoTechnology = "AWIN"
	PublicGetAssetDtoTechnologyAWSCLOUDTRAIL             PublicGetAssetDtoTechnology = "AWS_CLOUDTRAIL"
	PublicGetAssetDtoTechnologyAWSCOSTEXPLORER           PublicGetAssetDtoTechnology = "AWS_COST_EXPLORER"
	PublicGetAssetDtoTechnologyAWSINVENTORY              PublicGetAssetDtoTechnology = "AWS_INVENTORY"
	PublicGetAssetDtoTechnologyAWSLAMBDA                 PublicGetAssetDtoTechnology = "AWS_LAMBDA"
	PublicGetAssetDtoTechnologyAZURE                     PublicGetAssetDtoTechnology = "AZURE"
	PublicGetAssetDtoTechnologyBALLOTREADY               PublicGetAssetDtoTechnology = "BALLOT_READY"
	PublicGetAssetDtoTechnologyBAMBOOHR                  PublicGetAssetDtoTechnology = "BAMBOOHR"
	PublicGetAssetDtoTechnologyBIGCOMMERCE               PublicGetAssetDtoTechnology = "BIGCOMMERCE"
	PublicGetAssetDtoTechnologyBIGEYE                    PublicGetAssetDtoTechnology = "BIGEYE"
	PublicGetAssetDtoTechnologyBIGQUERY                  PublicGetAssetDtoTechnology = "BIGQUERY"
	PublicGetAssetDtoTechnologyBILLINGPLATFORM           PublicGetAssetDtoTechnology = "BILLINGPLATFORM"
	PublicGetAssetDtoTechnologyBIRDEYE                   PublicGetAssetDtoTechnology = "BIRDEYE"
	PublicGetAssetDtoTechnologyBLACKBOARD                PublicGetAssetDtoTechnology = "BLACKBOARD"
	PublicGetAssetDtoTechnologyBOX                       PublicGetAssetDtoTechnology = "BOX"
	PublicGetAssetDtoTechnologyBRAINTREE                 PublicGetAssetDtoTechnology = "BRAINTREE"
	PublicGetAssetDtoTechnologyBRAZE                     PublicGetAssetDtoTechnology = "BRAZE"
	PublicGetAssetDtoTechnologyBREVO                     PublicGetAssetDtoTechnology = "BREVO"
	PublicGetAssetDtoTechnologyBREX                      PublicGetAssetDtoTechnology = "BREX"
	PublicGetAssetDtoTechnologyBUILDKITE                 PublicGetAssetDtoTechnology = "BUILDKITE"
	PublicGetAssetDtoTechnologyBUZZSPROUT                PublicGetAssetDtoTechnology = "BUZZSPROUT"
	PublicGetAssetDtoTechnologyCALENDLY                  PublicGetAssetDtoTechnology = "CALENDLY"
	PublicGetAssetDtoTechnologyCAMPAIGNMONITOR           PublicGetAssetDtoTechnology = "CAMPAIGN_MONITOR"
	PublicGetAssetDtoTechnologyCANNY                     PublicGetAssetDtoTechnology = "CANNY"
	PublicGetAssetDtoTechnologyCANVAS                    PublicGetAssetDtoTechnology = "CANVAS"
	PublicGetAssetDtoTechnologyCAPTERRA                  PublicGetAssetDtoTechnology = "CAPTERRA"
	PublicGetAssetDtoTechnologyCASTORDOC                 PublicGetAssetDtoTechnology = "CASTOR_DOC"
	PublicGetAssetDtoTechnologyCENSUS                    PublicGetAssetDtoTechnology = "CENSUS"
	PublicGetAssetDtoTechnologyCERTINIA                  PublicGetAssetDtoTechnology = "CERTINIA"
	PublicGetAssetDtoTechnologyCHAMELEON                 PublicGetAssetDtoTechnology = "CHAMELEON"
	PublicGetAssetDtoTechnologyCHANNELADVISOR            PublicGetAssetDtoTechnology = "CHANNEL_ADVISOR"
	PublicGetAssetDtoTechnologyCHARGEBEE                 PublicGetAssetDtoTechnology = "CHARGEBEE"
	PublicGetAssetDtoTechnologyCHARGEDESK                PublicGetAssetDtoTechnology = "CHARGEDESK"
	PublicGetAssetDtoTechnologyCHARTMOGUL                PublicGetAssetDtoTechnology = "CHARTMOGUL"
	PublicGetAssetDtoTechnologyCHORUSAI                  PublicGetAssetDtoTechnology = "CHORUS_AI"
	PublicGetAssetDtoTechnologyCHURNKEY                  PublicGetAssetDtoTechnology = "CHURNKEY"
	PublicGetAssetDtoTechnologyCHURNZERO                 PublicGetAssetDtoTechnology = "CHURNZERO"
	PublicGetAssetDtoTechnologyCIMIS                     PublicGetAssetDtoTechnology = "CIMIS"
	PublicGetAssetDtoTechnologyCIN7                      PublicGetAssetDtoTechnology = "CIN7"
	PublicGetAssetDtoTechnologyCIRCLECI                  PublicGetAssetDtoTechnology = "CIRCLE_CI"
	PublicGetAssetDtoTechnologyCLARI                     PublicGetAssetDtoTechnology = "CLARI"
	PublicGetAssetDtoTechnologyCLICKUP                   PublicGetAssetDtoTechnology = "CLICKUP"
	PublicGetAssetDtoTechnologyCLIFFAI                   PublicGetAssetDtoTechnology = "CLIFF_AI"
	PublicGetAssetDtoTechnologyCLOSE                     PublicGetAssetDtoTechnology = "CLOSE"
	PublicGetAssetDtoTechnologyCOLLIBRA                  PublicGetAssetDtoTechnology = "COLLIBRA"
	PublicGetAssetDtoTechnologyCOMMERCETOOLS             PublicGetAssetDtoTechnology = "COMMERCETOOLS"
	PublicGetAssetDtoTechnologyCOMPOSER                  PublicGetAssetDtoTechnology = "COMPOSER"
	PublicGetAssetDtoTechnologyCONFLUENTCLOUD            PublicGetAssetDtoTechnology = "CONFLUENT_CLOUD"
	PublicGetAssetDtoTechnologyCONTRASTSECURITY          PublicGetAssetDtoTechnology = "CONTRAST_SECURITY"
	PublicGetAssetDtoTechnologyCOUPA                     PublicGetAssetDtoTechnology = "COUPA"
	PublicGetAssetDtoTechnologyCRITEO                    PublicGetAssetDtoTechnology = "CRITEO"
	PublicGetAssetDtoTechnologyCROSSBEAM                 PublicGetAssetDtoTechnology = "CROSSBEAM"
	PublicGetAssetDtoTechnologyCRUNCHBASE                PublicGetAssetDtoTechnology = "CRUNCHBASE"
	PublicGetAssetDtoTechnologyCUSTOMERIO                PublicGetAssetDtoTechnology = "CUSTOMER_IO"
	PublicGetAssetDtoTechnologyD2LBRIGHTSPACE            PublicGetAssetDtoTechnology = "D2L_BRIGHTSPACE"
	PublicGetAssetDtoTechnologyDAGSTER                   PublicGetAssetDtoTechnology = "DAGSTER"
	PublicGetAssetDtoTechnologyDATABAND                  PublicGetAssetDtoTechnology = "DATABAND"
	PublicGetAssetDtoTechnologyDATABRICKS                PublicGetAssetDtoTechnology = "DATABRICKS"
	PublicGetAssetDtoTechnologyDATADOG                   PublicGetAssetDtoTechnology = "DATADOG"
	PublicGetAssetDtoTechnologyDATAEDO                   PublicGetAssetDtoTechnology = "DATAEDO"
	PublicGetAssetDtoTechnologyDATAFOLD                  PublicGetAssetDtoTechnology = "DATAFOLD"
	PublicGetAssetDtoTechnologyDATAGALAXY                PublicGetAssetDtoTechnology = "DATAGALAXY"
	PublicGetAssetDtoTechnologyDATAHUB                   PublicGetAssetDtoTechnology = "DATAHUB"
	PublicGetAssetDtoTechnologyDATAIKU                   PublicGetAssetDtoTechnology = "DATAIKU"
	PublicGetAssetDtoTechnologyDATAWORLD                 PublicGetAssetDtoTechnology = "DATA_WORLD"
	PublicGetAssetDtoTechnologyDB2                       PublicGetAssetDtoTechnology = "DB2"
	PublicGetAssetDtoTechnologyDBT                       PublicGetAssetDtoTechnology = "DBT"
	PublicGetAssetDtoTechnologyDBTCLOUD                  PublicGetAssetDtoTechnology = "DBTCLOUD"
	PublicGetAssetDtoTechnologyDCLLOGISTICS              PublicGetAssetDtoTechnology = "DCL_LOGISTICS"
	PublicGetAssetDtoTechnologyDEAR                      PublicGetAssetDtoTechnology = "DEAR"
	PublicGetAssetDtoTechnologyDECUBE                    PublicGetAssetDtoTechnology = "DECUBE"
	PublicGetAssetDtoTechnologyDELIGHTED                 PublicGetAssetDtoTechnology = "DELIGHTED"
	PublicGetAssetDtoTechnologyDEPUTY                    PublicGetAssetDtoTechnology = "DEPUTY"
	PublicGetAssetDtoTechnologyDESTINI                   PublicGetAssetDtoTechnology = "DESTINI"
	PublicGetAssetDtoTechnologyDIXA                      PublicGetAssetDtoTechnology = "DIXA"
	PublicGetAssetDtoTechnologyDOCEBO                    PublicGetAssetDtoTechnology = "DOCEBO"
	PublicGetAssetDtoTechnologyDRATA                     PublicGetAssetDtoTechnology = "DRATA"
	PublicGetAssetDtoTechnologyDRIFT                     PublicGetAssetDtoTechnology = "DRIFT"
	PublicGetAssetDtoTechnologyDRIP                      PublicGetAssetDtoTechnology = "DRIP"
	PublicGetAssetDtoTechnologyDROPBOX                   PublicGetAssetDtoTechnology = "DROPBOX"
	PublicGetAssetDtoTechnologyDUOPLANE                  PublicGetAssetDtoTechnology = "DUOPLANE"
	PublicGetAssetDtoTechnologyEASYPOST                  PublicGetAssetDtoTechnology = "EASY_POST"
	PublicGetAssetDtoTechnologyECONOMIC                  PublicGetAssetDtoTechnology = "E_CONOMIC"
	PublicGetAssetDtoTechnologyELASTICSEARCH             PublicGetAssetDtoTechnology = "ELASTICSEARCH"
	PublicGetAssetDtoTechnologyELEMENTARY                PublicGetAssetDtoTechnology = "ELEMENTARY"
	PublicGetAssetDtoTechnologyELLUCIAN                  PublicGetAssetDtoTechnology = "ELLUCIAN"
	PublicGetAssetDtoTechnologyELOQUA                    PublicGetAssetDtoTechnology = "ELOQUA"
	PublicGetAssetDtoTechnologyEMAIL                     PublicGetAssetDtoTechnology = "EMAIL"
	PublicGetAssetDtoTechnologyEMPLOYMENTHERO            PublicGetAssetDtoTechnology = "EMPLOYMENT_HERO"
	PublicGetAssetDtoTechnologyEPICORPROPHET21           PublicGetAssetDtoTechnology = "EPICOR_PROPHET_21"
	PublicGetAssetDtoTechnologyEVENTBRITE                PublicGetAssetDtoTechnology = "EVENTBRITE"
	PublicGetAssetDtoTechnologyEVERHOUR                  PublicGetAssetDtoTechnology = "EVERHOUR"
	PublicGetAssetDtoTechnologyEXCEL                     PublicGetAssetDtoTechnology = "EXCEL"
	PublicGetAssetDtoTechnologyEXPENSIFY                 PublicGetAssetDtoTechnology = "EXPENSIFY"
	PublicGetAssetDtoTechnologyFACEBOOK                  PublicGetAssetDtoTechnology = "FACEBOOK"
	PublicGetAssetDtoTechnologyFIFTEENFIVE               PublicGetAssetDtoTechnology = "FIFTEENFIVE"
	PublicGetAssetDtoTechnologyFIGMA                     PublicGetAssetDtoTechnology = "FIGMA"
	PublicGetAssetDtoTechnologyFIREBASE                  PublicGetAssetDtoTechnology = "FIREBASE"
	PublicGetAssetDtoTechnologyFIREBOLT                  PublicGetAssetDtoTechnology = "FIREBOLT"
	PublicGetAssetDtoTechnologyFIVETRAN                  PublicGetAssetDtoTechnology = "FIVETRAN"
	PublicGetAssetDtoTechnologyFLEXPORT                  PublicGetAssetDtoTechnology = "FLEXPORT"
	PublicGetAssetDtoTechnologyFORJ                      PublicGetAssetDtoTechnology = "FORJ"
	PublicGetAssetDtoTechnologyFOUNTAIN                  PublicGetAssetDtoTechnology = "FOUNTAIN"
	PublicGetAssetDtoTechnologyFREIGHTVIEW               PublicGetAssetDtoTechnology = "FREIGHTVIEW"
	PublicGetAssetDtoTechnologyFRESHBOOKS                PublicGetAssetDtoTechnology = "FRESHBOOKS"
	PublicGetAssetDtoTechnologyFRESHCHAT                 PublicGetAssetDtoTechnology = "FRESHCHAT"
	PublicGetAssetDtoTechnologyFRESHDESK                 PublicGetAssetDtoTechnology = "FRESHDESK"
	PublicGetAssetDtoTechnologyFRESHDESKCONTACTCENTER    PublicGetAssetDtoTechnology = "FRESHDESK_CONTACT_CENTER"
	PublicGetAssetDtoTechnologyFRESHSERVICE              PublicGetAssetDtoTechnology = "FRESHSERVICE"
	PublicGetAssetDtoTechnologyFRESHSUCCESS              PublicGetAssetDtoTechnology = "FRESHSUCCESS"
	PublicGetAssetDtoTechnologyFRESHTEAM                 PublicGetAssetDtoTechnology = "FRESHTEAM"
	PublicGetAssetDtoTechnologyFRIENDBUY                 PublicGetAssetDtoTechnology = "FRIENDBUY"
	PublicGetAssetDtoTechnologyFRONT                     PublicGetAssetDtoTechnology = "FRONT"
	PublicGetAssetDtoTechnologyFTP                       PublicGetAssetDtoTechnology = "FTP"
	PublicGetAssetDtoTechnologyFULLSTORY                 PublicGetAssetDtoTechnology = "FULLSTORY"
	PublicGetAssetDtoTechnologyG2                        PublicGetAssetDtoTechnology = "G2"
	PublicGetAssetDtoTechnologyGAINSIGHT                 PublicGetAssetDtoTechnology = "GAINSIGHT"
	PublicGetAssetDtoTechnologyGEM                       PublicGetAssetDtoTechnology = "GEM"
	PublicGetAssetDtoTechnologyGIT                       PublicGetAssetDtoTechnology = "GIT"
	PublicGetAssetDtoTechnologyGITHUB                    PublicGetAssetDtoTechnology = "GITHUB"
	PublicGetAssetDtoTechnologyGITLAB                    PublicGetAssetDtoTechnology = "GITLAB"
	PublicGetAssetDtoTechnologyGLADLY                    PublicGetAssetDtoTechnology = "GLADLY"
	PublicGetAssetDtoTechnologyGOCARDLESS                PublicGetAssetDtoTechnology = "GOCARDLESS"
	PublicGetAssetDtoTechnologyGONG                      PublicGetAssetDtoTechnology = "GONG"
	PublicGetAssetDtoTechnologyGOOGLE                    PublicGetAssetDtoTechnology = "GOOGLE"
	PublicGetAssetDtoTechnologyGOOGLEADMANAGER           PublicGetAssetDtoTechnology = "GOOGLE_AD_MANAGER"
	PublicGetAssetDtoTechnologyGOOGLEADS                 PublicGetAssetDtoTechnology = "GOOGLE_ADS"
	PublicGetAssetDtoTechnologyGOOGLEANALYTICS           PublicGetAssetDtoTechnology = "GOOGLE_ANALYTICS"
	PublicGetAssetDtoTechnologyGOOGLECALENDAR            PublicGetAssetDtoTechnology = "GOOGLE_CALENDAR"
	PublicGetAssetDtoTechnologyGOOGLECAMPAIGNMANAGER     PublicGetAssetDtoTechnology = "GOOGLE_CAMPAIGN_MANAGER"
	PublicGetAssetDtoTechnologyGOOGLECHROME              PublicGetAssetDtoTechnology = "GOOGLE_CHROME"
	PublicGetAssetDtoTechnologyGOOGLECLOUD               PublicGetAssetDtoTechnology = "GOOGLE_CLOUD"
	PublicGetAssetDtoTechnologyGOOGLECLOUDSTORAGE        PublicGetAssetDtoTechnology = "GOOGLE_CLOUD_STORAGE"
	PublicGetAssetDtoTechnologyGOOGLEDISPLAY             PublicGetAssetDtoTechnology = "GOOGLE_DISPLAY"
	PublicGetAssetDtoTechnologyGOOGLEDRIVE               PublicGetAssetDtoTechnology = "GOOGLE_DRIVE"
	PublicGetAssetDtoTechnologyGOOGLEPLAY                PublicGetAssetDtoTechnology = "GOOGLE_PLAY"
	PublicGetAssetDtoTechnologyGOOGLESEARCHADS360        PublicGetAssetDtoTechnology = "GOOGLE_SEARCH_ADS_360"
	PublicGetAssetDtoTechnologyGOOGLESEARCHCONSOLE       PublicGetAssetDtoTechnology = "GOOGLE_SEARCH_CONSOLE"
	PublicGetAssetDtoTechnologyGOOGLESHEETS              PublicGetAssetDtoTechnology = "GOOGLE_SHEETS"
	PublicGetAssetDtoTechnologyGOOGLETASKS               PublicGetAssetDtoTechnology = "GOOGLE_TASKS"
	PublicGetAssetDtoTechnologyGORGIAS                   PublicGetAssetDtoTechnology = "GORGIAS"
	PublicGetAssetDtoTechnologyGREENHOUSE                PublicGetAssetDtoTechnology = "GREENHOUSE"
	PublicGetAssetDtoTechnologyGREENPLUM                 PublicGetAssetDtoTechnology = "GREENPLUM"
	PublicGetAssetDtoTechnologyGREENPOWERMONITOR         PublicGetAssetDtoTechnology = "GREEN_POWER_MONITOR"
	PublicGetAssetDtoTechnologyGREPSR                    PublicGetAssetDtoTechnology = "GREPSR"
	PublicGetAssetDtoTechnologyGRIN                      PublicGetAssetDtoTechnology = "GRIN"
	PublicGetAssetDtoTechnologyGURU                      PublicGetAssetDtoTechnology = "GURU"
	PublicGetAssetDtoTechnologyH2                        PublicGetAssetDtoTechnology = "H2"
	PublicGetAssetDtoTechnologyHARVEST                   PublicGetAssetDtoTechnology = "HARVEST"
	PublicGetAssetDtoTechnologyHDFS                      PublicGetAssetDtoTechnology = "HDFS"
	PublicGetAssetDtoTechnologyHEAP                      PublicGetAssetDtoTechnology = "HEAP"
	PublicGetAssetDtoTechnologyHEIGHT                    PublicGetAssetDtoTechnology = "HEIGHT"
	PublicGetAssetDtoTechnologyHELPSCOUT                 PublicGetAssetDtoTechnology = "HELP_SCOUT"
	PublicGetAssetDtoTechnologyHELPSHIFT                 PublicGetAssetDtoTechnology = "HELPSHIFT"
	PublicGetAssetDtoTechnologyHEROKUKAFKA               PublicGetAssetDtoTechnology = "HEROKU_KAFKA"
	PublicGetAssetDtoTechnologyHEX                       PublicGetAssetDtoTechnology = "HEX"
	PublicGetAssetDtoTechnologyHIBOB                     PublicGetAssetDtoTechnology = "HIBOB"
	PublicGetAssetDtoTechnologyHIGHTOUCH                 PublicGetAssetDtoTechnology = "HIGH_TOUCH"
	PublicGetAssetDtoTechnologyHOPIN                     PublicGetAssetDtoTechnology = "HOPIN"
	PublicGetAssetDtoTechnologyHUBSPOT                   PublicGetAssetDtoTechnology = "HUBSPOT"
	PublicGetAssetDtoTechnologyIMPACT                    PublicGetAssetDtoTechnology = "IMPACT"
	PublicGetAssetDtoTechnologyINCIDENTIO                PublicGetAssetDtoTechnology = "INCIDENT_IO"
	PublicGetAssetDtoTechnologyINFOBIP                   PublicGetAssetDtoTechnology = "INFOBIP"
	PublicGetAssetDtoTechnologyINFORMATICA               PublicGetAssetDtoTechnology = "INFORMATICA"
	PublicGetAssetDtoTechnologyINSIGHTLY                 PublicGetAssetDtoTechnology = "INSIGHTLY"
	PublicGetAssetDtoTechnologyINSTAGRAM                 PublicGetAssetDtoTechnology = "INSTAGRAM"
	PublicGetAssetDtoTechnologyINTERCOM                  PublicGetAssetDtoTechnology = "INTERCOM"
	PublicGetAssetDtoTechnologyINVESTOPEDIA              PublicGetAssetDtoTechnology = "INVESTOPEDIA"
	PublicGetAssetDtoTechnologyIRONCLAD                  PublicGetAssetDtoTechnology = "IRONCLAD"
	PublicGetAssetDtoTechnologyIRONSOURCE                PublicGetAssetDtoTechnology = "IRONSOURCE"
	PublicGetAssetDtoTechnologyITERABLE                  PublicGetAssetDtoTechnology = "ITERABLE"
	PublicGetAssetDtoTechnologyJAVA                      PublicGetAssetDtoTechnology = "JAVA"
	PublicGetAssetDtoTechnologyJENKINS                   PublicGetAssetDtoTechnology = "JENKINS"
	PublicGetAssetDtoTechnologyJUSTCALL                  PublicGetAssetDtoTechnology = "JUSTCALL"
	PublicGetAssetDtoTechnologyKANDJI                    PublicGetAssetDtoTechnology = "KANDJI"
	PublicGetAssetDtoTechnologyKENSU                     PublicGetAssetDtoTechnology = "KENSU"
	PublicGetAssetDtoTechnologyKHOROSCARE                PublicGetAssetDtoTechnology = "KHOROS_CARE"
	PublicGetAssetDtoTechnologyKISSMETRICS               PublicGetAssetDtoTechnology = "KISSMETRICS"
	PublicGetAssetDtoTechnologyKLAVIYO                   PublicGetAssetDtoTechnology = "KLAVIYO"
	PublicGetAssetDtoTechnologyKNOWBE4                   PublicGetAssetDtoTechnology = "KNOWBE4"
	PublicGetAssetDtoTechnologyKONNECTINSIGHTS           PublicGetAssetDtoTechnology = "KONNECT_INSIGHTS"
	PublicGetAssetDtoTechnologyKUSTOMER                  PublicGetAssetDtoTechnology = "KUSTOMER"
	PublicGetAssetDtoTechnologyLARIATDATA                PublicGetAssetDtoTechnology = "LARIAT_DATA"
	PublicGetAssetDtoTechnologyLATTICE                   PublicGetAssetDtoTechnology = "LATTICE"
	PublicGetAssetDtoTechnologyLAUNCHDARKLY              PublicGetAssetDtoTechnology = "LAUNCH_DARKLY"
	PublicGetAssetDtoTechnologyLEARNUPON                 PublicGetAssetDtoTechnology = "LEARN_UPON"
	PublicGetAssetDtoTechnologyLESSONLY                  PublicGetAssetDtoTechnology = "LESSONLY"
	PublicGetAssetDtoTechnologyLEVER                     PublicGetAssetDtoTechnology = "LEVER"
	PublicGetAssetDtoTechnologyLIFTOFF                   PublicGetAssetDtoTechnology = "LIFTOFF"
	PublicGetAssetDtoTechnologyLIGHTDASH                 PublicGetAssetDtoTechnology = "LIGHTDASH"
	PublicGetAssetDtoTechnologyLIGHTSPEED                PublicGetAssetDtoTechnology = "LIGHTSPEED"
	PublicGetAssetDtoTechnologyLIGHTSUP                  PublicGetAssetDtoTechnology = "LIGHTSUP"
	PublicGetAssetDtoTechnologyLINEAR                    PublicGetAssetDtoTechnology = "LINEAR"
	PublicGetAssetDtoTechnologyLINKEDIN                  PublicGetAssetDtoTechnology = "LINKEDIN"
	PublicGetAssetDtoTechnologyLIVECHAT                  PublicGetAssetDtoTechnology = "LIVECHAT"
	PublicGetAssetDtoTechnologyLOADEDCOMMERCE            PublicGetAssetDtoTechnology = "LOADED_COMMERCE"
	PublicGetAssetDtoTechnologyLOB                       PublicGetAssetDtoTechnology = "LOB"
	PublicGetAssetDtoTechnologyLOOKER                    PublicGetAssetDtoTechnology = "LOOKER"
	PublicGetAssetDtoTechnologyLOOP                      PublicGetAssetDtoTechnology = "LOOP"
	PublicGetAssetDtoTechnologyLOOPIO                    PublicGetAssetDtoTechnology = "LOOPIO"
	PublicGetAssetDtoTechnologyLUMA                      PublicGetAssetDtoTechnology = "LUMA"
	PublicGetAssetDtoTechnologyMAGENTO                   PublicGetAssetDtoTechnology = "MAGENTO"
	PublicGetAssetDtoTechnologyMAILCHIMP                 PublicGetAssetDtoTechnology = "MAILCHIMP"
	PublicGetAssetDtoTechnologyMAILGUN                   PublicGetAssetDtoTechnology = "MAILGUN"
	PublicGetAssetDtoTechnologyMANDRILL                  PublicGetAssetDtoTechnology = "MANDRILL"
	PublicGetAssetDtoTechnologyMANTA                     PublicGetAssetDtoTechnology = "MANTA"
	PublicGetAssetDtoTechnologyMARIADB                   PublicGetAssetDtoTechnology = "MARIADB"
	PublicGetAssetDtoTechnologyMARINSOFTWARE             PublicGetAssetDtoTechnology = "MARIN_SOFTWARE"
	PublicGetAssetDtoTechnologyMARKETO                   PublicGetAssetDtoTechnology = "MARKETO"
	PublicGetAssetDtoTechnologyMATTERMOST                PublicGetAssetDtoTechnology = "MATTERMOST"
	PublicGetAssetDtoTechnologyMAVENLINK                 PublicGetAssetDtoTechnology = "MAVENLINK"
	PublicGetAssetDtoTechnologyMAXIO                     PublicGetAssetDtoTechnology = "MAXIO"
	PublicGetAssetDtoTechnologyMEDALLIA                  PublicGetAssetDtoTechnology = "MEDALLIA"
	PublicGetAssetDtoTechnologyMETA                      PublicGetAssetDtoTechnology = "META"
	PublicGetAssetDtoTechnologyMETABASE                  PublicGetAssetDtoTechnology = "METABASE"
	PublicGetAssetDtoTechnologyMETAPHOR                  PublicGetAssetDtoTechnology = "METAPHOR"
	PublicGetAssetDtoTechnologyMETAPLANE                 PublicGetAssetDtoTechnology = "METAPLANE"
	PublicGetAssetDtoTechnologyMICROSOFT                 PublicGetAssetDtoTechnology = "MICROSOFT"
	PublicGetAssetDtoTechnologyMICROSOFTAZUREBLOBSTORAGE PublicGetAssetDtoTechnology = "MICROSOFT_AZURE_BLOB_STORAGE"
	PublicGetAssetDtoTechnologyMICROSOFTAZUREML          PublicGetAssetDtoTechnology = "MICROSOFT_AZURE_ML"
	PublicGetAssetDtoTechnologyMICROSOFTDYNAMICS         PublicGetAssetDtoTechnology = "MICROSOFT_DYNAMICS"
	PublicGetAssetDtoTechnologyMICROSOFTONEDRIVE         PublicGetAssetDtoTechnology = "MICROSOFT_ONEDRIVE"
	PublicGetAssetDtoTechnologyMICROSOFTPURVIEW          PublicGetAssetDtoTechnology = "MICROSOFT_PURVIEW"
	PublicGetAssetDtoTechnologyMICROSOFTTEAMS            PublicGetAssetDtoTechnology = "MICROSOFT_TEAMS"
	PublicGetAssetDtoTechnologyMICROSTRATEGY             PublicGetAssetDtoTechnology = "MICROSTRATEGY"
	PublicGetAssetDtoTechnologyMIXMAX                    PublicGetAssetDtoTechnology = "MIXMAX"
	PublicGetAssetDtoTechnologyMIXPANEL                  PublicGetAssetDtoTechnology = "MIXPANEL"
	PublicGetAssetDtoTechnologyMONDAYCOM                 PublicGetAssetDtoTechnology = "MONDAY_COM"
	PublicGetAssetDtoTechnologyMONGODB                   PublicGetAssetDtoTechnology = "MONGODB"
	PublicGetAssetDtoTechnologyMONTECARLO                PublicGetAssetDtoTechnology = "MONTE_CARLO"
	PublicGetAssetDtoTechnologyMOUNTAIN                  PublicGetAssetDtoTechnology = "MOUNTAIN"
	PublicGetAssetDtoTechnologyMSSQL                     PublicGetAssetDtoTechnology = "MSSQL"
	PublicGetAssetDtoTechnologyMULESOFT                  PublicGetAssetDtoTechnology = "MULESOFT"
	PublicGetAssetDtoTechnologyMUX                       PublicGetAssetDtoTechnology = "MUX"
	PublicGetAssetDtoTechnologyMWAA                      PublicGetAssetDtoTechnology = "MWAA"
	PublicGetAssetDtoTechnologyMYSQL                     PublicGetAssetDtoTechnology = "MYSQL"
	PublicGetAssetDtoTechnologyNAMELY                    PublicGetAssetDtoTechnology = "NAMELY"
	PublicGetAssetDtoTechnologyNCINO                     PublicGetAssetDtoTechnology = "NCINO"
	PublicGetAssetDtoTechnologyNETSUITEANALYTICS         PublicGetAssetDtoTechnology = "NETSUITE_ANALYTICS"
	PublicGetAssetDtoTechnologyNEWRELIC                  PublicGetAssetDtoTechnology = "NEW_RELIC"
	PublicGetAssetDtoTechnologyNOTION                    PublicGetAssetDtoTechnology = "NOTION"
	PublicGetAssetDtoTechnologyNYLAS                     PublicGetAssetDtoTechnology = "NYLAS"
	PublicGetAssetDtoTechnologyOBSERVE                   PublicGetAssetDtoTechnology = "OBSERVE"
	PublicGetAssetDtoTechnologyOCTOPAI                   PublicGetAssetDtoTechnology = "OCTOPAI"
	PublicGetAssetDtoTechnologyOKTA                      PublicGetAssetDtoTechnology = "OKTA"
	PublicGetAssetDtoTechnologyOPENAI                    PublicGetAssetDtoTechnology = "OPEN_AI"
	PublicGetAssetDtoTechnologyOPENDATADC                PublicGetAssetDtoTechnology = "OPEN_DATA_DC"
	PublicGetAssetDtoTechnologyOPENEXCHANGESRATES        PublicGetAssetDtoTechnology = "OPEN_EXCHANGES_RATES"
	PublicGetAssetDtoTechnologyOPENSEARCH                PublicGetAssetDtoTechnology = "OPEN_SEARCH"
	PublicGetAssetDtoTechnologyOPTIMIZELY                PublicGetAssetDtoTechnology = "OPTIMIZELY"
	PublicGetAssetDtoTechnologyORACLE                    PublicGetAssetDtoTechnology = "ORACLE"
	PublicGetAssetDtoTechnologyORBITCOMMUNITYPLATFORM    PublicGetAssetDtoTechnology = "ORBIT_COMMUNITY_PLATFORM"
	PublicGetAssetDtoTechnologyORDWAY                    PublicGetAssetDtoTechnology = "ORDWAY"
	PublicGetAssetDtoTechnologyORTTO                     PublicGetAssetDtoTechnology = "ORTTO"
	PublicGetAssetDtoTechnologyOSCOMMERCE                PublicGetAssetDtoTechnology = "OS_COMMERCE"
	PublicGetAssetDtoTechnologyOUTBRAIN                  PublicGetAssetDtoTechnology = "OUTBRAIN"
	PublicGetAssetDtoTechnologyOUTREACH                  PublicGetAssetDtoTechnology = "OUTREACH"
	PublicGetAssetDtoTechnologyOVALEDGE                  PublicGetAssetDtoTechnology = "OVALEDGE"
	PublicGetAssetDtoTechnologyPAGERDUTY                 PublicGetAssetDtoTechnology = "PAGERDUTY"
	PublicGetAssetDtoTechnologyPAGERSHIFT                PublicGetAssetDtoTechnology = "PAGERSHIFT"
	PublicGetAssetDtoTechnologyPAYPAL                    PublicGetAssetDtoTechnology = "PAYPAL"
	PublicGetAssetDtoTechnologyPENDO                     PublicGetAssetDtoTechnology = "PENDO"
	PublicGetAssetDtoTechnologyPINGDOM                   PublicGetAssetDtoTechnology = "PINGDOM"
	PublicGetAssetDtoTechnologyPINTEREST                 PublicGetAssetDtoTechnology = "PINTEREST"
	PublicGetAssetDtoTechnologyPIPE17                    PublicGetAssetDtoTechnology = "PIPE17"
	PublicGetAssetDtoTechnologyPIPEDRIVE                 PublicGetAssetDtoTechnology = "PIPEDRIVE"
	PublicGetAssetDtoTechnologyPIVOTALTRACKER            PublicGetAssetDtoTechnology = "PIVOTAL_TRACKER"
	PublicGetAssetDtoTechnologyPLAYVOX                   PublicGetAssetDtoTechnology = "PLAYVOX"
	PublicGetAssetDtoTechnologyPOSTGRES                  PublicGetAssetDtoTechnology = "POSTGRES"
	PublicGetAssetDtoTechnologyPOSTHOG                   PublicGetAssetDtoTechnology = "POSTHOG"
	PublicGetAssetDtoTechnologyPOWERBI                   PublicGetAssetDtoTechnology = "POWER_BI"
	PublicGetAssetDtoTechnologyPOWERSCHOOL               PublicGetAssetDtoTechnology = "POWERSCHOOL"
	PublicGetAssetDtoTechnologyPREFECT                   PublicGetAssetDtoTechnology = "PREFECT"
	PublicGetAssetDtoTechnologyPRESTASHOP                PublicGetAssetDtoTechnology = "PRESTASHOP"
	PublicGetAssetDtoTechnologyPRESTO                    PublicGetAssetDtoTechnology = "PRESTO"
	PublicGetAssetDtoTechnologyPRODUCTBOARD              PublicGetAssetDtoTechnology = "PRODUCTBOARD"
	PublicGetAssetDtoTechnologyPYTHON                    PublicGetAssetDtoTechnology = "PYTHON"
	PublicGetAssetDtoTechnologyQLIK                      PublicGetAssetDtoTechnology = "QLIK"
	PublicGetAssetDtoTechnologyQUALAROO                  PublicGetAssetDtoTechnology = "QUALAROO"
	PublicGetAssetDtoTechnologyQUALTRICS                 PublicGetAssetDtoTechnology = "QUALTRICS"
	PublicGetAssetDtoTechnologyQUICKBOOKS                PublicGetAssetDtoTechnology = "QUICKBOOKS"
	PublicGetAssetDtoTechnologyQUICKSIGHT                PublicGetAssetDtoTechnology = "QUICKSIGHT"
	PublicGetAssetDtoTechnologyRAMP                      PublicGetAssetDtoTechnology = "RAMP"
	PublicGetAssetDtoTechnologyRARIBLE                   PublicGetAssetDtoTechnology = "RARIBLE"
	PublicGetAssetDtoTechnologyRECHARGE                  PublicGetAssetDtoTechnology = "RECHARGE"
	PublicGetAssetDtoTechnologyRECURLY                   PublicGetAssetDtoTechnology = "RECURLY"
	PublicGetAssetDtoTechnologyREDDIT                    PublicGetAssetDtoTechnology = "REDDIT"
	PublicGetAssetDtoTechnologyREDSHIFT                  PublicGetAssetDtoTechnology = "REDSHIFT"
	PublicGetAssetDtoTechnologyRELTIO                    PublicGetAssetDtoTechnology = "RELTIO"
	PublicGetAssetDtoTechnologyREPLYIO                   PublicGetAssetDtoTechnology = "REPLY_IO"
	PublicGetAssetDtoTechnologyRETAILNEXT                PublicGetAssetDtoTechnology = "RETAILNEXT"
	PublicGetAssetDtoTechnologyRETENTLY                  PublicGetAssetDtoTechnology = "RETENTLY"
	PublicGetAssetDtoTechnologyREVELSYSTEMS              PublicGetAssetDtoTechnology = "REVEL_SYSTEMS"
	PublicGetAssetDtoTechnologyRINGCENTRAL               PublicGetAssetDtoTechnology = "RINGCENTRAL"
	PublicGetAssetDtoTechnologyRIPPLING                  PublicGetAssetDtoTechnology = "RIPPLING"
	PublicGetAssetDtoTechnologyROLLBAR                   PublicGetAssetDtoTechnology = "ROLLBAR"
	PublicGetAssetDtoTechnologyROOTLY                    PublicGetAssetDtoTechnology = "ROOTLY"
	PublicGetAssetDtoTechnologyS3                        PublicGetAssetDtoTechnology = "S3"
	PublicGetAssetDtoTechnologySAGEHR                    PublicGetAssetDtoTechnology = "SAGE_HR"
	PublicGetAssetDtoTechnologySAGEINTACCT               PublicGetAssetDtoTechnology = "SAGE_INTACCT"
	PublicGetAssetDtoTechnologySAILTHRU                  PublicGetAssetDtoTechnology = "SAILTHRU"
	PublicGetAssetDtoTechnologySALESFORCE                PublicGetAssetDtoTechnology = "SALESFORCE"
	PublicGetAssetDtoTechnologySALESLOFT                 PublicGetAssetDtoTechnology = "SALESLOFT"
	PublicGetAssetDtoTechnologySALSIFY                   PublicGetAssetDtoTechnology = "SALSIFY"
	PublicGetAssetDtoTechnologySAMSARA                   PublicGetAssetDtoTechnology = "SAMSARA"
	PublicGetAssetDtoTechnologySAP                       PublicGetAssetDtoTechnology = "SAP"
	PublicGetAssetDtoTechnologySAPCONCUR                 PublicGetAssetDtoTechnology = "SAP_CONCUR"
	PublicGetAssetDtoTechnologySCORM                     PublicGetAssetDtoTechnology = "SCORM"
	PublicGetAssetDtoTechnologySECODA                    PublicGetAssetDtoTechnology = "SECODA"
	PublicGetAssetDtoTechnologySECURITYJOURNEY           PublicGetAssetDtoTechnology = "SECURITY_JOURNEY"
	PublicGetAssetDtoTechnologySEGMENT                   PublicGetAssetDtoTechnology = "SEGMENT"
	PublicGetAssetDtoTechnologySELECTSTAR                PublicGetAssetDtoTechnology = "SELECT_STAR"
	PublicGetAssetDtoTechnologySENDGRID                  PublicGetAssetDtoTechnology = "SENDGRID"
	PublicGetAssetDtoTechnologySERVICENOW                PublicGetAssetDtoTechnology = "SERVICE_NOW"
	PublicGetAssetDtoTechnologySFTP                      PublicGetAssetDtoTechnology = "SFTP"
	PublicGetAssetDtoTechnologySHAREPOINT                PublicGetAssetDtoTechnology = "SHAREPOINT"
	PublicGetAssetDtoTechnologySHARETRIBE                PublicGetAssetDtoTechnology = "SHARETRIBE"
	PublicGetAssetDtoTechnologySHIPHERO                  PublicGetAssetDtoTechnology = "SHIPHERO"
	PublicGetAssetDtoTechnologySHIPSTATION               PublicGetAssetDtoTechnology = "SHIPSTATION"
	PublicGetAssetDtoTechnologySHOPIFY                   PublicGetAssetDtoTechnology = "SHOPIFY"
	PublicGetAssetDtoTechnologySHOPWARE                  PublicGetAssetDtoTechnology = "SHOPWARE"
	PublicGetAssetDtoTechnologySHORTIO                   PublicGetAssetDtoTechnology = "SHORT_IO"
	PublicGetAssetDtoTechnologySIFFLET                   PublicGetAssetDtoTechnology = "SIFFLET"
	PublicGetAssetDtoTechnologySIGMA                     PublicGetAssetDtoTechnology = "SIGMA"
	PublicGetAssetDtoTechnologySIMPLECAST                PublicGetAssetDtoTechnology = "SIMPLECAST"
	PublicGetAssetDtoTechnologySIMPLESAT                 PublicGetAssetDtoTechnology = "SIMPLESAT"
	PublicGetAssetDtoTechnologySINGLESTORE               PublicGetAssetDtoTechnology = "SINGLESTORE"
	PublicGetAssetDtoTechnologySISENSE                   PublicGetAssetDtoTechnology = "SISENSE"
	PublicGetAssetDtoTechnologySIXSENSE                  PublicGetAssetDtoTechnology = "SIXSENSE"
	PublicGetAssetDtoTechnologySKILLJAR                  PublicGetAssetDtoTechnology = "SKILLJAR"
	PublicGetAssetDtoTechnologySKUVAULT                  PublicGetAssetDtoTechnology = "SKUVAULT"
	PublicGetAssetDtoTechnologySLAB                      PublicGetAssetDtoTechnology = "SLAB"
	PublicGetAssetDtoTechnologySLACK                     PublicGetAssetDtoTechnology = "SLACK"
	PublicGetAssetDtoTechnologySMADEX                    PublicGetAssetDtoTechnology = "SMADEX"
	PublicGetAssetDtoTechnologySNAPCHAT                  PublicGetAssetDtoTechnology = "SNAPCHAT"
	PublicGetAssetDtoTechnologySNOWFLAKE                 PublicGetAssetDtoTechnology = "SNOWFLAKE"
	PublicGetAssetDtoTechnologySNOWPLOW                  PublicGetAssetDtoTechnology = "SNOWPLOW"
	PublicGetAssetDtoTechnologySODA                      PublicGetAssetDtoTechnology = "SODA"
	PublicGetAssetDtoTechnologySONARQUBE                 PublicGetAssetDtoTechnology = "SONARQUBE"
	PublicGetAssetDtoTechnologySPLITIO                   PublicGetAssetDtoTechnology = "SPLIT_IO"
	PublicGetAssetDtoTechnologySPLUNK                    PublicGetAssetDtoTechnology = "SPLUNK"
	PublicGetAssetDtoTechnologySPOTIFY                   PublicGetAssetDtoTechnology = "SPOTIFY"
	PublicGetAssetDtoTechnologySPREECOMMERCE             PublicGetAssetDtoTechnology = "SPREE_COMMERCE"
	PublicGetAssetDtoTechnologySPROUTSOCIAL              PublicGetAssetDtoTechnology = "SPROUT_SOCIAL"
	PublicGetAssetDtoTechnologySQUARE                    PublicGetAssetDtoTechnology = "SQUARE"
	PublicGetAssetDtoTechnologySQUARESPACE               PublicGetAssetDtoTechnology = "SQUARESPACE"
	PublicGetAssetDtoTechnologySTACKADAPT                PublicGetAssetDtoTechnology = "STACK_ADAPT"
	PublicGetAssetDtoTechnologySTATSIG                   PublicGetAssetDtoTechnology = "STATSIG"
	PublicGetAssetDtoTechnologySTITCH                    PublicGetAssetDtoTechnology = "STITCH"
	PublicGetAssetDtoTechnologySTRIPE                    PublicGetAssetDtoTechnology = "STRIPE"
	PublicGetAssetDtoTechnologySTYLIGHT                  PublicGetAssetDtoTechnology = "STYLIGHT"
	PublicGetAssetDtoTechnologySUBSCRIPT                 PublicGetAssetDtoTechnology = "SUBSCRIPT"
	PublicGetAssetDtoTechnologySYNAPSE                   PublicGetAssetDtoTechnology = "SYNAPSE"
	PublicGetAssetDtoTechnologyTABLEAU                   PublicGetAssetDtoTechnology = "TABLEAU"
	PublicGetAssetDtoTechnologyTABOOLA                   PublicGetAssetDtoTechnology = "TABOOLA"
	PublicGetAssetDtoTechnologyTALEND                    PublicGetAssetDtoTechnology = "TALEND"
	PublicGetAssetDtoTechnologyTALKDESK                  PublicGetAssetDtoTechnology = "TALKDESK"
	PublicGetAssetDtoTechnologyTALKWALKER                PublicGetAssetDtoTechnology = "TALKWALKER"
	PublicGetAssetDtoTechnologyTEAMWORKCOM               PublicGetAssetDtoTechnology = "TEAMWORK_COM"
	PublicGetAssetDtoTechnologyTEMPOIO                   PublicGetAssetDtoTechnology = "TEMPO_IO"
	PublicGetAssetDtoTechnologyTERADATA                  PublicGetAssetDtoTechnology = "TERADATA"
	PublicGetAssetDtoTechnologyTERRAFORM                 PublicGetAssetDtoTechnology = "TERRAFORM"
	PublicGetAssetDtoTechnologyTHETRADEDESK              PublicGetAssetDtoTechnology = "THE_TRADE_DESK"
	PublicGetAssetDtoTechnologyTHOUGHTSPOT               PublicGetAssetDtoTechnology = "THOUGHT_SPOT"
	PublicGetAssetDtoTechnologyTHREESIXTYLEARNING        PublicGetAssetDtoTechnology = "THREESIXTYLEARNING"
	PublicGetAssetDtoTechnologyTIKTOK                    PublicGetAssetDtoTechnology = "TIKTOK"
	PublicGetAssetDtoTechnologyTOGGL                     PublicGetAssetDtoTechnology = "TOGGL"
	PublicGetAssetDtoTechnologyTRANSCEND                 PublicGetAssetDtoTechnology = "TRANSCEND"
	PublicGetAssetDtoTechnologyTRELLO                    PublicGetAssetDtoTechnology = "TRELLO"
	PublicGetAssetDtoTechnologyTRINET                    PublicGetAssetDtoTechnology = "TRINET"
	PublicGetAssetDtoTechnologyTRISOLUTE                 PublicGetAssetDtoTechnology = "TRISOLUTE"
	PublicGetAssetDtoTechnologyTWILIO                    PublicGetAssetDtoTechnology = "TWILIO"
	PublicGetAssetDtoTechnologyTYPEFORM                  PublicGetAssetDtoTechnology = "TYPEFORM"
	PublicGetAssetDtoTechnologyUNKNOWN                   PublicGetAssetDtoTechnology = "UNKNOWN"
	PublicGetAssetDtoTechnologyUPLAND                    PublicGetAssetDtoTechnology = "UPLAND"
	PublicGetAssetDtoTechnologyUSERVOICE                 PublicGetAssetDtoTechnology = "USERVOICE"
	PublicGetAssetDtoTechnologyVALIDIO                   PublicGetAssetDtoTechnology = "VALIDIO"
	PublicGetAssetDtoTechnologyVEEVA                     PublicGetAssetDtoTechnology = "VEEVA"
	PublicGetAssetDtoTechnologyVERIZONMEDIA              PublicGetAssetDtoTechnology = "VERIZON_MEDIA"
	PublicGetAssetDtoTechnologyVITALLY                   PublicGetAssetDtoTechnology = "VITALLY"
	PublicGetAssetDtoTechnologyVONAGE                    PublicGetAssetDtoTechnology = "VONAGE"
	PublicGetAssetDtoTechnologyVUETIFY                   PublicGetAssetDtoTechnology = "VUETIFY"
	PublicGetAssetDtoTechnologyWEBHOOKS                  PublicGetAssetDtoTechnology = "WEBHOOKS"
	PublicGetAssetDtoTechnologyWEBSCRAPER                PublicGetAssetDtoTechnology = "WEB_SCRAPER"
	PublicGetAssetDtoTechnologyWHENIWORK                 PublicGetAssetDtoTechnology = "WHEN_I_WORK"
	PublicGetAssetDtoTechnologyWHEREFOUR                 PublicGetAssetDtoTechnology = "WHEREFOUR"
	PublicGetAssetDtoTechnologyWIKIPEDIA                 PublicGetAssetDtoTechnology = "WIKIPEDIA"
	PublicGetAssetDtoTechnologyWOOCOMMERCE               PublicGetAssetDtoTechnology = "WOOCOMMERCE"
	PublicGetAssetDtoTechnologyWORDPRESS                 PublicGetAssetDtoTechnology = "WORDPRESS"
	PublicGetAssetDtoTechnologyWORKABLE                  PublicGetAssetDtoTechnology = "WORKABLE"
	PublicGetAssetDtoTechnologyWORKDAY                   PublicGetAssetDtoTechnology = "WORKDAY"
	PublicGetAssetDtoTechnologyWORKFLOWMAX               PublicGetAssetDtoTechnology = "WORKFLOW_MAX"
	PublicGetAssetDtoTechnologyWRIKE                     PublicGetAssetDtoTechnology = "WRIKE"
	PublicGetAssetDtoTechnologyX                         PublicGetAssetDtoTechnology = "X"
	PublicGetAssetDtoTechnologyXERO                      PublicGetAssetDtoTechnology = "XERO"
	PublicGetAssetDtoTechnologyXRAY                      PublicGetAssetDtoTechnology = "XRAY"
	PublicGetAssetDtoTechnologyYAHOO                     PublicGetAssetDtoTechnology = "YAHOO"
	PublicGetAssetDtoTechnologyYOTPO                     PublicGetAssetDtoTechnology = "YOTPO"
	PublicGetAssetDtoTechnologyYOUTUBE                   PublicGetAssetDtoTechnology = "YOUTUBE"
	PublicGetAssetDtoTechnologyZEENEA                    PublicGetAssetDtoTechnology = "ZEENEA"
	PublicGetAssetDtoTechnologyZENCART                   PublicGetAssetDtoTechnology = "ZEN_CART"
	PublicGetAssetDtoTechnologyZENDESKCHAT               PublicGetAssetDtoTechnology = "ZENDESK_CHAT"
	PublicGetAssetDtoTechnologyZENDESKSELL               PublicGetAssetDtoTechnology = "ZENDESK_SELL"
	PublicGetAssetDtoTechnologyZENDESKSUNSHINE           PublicGetAssetDtoTechnology = "ZENDESK_SUNSHINE"
	PublicGetAssetDtoTechnologyZENDESKSUPPORT            PublicGetAssetDtoTechnology = "ZENDESK_SUPPORT"
	PublicGetAssetDtoTechnologyZINGTREE                  PublicGetAssetDtoTechnology = "ZINGTREE"
	PublicGetAssetDtoTechnologyZOHOBOOKS                 PublicGetAssetDtoTechnology = "ZOHO_BOOKS"
	PublicGetAssetDtoTechnologyZOHOCAMPAIGNS             PublicGetAssetDtoTechnology = "ZOHO_CAMPAIGNS"
	PublicGetAssetDtoTechnologyZOHOCRM                   PublicGetAssetDtoTechnology = "ZOHO_CRM"
	PublicGetAssetDtoTechnologyZOOM                      PublicGetAssetDtoTechnology = "ZOOM"
	PublicGetAssetDtoTechnologyZUORA                     PublicGetAssetDtoTechnology = "ZUORA"
)

// Defines values for PublicGetAssetDtoType.
const (
	PublicGetAssetDtoTypeCONNECTOR        PublicGetAssetDtoType = "CONNECTOR"
	PublicGetAssetDtoTypeDAG              PublicGetAssetDtoType = "DAG"
	PublicGetAssetDtoTypeDASHBOARD        PublicGetAssetDtoType = "DASHBOARD"
	PublicGetAssetDtoTypeEXTERNALTABLE    PublicGetAssetDtoType = "EXTERNAL_TABLE"
	PublicGetAssetDtoTypeMATERIALIZEDVIEW PublicGetAssetDtoType = "MATERIALIZED_VIEW"
	PublicGetAssetDtoTypeMLMODEL          PublicGetAssetDtoType = "ML_MODEL"
	PublicGetAssetDtoTypeMODEL            PublicGetAssetDtoType = "MODEL"
	PublicGetAssetDtoTypeORCHESTRATOR     PublicGetAssetDtoType = "ORCHESTRATOR"
	PublicGetAssetDtoTypeOTHER            PublicGetAssetDtoType = "OTHER"
	PublicGetAssetDtoTypePIPELINE         PublicGetAssetDtoType = "PIPELINE"
	PublicGetAssetDtoTypeREPORT           PublicGetAssetDtoType = "REPORT"
	PublicGetAssetDtoTypeSNOWFLAKESTREAM  PublicGetAssetDtoType = "SNOWFLAKE_STREAM"
	PublicGetAssetDtoTypeTABLE            PublicGetAssetDtoType = "TABLE"
	PublicGetAssetDtoTypeTRANSFORMATION   PublicGetAssetDtoType = "TRANSFORMATION"
	PublicGetAssetDtoTypeVIEW             PublicGetAssetDtoType = "VIEW"
)

// Defines values for PublicGetAssetDtoUsage.
const (
	PublicGetAssetDtoUsageHIGH        PublicGetAssetDtoUsage = "HIGH"
	PublicGetAssetDtoUsageLOW         PublicGetAssetDtoUsage = "LOW"
	PublicGetAssetDtoUsageMEDIUM      PublicGetAssetDtoUsage = "MEDIUM"
	PublicGetAssetDtoUsageUNSUPPORTED PublicGetAssetDtoUsage = "UNSUPPORTED"
)

// Defines values for PublicGetAssetListDtoHealthStatus.
const (
	PublicGetAssetListDtoHealthStatusHIGHRISKINCIDENTS PublicGetAssetListDtoHealthStatus = "HIGH_RISK_INCIDENTS"
	PublicGetAssetListDtoHealthStatusNOINCIDENTS       PublicGetAssetListDtoHealthStatus = "NO_INCIDENTS"
	PublicGetAssetListDtoHealthStatusNOTMONITORED      PublicGetAssetListDtoHealthStatus = "NOT_MONITORED"
	PublicGetAssetListDtoHealthStatusUNSUPPORTED       PublicGetAssetListDtoHealthStatus = "UNSUPPORTED"
	PublicGetAssetListDtoHealthStatusURGENTINCIDENTS   PublicGetAssetListDtoHealthStatus = "URGENT_INCIDENTS"
)

// Defines values for PublicGetAssetListDtoIngestionMethod.
const (
	PublicGetAssetListDtoIngestionMethodDECLARATIVE    PublicGetAssetListDtoIngestionMethod = "DECLARATIVE"
	PublicGetAssetListDtoIngestionMethodSIFFLETSOURCED PublicGetAssetListDtoIngestionMethod = "SIFFLET_SOURCED"
)

// Defines values for PublicGetAssetListDtoTechnology.
const (
	PublicGetAssetListDtoTechnologyACCELDATA                 PublicGetAssetListDtoTechnology = "ACCELDATA"
	PublicGetAssetListDtoTechnologyACRYLDATA                 PublicGetAssetListDtoTechnology = "ACRYL_DATA"
	PublicGetAssetListDtoTechnologyACTIANVECTOR              PublicGetAssetListDtoTechnology = "ACTIAN_VECTOR"
	PublicGetAssetListDtoTechnologyACTIVECAMPAIGN            PublicGetAssetListDtoTechnology = "ACTIVE_CAMPAIGN"
	PublicGetAssetListDtoTechnologyADA                       PublicGetAssetListDtoTechnology = "ADA"
	PublicGetAssetListDtoTechnologyADJUST                    PublicGetAssetListDtoTechnology = "ADJUST"
	PublicGetAssetListDtoTechnologyADOBE                     PublicGetAssetListDtoTechnology = "ADOBE"
	PublicGetAssetListDtoTechnologyADPWFN                    PublicGetAssetListDtoTechnology = "ADP_WFN"
	PublicGetAssetListDtoTechnologyADROLL                    PublicGetAssetListDtoTechnology = "ADROLL"
	PublicGetAssetListDtoTechnologyAFFINITY                  PublicGetAssetListDtoTechnology = "AFFINITY"
	PublicGetAssetListDtoTechnologyAIRBYTE                   PublicGetAssetListDtoTechnology = "AIRBYTE"
	PublicGetAssetListDtoTechnologyAIRCALL                   PublicGetAssetListDtoTechnology = "AIRCALL"
	PublicGetAssetListDtoTechnologyAIRFLOW                   PublicGetAssetListDtoTechnology = "AIRFLOW"
	PublicGetAssetListDtoTechnologyAIRTABLE                  PublicGetAssetListDtoTechnology = "AIRTABLE"
	PublicGetAssetListDtoTechnologyALATION                   PublicGetAssetListDtoTechnology = "ALATION"
	PublicGetAssetListDtoTechnologyALCHEMER                  PublicGetAssetListDtoTechnology = "ALCHEMER"
	PublicGetAssetListDtoTechnologyALVINAI                   PublicGetAssetListDtoTechnology = "ALVIN_AI"
	PublicGetAssetListDtoTechnologyAMAZON                    PublicGetAssetListDtoTechnology = "AMAZON"
	PublicGetAssetListDtoTechnologyAMAZONCLOUDFRONT          PublicGetAssetListDtoTechnology = "AMAZON_CLOUDFRONT"
	PublicGetAssetListDtoTechnologyAMAZONDOCUMENTDB          PublicGetAssetListDtoTechnology = "AMAZON_DOCUMENTDB"
	PublicGetAssetListDtoTechnologyAMAZONDYNAMODB            PublicGetAssetListDtoTechnology = "AMAZON_DYNAMODB"
	PublicGetAssetListDtoTechnologyAMAZONFIREHOSE            PublicGetAssetListDtoTechnology = "AMAZON_FIREHOSE"
	PublicGetAssetListDtoTechnologyAMAZONSAGEMAKER           PublicGetAssetListDtoTechnology = "AMAZON_SAGEMAKER"
	PublicGetAssetListDtoTechnologyAMAZONSELLINGPARTNER      PublicGetAssetListDtoTechnology = "AMAZON_SELLING_PARTNER"
	PublicGetAssetListDtoTechnologyAMPLITUDE                 PublicGetAssetListDtoTechnology = "AMPLITUDE"
	PublicGetAssetListDtoTechnologyANAPLAN                   PublicGetAssetListDtoTechnology = "ANAPLAN"
	PublicGetAssetListDtoTechnologyANOMALO                   PublicGetAssetListDtoTechnology = "ANOMALO"
	PublicGetAssetListDtoTechnologyAPACHEKAFKA               PublicGetAssetListDtoTechnology = "APACHE_KAFKA"
	PublicGetAssetListDtoTechnologyAPACHESPARK               PublicGetAssetListDtoTechnology = "APACHE_SPARK"
	PublicGetAssetListDtoTechnologyAPPCUES                   PublicGetAssetListDtoTechnology = "APPCUES"
	PublicGetAssetListDtoTechnologyAPPFIGURES                PublicGetAssetListDtoTechnology = "APPFIGURES"
	PublicGetAssetListDtoTechnologyAPPLE                     PublicGetAssetListDtoTechnology = "APPLE"
	PublicGetAssetListDtoTechnologyAPPLEAPPSTORE             PublicGetAssetListDtoTechnology = "APPLE_APP_STORE"
	PublicGetAssetListDtoTechnologyAPPSFLYER                 PublicGetAssetListDtoTechnology = "APPSFLYER"
	PublicGetAssetListDtoTechnologyASANA                     PublicGetAssetListDtoTechnology = "ASANA"
	PublicGetAssetListDtoTechnologyASSEMBLED                 PublicGetAssetListDtoTechnology = "ASSEMBLED"
	PublicGetAssetListDtoTechnologyATHENA                    PublicGetAssetListDtoTechnology = "ATHENA"
	PublicGetAssetListDtoTechnologyATLAN                     PublicGetAssetListDtoTechnology = "ATLAN"
	PublicGetAssetListDtoTechnologyATLASSIANCONFLUENCE       PublicGetAssetListDtoTechnology = "ATLASSIAN_CONFLUENCE"
	PublicGetAssetListDtoTechnologyATLASSIANJIRA             PublicGetAssetListDtoTechnology = "ATLASSIAN_JIRA"
	PublicGetAssetListDtoTechnologyATLASSIANOPSGENIE         PublicGetAssetListDtoTechnology = "ATLASSIAN_OPSGENIE"
	PublicGetAssetListDtoTechnologyAUTH0                     PublicGetAssetListDtoTechnology = "AUTH0"
	PublicGetAssetListDtoTechnologyAUTODESKBIM360            PublicGetAssetListDtoTechnology = "AUTODESK_BIM_360"
	PublicGetAssetListDtoTechnologyAWIN                      PublicGetAssetListDtoTechnology = "AWIN"
	PublicGetAssetListDtoTechnologyAWSCLOUDTRAIL             PublicGetAssetListDtoTechnology = "AWS_CLOUDTRAIL"
	PublicGetAssetListDtoTechnologyAWSCOSTEXPLORER           PublicGetAssetListDtoTechnology = "AWS_COST_EXPLORER"
	PublicGetAssetListDtoTechnologyAWSINVENTORY              PublicGetAssetListDtoTechnology = "AWS_INVENTORY"
	PublicGetAssetListDtoTechnologyAWSLAMBDA                 PublicGetAssetListDtoTechnology = "AWS_LAMBDA"
	PublicGetAssetListDtoTechnologyAZURE                     PublicGetAssetListDtoTechnology = "AZURE"
	PublicGetAssetListDtoTechnologyBALLOTREADY               PublicGetAssetListDtoTechnology = "BALLOT_READY"
	PublicGetAssetListDtoTechnologyBAMBOOHR                  PublicGetAssetListDtoTechnology = "BAMBOOHR"
	PublicGetAssetListDtoTechnologyBIGCOMMERCE               PublicGetAssetListDtoTechnology = "BIGCOMMERCE"
	PublicGetAssetListDtoTechnologyBIGEYE                    PublicGetAssetListDtoTechnology = "BIGEYE"
	PublicGetAssetListDtoTechnologyBIGQUERY                  PublicGetAssetListDtoTechnology = "BIGQUERY"
	PublicGetAssetListDtoTechnologyBILLINGPLATFORM           PublicGetAssetListDtoTechnology = "BILLINGPLATFORM"
	PublicGetAssetListDtoTechnologyBIRDEYE                   PublicGetAssetListDtoTechnology = "BIRDEYE"
	PublicGetAssetListDtoTechnologyBLACKBOARD                PublicGetAssetListDtoTechnology = "BLACKBOARD"
	PublicGetAssetListDtoTechnologyBOX                       PublicGetAssetListDtoTechnology = "BOX"
	PublicGetAssetListDtoTechnologyBRAINTREE                 PublicGetAssetListDtoTechnology = "BRAINTREE"
	PublicGetAssetListDtoTechnologyBRAZE                     PublicGetAssetListDtoTechnology = "BRAZE"
	PublicGetAssetListDtoTechnologyBREVO                     PublicGetAssetListDtoTechnology = "BREVO"
	PublicGetAssetListDtoTechnologyBREX                      PublicGetAssetListDtoTechnology = "BREX"
	PublicGetAssetListDtoTechnologyBUILDKITE                 PublicGetAssetListDtoTechnology = "BUILDKITE"
	PublicGetAssetListDtoTechnologyBUZZSPROUT                PublicGetAssetListDtoTechnology = "BUZZSPROUT"
	PublicGetAssetListDtoTechnologyCALENDLY                  PublicGetAssetListDtoTechnology = "CALENDLY"
	PublicGetAssetListDtoTechnologyCAMPAIGNMONITOR           PublicGetAssetListDtoTechnology = "CAMPAIGN_MONITOR"
	PublicGetAssetListDtoTechnologyCANNY                     PublicGetAssetListDtoTechnology = "CANNY"
	PublicGetAssetListDtoTechnologyCANVAS                    PublicGetAssetListDtoTechnology = "CANVAS"
	PublicGetAssetListDtoTechnologyCAPTERRA                  PublicGetAssetListDtoTechnology = "CAPTERRA"
	PublicGetAssetListDtoTechnologyCASTORDOC                 PublicGetAssetListDtoTechnology = "CASTOR_DOC"
	PublicGetAssetListDtoTechnologyCENSUS                    PublicGetAssetListDtoTechnology = "CENSUS"
	PublicGetAssetListDtoTechnologyCERTINIA                  PublicGetAssetListDtoTechnology = "CERTINIA"
	PublicGetAssetListDtoTechnologyCHAMELEON                 PublicGetAssetListDtoTechnology = "CHAMELEON"
	PublicGetAssetListDtoTechnologyCHANNELADVISOR            PublicGetAssetListDtoTechnology = "CHANNEL_ADVISOR"
	PublicGetAssetListDtoTechnologyCHARGEBEE                 PublicGetAssetListDtoTechnology = "CHARGEBEE"
	PublicGetAssetListDtoTechnologyCHARGEDESK                PublicGetAssetListDtoTechnology = "CHARGEDESK"
	PublicGetAssetListDtoTechnologyCHARTMOGUL                PublicGetAssetListDtoTechnology = "CHARTMOGUL"
	PublicGetAssetListDtoTechnologyCHORUSAI                  PublicGetAssetListDtoTechnology = "CHORUS_AI"
	PublicGetAssetListDtoTechnologyCHURNKEY                  PublicGetAssetListDtoTechnology = "CHURNKEY"
	PublicGetAssetListDtoTechnologyCHURNZERO                 PublicGetAssetListDtoTechnology = "CHURNZERO"
	PublicGetAssetListDtoTechnologyCIMIS                     PublicGetAssetListDtoTechnology = "CIMIS"
	PublicGetAssetListDtoTechnologyCIN7                      PublicGetAssetListDtoTechnology = "CIN7"
	PublicGetAssetListDtoTechnologyCIRCLECI                  PublicGetAssetListDtoTechnology = "CIRCLE_CI"
	PublicGetAssetListDtoTechnologyCLARI                     PublicGetAssetListDtoTechnology = "CLARI"
	PublicGetAssetListDtoTechnologyCLICKUP                   PublicGetAssetListDtoTechnology = "CLICKUP"
	PublicGetAssetListDtoTechnologyCLIFFAI                   PublicGetAssetListDtoTechnology = "CLIFF_AI"
	PublicGetAssetListDtoTechnologyCLOSE                     PublicGetAssetListDtoTechnology = "CLOSE"
	PublicGetAssetListDtoTechnologyCOLLIBRA                  PublicGetAssetListDtoTechnology = "COLLIBRA"
	PublicGetAssetListDtoTechnologyCOMMERCETOOLS             PublicGetAssetListDtoTechnology = "COMMERCETOOLS"
	PublicGetAssetListDtoTechnologyCOMPOSER                  PublicGetAssetListDtoTechnology = "COMPOSER"
	PublicGetAssetListDtoTechnologyCONFLUENTCLOUD            PublicGetAssetListDtoTechnology = "CONFLUENT_CLOUD"
	PublicGetAssetListDtoTechnologyCONTRASTSECURITY          PublicGetAssetListDtoTechnology = "CONTRAST_SECURITY"
	PublicGetAssetListDtoTechnologyCOUPA                     PublicGetAssetListDtoTechnology = "COUPA"
	PublicGetAssetListDtoTechnologyCRITEO                    PublicGetAssetListDtoTechnology = "CRITEO"
	PublicGetAssetListDtoTechnologyCROSSBEAM                 PublicGetAssetListDtoTechnology = "CROSSBEAM"
	PublicGetAssetListDtoTechnologyCRUNCHBASE                PublicGetAssetListDtoTechnology = "CRUNCHBASE"
	PublicGetAssetListDtoTechnologyCUSTOMERIO                PublicGetAssetListDtoTechnology = "CUSTOMER_IO"
	PublicGetAssetListDtoTechnologyD2LBRIGHTSPACE            PublicGetAssetListDtoTechnology = "D2L_BRIGHTSPACE"
	PublicGetAssetListDtoTechnologyDAGSTER                   PublicGetAssetListDtoTechnology = "DAGSTER"
	PublicGetAssetListDtoTechnologyDATABAND                  PublicGetAssetListDtoTechnology = "DATABAND"
	PublicGetAssetListDtoTechnologyDATABRICKS                PublicGetAssetListDtoTechnology = "DATABRICKS"
	PublicGetAssetListDtoTechnologyDATADOG                   PublicGetAssetListDtoTechnology = "DATADOG"
	PublicGetAssetListDtoTechnologyDATAEDO                   PublicGetAssetListDtoTechnology = "DATAEDO"
	PublicGetAssetListDtoTechnologyDATAFOLD                  PublicGetAssetListDtoTechnology = "DATAFOLD"
	PublicGetAssetListDtoTechnologyDATAGALAXY                PublicGetAssetListDtoTechnology = "DATAGALAXY"
	PublicGetAssetListDtoTechnologyDATAHUB                   PublicGetAssetListDtoTechnology = "DATAHUB"
	PublicGetAssetListDtoTechnologyDATAIKU                   PublicGetAssetListDtoTechnology = "DATAIKU"
	PublicGetAssetListDtoTechnologyDATAWORLD                 PublicGetAssetListDtoTechnology = "DATA_WORLD"
	PublicGetAssetListDtoTechnologyDB2                       PublicGetAssetListDtoTechnology = "DB2"
	PublicGetAssetListDtoTechnologyDBT                       PublicGetAssetListDtoTechnology = "DBT"
	PublicGetAssetListDtoTechnologyDBTCLOUD                  PublicGetAssetListDtoTechnology = "DBTCLOUD"
	PublicGetAssetListDtoTechnologyDCLLOGISTICS              PublicGetAssetListDtoTechnology = "DCL_LOGISTICS"
	PublicGetAssetListDtoTechnologyDEAR                      PublicGetAssetListDtoTechnology = "DEAR"
	PublicGetAssetListDtoTechnologyDECUBE                    PublicGetAssetListDtoTechnology = "DECUBE"
	PublicGetAssetListDtoTechnologyDELIGHTED                 PublicGetAssetListDtoTechnology = "DELIGHTED"
	PublicGetAssetListDtoTechnologyDEPUTY                    PublicGetAssetListDtoTechnology = "DEPUTY"
	PublicGetAssetListDtoTechnologyDESTINI                   PublicGetAssetListDtoTechnology = "DESTINI"
	PublicGetAssetListDtoTechnologyDIXA                      PublicGetAssetListDtoTechnology = "DIXA"
	PublicGetAssetListDtoTechnologyDOCEBO                    PublicGetAssetListDtoTechnology = "DOCEBO"
	PublicGetAssetListDtoTechnologyDRATA                     PublicGetAssetListDtoTechnology = "DRATA"
	PublicGetAssetListDtoTechnologyDRIFT                     PublicGetAssetListDtoTechnology = "DRIFT"
	PublicGetAssetListDtoTechnologyDRIP                      PublicGetAssetListDtoTechnology = "DRIP"
	PublicGetAssetListDtoTechnologyDROPBOX                   PublicGetAssetListDtoTechnology = "DROPBOX"
	PublicGetAssetListDtoTechnologyDUOPLANE                  PublicGetAssetListDtoTechnology = "DUOPLANE"
	PublicGetAssetListDtoTechnologyEASYPOST                  PublicGetAssetListDtoTechnology = "EASY_POST"
	PublicGetAssetListDtoTechnologyECONOMIC                  PublicGetAssetListDtoTechnology = "E_CONOMIC"
	PublicGetAssetListDtoTechnologyELASTICSEARCH             PublicGetAssetListDtoTechnology = "ELASTICSEARCH"
	PublicGetAssetListDtoTechnologyELEMENTARY                PublicGetAssetListDtoTechnology = "ELEMENTARY"
	PublicGetAssetListDtoTechnologyELLUCIAN                  PublicGetAssetListDtoTechnology = "ELLUCIAN"
	PublicGetAssetListDtoTechnologyELOQUA                    PublicGetAssetListDtoTechnology = "ELOQUA"
	PublicGetAssetListDtoTechnologyEMAIL                     PublicGetAssetListDtoTechnology = "EMAIL"
	PublicGetAssetListDtoTechnologyEMPLOYMENTHERO            PublicGetAssetListDtoTechnology = "EMPLOYMENT_HERO"
	PublicGetAssetListDtoTechnologyEPICORPROPHET21           PublicGetAssetListDtoTechnology = "EPICOR_PROPHET_21"
	PublicGetAssetListDtoTechnologyEVENTBRITE                PublicGetAssetListDtoTechnology = "EVENTBRITE"
	PublicGetAssetListDtoTechnologyEVERHOUR                  PublicGetAssetListDtoTechnology = "EVERHOUR"
	PublicGetAssetListDtoTechnologyEXCEL                     PublicGetAssetListDtoTechnology = "EXCEL"
	PublicGetAssetListDtoTechnologyEXPENSIFY                 PublicGetAssetListDtoTechnology = "EXPENSIFY"
	PublicGetAssetListDtoTechnologyFACEBOOK                  PublicGetAssetListDtoTechnology = "FACEBOOK"
	PublicGetAssetListDtoTechnologyFIFTEENFIVE               PublicGetAssetListDtoTechnology = "FIFTEENFIVE"
	PublicGetAssetListDtoTechnologyFIGMA                     PublicGetAssetListDtoTechnology = "FIGMA"
	PublicGetAssetListDtoTechnologyFIREBASE                  PublicGetAssetListDtoTechnology = "FIREBASE"
	PublicGetAssetListDtoTechnologyFIREBOLT                  PublicGetAssetListDtoTechnology = "FIREBOLT"
	PublicGetAssetListDtoTechnologyFIVETRAN                  PublicGetAssetListDtoTechnology = "FIVETRAN"
	PublicGetAssetListDtoTechnologyFLEXPORT                  PublicGetAssetListDtoTechnology = "FLEXPORT"
	PublicGetAssetListDtoTechnologyFORJ                      PublicGetAssetListDtoTechnology = "FORJ"
	PublicGetAssetListDtoTechnologyFOUNTAIN                  PublicGetAssetListDtoTechnology = "FOUNTAIN"
	PublicGetAssetListDtoTechnologyFREIGHTVIEW               PublicGetAssetListDtoTechnology = "FREIGHTVIEW"
	PublicGetAssetListDtoTechnologyFRESHBOOKS                PublicGetAssetListDtoTechnology = "FRESHBOOKS"
	PublicGetAssetListDtoTechnologyFRESHCHAT                 PublicGetAssetListDtoTechnology = "FRESHCHAT"
	PublicGetAssetListDtoTechnologyFRESHDESK                 PublicGetAssetListDtoTechnology = "FRESHDESK"
	PublicGetAssetListDtoTechnologyFRESHDESKCONTACTCENTER    PublicGetAssetListDtoTechnology = "FRESHDESK_CONTACT_CENTER"
	PublicGetAssetListDtoTechnologyFRESHSERVICE              PublicGetAssetListDtoTechnology = "FRESHSERVICE"
	PublicGetAssetListDtoTechnologyFRESHSUCCESS              PublicGetAssetListDtoTechnology = "FRESHSUCCESS"
	PublicGetAssetListDtoTechnologyFRESHTEAM                 PublicGetAssetListDtoTechnology = "FRESHTEAM"
	PublicGetAssetListDtoTechnologyFRIENDBUY                 PublicGetAssetListDtoTechnology = "FRIENDBUY"
	PublicGetAssetListDtoTechnologyFRONT                     PublicGetAssetListDtoTechnology = "FRONT"
	PublicGetAssetListDtoTechnologyFTP                       PublicGetAssetListDtoTechnology = "FTP"
	PublicGetAssetListDtoTechnologyFULLSTORY                 PublicGetAssetListDtoTechnology = "FULLSTORY"
	PublicGetAssetListDtoTechnologyG2                        PublicGetAssetListDtoTechnology = "G2"
	PublicGetAssetListDtoTechnologyGAINSIGHT                 PublicGetAssetListDtoTechnology = "GAINSIGHT"
	PublicGetAssetListDtoTechnologyGEM                       PublicGetAssetListDtoTechnology = "GEM"
	PublicGetAssetListDtoTechnologyGIT                       PublicGetAssetListDtoTechnology = "GIT"
	PublicGetAssetListDtoTechnologyGITHUB                    PublicGetAssetListDtoTechnology = "GITHUB"
	PublicGetAssetListDtoTechnologyGITLAB                    PublicGetAssetListDtoTechnology = "GITLAB"
	PublicGetAssetListDtoTechnologyGLADLY                    PublicGetAssetListDtoTechnology = "GLADLY"
	PublicGetAssetListDtoTechnologyGOCARDLESS                PublicGetAssetListDtoTechnology = "GOCARDLESS"
	PublicGetAssetListDtoTechnologyGONG                      PublicGetAssetListDtoTechnology = "GONG"
	PublicGetAssetListDtoTechnologyGOOGLE                    PublicGetAssetListDtoTechnology = "GOOGLE"
	PublicGetAssetListDtoTechnologyGOOGLEADMANAGER           PublicGetAssetListDtoTechnology = "GOOGLE_AD_MANAGER"
	PublicGetAssetListDtoTechnologyGOOGLEADS                 PublicGetAssetListDtoTechnology = "GOOGLE_ADS"
	PublicGetAssetListDtoTechnologyGOOGLEANALYTICS           PublicGetAssetListDtoTechnology = "GOOGLE_ANALYTICS"
	PublicGetAssetListDtoTechnologyGOOGLECALENDAR            PublicGetAssetListDtoTechnology = "GOOGLE_CALENDAR"
	PublicGetAssetListDtoTechnologyGOOGLECAMPAIGNMANAGER     PublicGetAssetListDtoTechnology = "GOOGLE_CAMPAIGN_MANAGER"
	PublicGetAssetListDtoTechnologyGOOGLECHROME              PublicGetAssetListDtoTechnology = "GOOGLE_CHROME"
	PublicGetAssetListDtoTechnologyGOOGLECLOUD               PublicGetAssetListDtoTechnology = "GOOGLE_CLOUD"
	PublicGetAssetListDtoTechnologyGOOGLECLOUDSTORAGE        PublicGetAssetListDtoTechnology = "GOOGLE_CLOUD_STORAGE"
	PublicGetAssetListDtoTechnologyGOOGLEDISPLAY             PublicGetAssetListDtoTechnology = "GOOGLE_DISPLAY"
	PublicGetAssetListDtoTechnologyGOOGLEDRIVE               PublicGetAssetListDtoTechnology = "GOOGLE_DRIVE"
	PublicGetAssetListDtoTechnologyGOOGLEPLAY                PublicGetAssetListDtoTechnology = "GOOGLE_PLAY"
	PublicGetAssetListDtoTechnologyGOOGLESEARCHADS360        PublicGetAssetListDtoTechnology = "GOOGLE_SEARCH_ADS_360"
	PublicGetAssetListDtoTechnologyGOOGLESEARCHCONSOLE       PublicGetAssetListDtoTechnology = "GOOGLE_SEARCH_CONSOLE"
	PublicGetAssetListDtoTechnologyGOOGLESHEETS              PublicGetAssetListDtoTechnology = "GOOGLE_SHEETS"
	PublicGetAssetListDtoTechnologyGOOGLETASKS               PublicGetAssetListDtoTechnology = "GOOGLE_TASKS"
	PublicGetAssetListDtoTechnologyGORGIAS                   PublicGetAssetListDtoTechnology = "GORGIAS"
	PublicGetAssetListDtoTechnologyGREENHOUSE                PublicGetAssetListDtoTechnology = "GREENHOUSE"
	PublicGetAssetListDtoTechnologyGREENPLUM                 PublicGetAssetListDtoTechnology = "GREENPLUM"
	PublicGetAssetListDtoTechnologyGREENPOWERMONITOR         PublicGetAssetListDtoTechnology = "GREEN_POWER_MONITOR"
	PublicGetAssetListDtoTechnologyGREPSR                    PublicGetAssetListDtoTechnology = "GREPSR"
	PublicGetAssetListDtoTechnologyGRIN                      PublicGetAssetListDtoTechnology = "GRIN"
	PublicGetAssetListDtoTechnologyGURU                      PublicGetAssetListDtoTechnology = "GURU"
	PublicGetAssetListDtoTechnologyH2                        PublicGetAssetListDtoTechnology = "H2"
	PublicGetAssetListDtoTechnologyHARVEST                   PublicGetAssetListDtoTechnology = "HARVEST"
	PublicGetAssetListDtoTechnologyHDFS                      PublicGetAssetListDtoTechnology = "HDFS"
	PublicGetAssetListDtoTechnologyHEAP                      PublicGetAssetListDtoTechnology = "HEAP"
	PublicGetAssetListDtoTechnologyHEIGHT                    PublicGetAssetListDtoTechnology = "HEIGHT"
	PublicGetAssetListDtoTechnologyHELPSCOUT                 PublicGetAssetListDtoTechnology = "HELP_SCOUT"
	PublicGetAssetListDtoTechnologyHELPSHIFT                 PublicGetAssetListDtoTechnology = "HELPSHIFT"
	PublicGetAssetListDtoTechnologyHEROKUKAFKA               PublicGetAssetListDtoTechnology = "HEROKU_KAFKA"
	PublicGetAssetListDtoTechnologyHEX                       PublicGetAssetListDtoTechnology = "HEX"
	PublicGetAssetListDtoTechnologyHIBOB                     PublicGetAssetListDtoTechnology = "HIBOB"
	PublicGetAssetListDtoTechnologyHIGHTOUCH                 PublicGetAssetListDtoTechnology = "HIGH_TOUCH"
	PublicGetAssetListDtoTechnologyHOPIN                     PublicGetAssetListDtoTechnology = "HOPIN"
	PublicGetAssetListDtoTechnologyHUBSPOT                   PublicGetAssetListDtoTechnology = "HUBSPOT"
	PublicGetAssetListDtoTechnologyIMPACT                    PublicGetAssetListDtoTechnology = "IMPACT"
	PublicGetAssetListDtoTechnologyINCIDENTIO                PublicGetAssetListDtoTechnology = "INCIDENT_IO"
	PublicGetAssetListDtoTechnologyINFOBIP                   PublicGetAssetListDtoTechnology = "INFOBIP"
	PublicGetAssetListDtoTechnologyINFORMATICA               PublicGetAssetListDtoTechnology = "INFORMATICA"
	PublicGetAssetListDtoTechnologyINSIGHTLY                 PublicGetAssetListDtoTechnology = "INSIGHTLY"
	PublicGetAssetListDtoTechnologyINSTAGRAM                 PublicGetAssetListDtoTechnology = "INSTAGRAM"
	PublicGetAssetListDtoTechnologyINTERCOM                  PublicGetAssetListDtoTechnology = "INTERCOM"
	PublicGetAssetListDtoTechnologyINVESTOPEDIA              PublicGetAssetListDtoTechnology = "INVESTOPEDIA"
	PublicGetAssetListDtoTechnologyIRONCLAD                  PublicGetAssetListDtoTechnology = "IRONCLAD"
	PublicGetAssetListDtoTechnologyIRONSOURCE                PublicGetAssetListDtoTechnology = "IRONSOURCE"
	PublicGetAssetListDtoTechnologyITERABLE                  PublicGetAssetListDtoTechnology = "ITERABLE"
	PublicGetAssetListDtoTechnologyJAVA                      PublicGetAssetListDtoTechnology = "JAVA"
	PublicGetAssetListDtoTechnologyJENKINS                   PublicGetAssetListDtoTechnology = "JENKINS"
	PublicGetAssetListDtoTechnologyJUSTCALL                  PublicGetAssetListDtoTechnology = "JUSTCALL"
	PublicGetAssetListDtoTechnologyKANDJI                    PublicGetAssetListDtoTechnology = "KANDJI"
	PublicGetAssetListDtoTechnologyKENSU                     PublicGetAssetListDtoTechnology = "KENSU"
	PublicGetAssetListDtoTechnologyKHOROSCARE                PublicGetAssetListDtoTechnology = "KHOROS_CARE"
	PublicGetAssetListDtoTechnologyKISSMETRICS               PublicGetAssetListDtoTechnology = "KISSMETRICS"
	PublicGetAssetListDtoTechnologyKLAVIYO                   PublicGetAssetListDtoTechnology = "KLAVIYO"
	PublicGetAssetListDtoTechnologyKNOWBE4                   PublicGetAssetListDtoTechnology = "KNOWBE4"
	PublicGetAssetListDtoTechnologyKONNECTINSIGHTS           PublicGetAssetListDtoTechnology = "KONNECT_INSIGHTS"
	PublicGetAssetListDtoTechnologyKUSTOMER                  PublicGetAssetListDtoTechnology = "KUSTOMER"
	PublicGetAssetListDtoTechnologyLARIATDATA                PublicGetAssetListDtoTechnology = "LARIAT_DATA"
	PublicGetAssetListDtoTechnologyLATTICE                   PublicGetAssetListDtoTechnology = "LATTICE"
	PublicGetAssetListDtoTechnologyLAUNCHDARKLY              PublicGetAssetListDtoTechnology = "LAUNCH_DARKLY"
	PublicGetAssetListDtoTechnologyLEARNUPON                 PublicGetAssetListDtoTechnology = "LEARN_UPON"
	PublicGetAssetListDtoTechnologyLESSONLY                  PublicGetAssetListDtoTechnology = "LESSONLY"
	PublicGetAssetListDtoTechnologyLEVER                     PublicGetAssetListDtoTechnology = "LEVER"
	PublicGetAssetListDtoTechnologyLIFTOFF                   PublicGetAssetListDtoTechnology = "LIFTOFF"
	PublicGetAssetListDtoTechnologyLIGHTDASH                 PublicGetAssetListDtoTechnology = "LIGHTDASH"
	PublicGetAssetListDtoTechnologyLIGHTSPEED                PublicGetAssetListDtoTechnology = "LIGHTSPEED"
	PublicGetAssetListDtoTechnologyLIGHTSUP                  PublicGetAssetListDtoTechnology = "LIGHTSUP"
	PublicGetAssetListDtoTechnologyLINEAR                    PublicGetAssetListDtoTechnology = "LINEAR"
	PublicGetAssetListDtoTechnologyLINKEDIN                  PublicGetAssetListDtoTechnology = "LINKEDIN"
	PublicGetAssetListDtoTechnologyLIVECHAT                  PublicGetAssetListDtoTechnology = "LIVECHAT"
	PublicGetAssetListDtoTechnologyLOADEDCOMMERCE            PublicGetAssetListDtoTechnology = "LOADED_COMMERCE"
	PublicGetAssetListDtoTechnologyLOB                       PublicGetAssetListDtoTechnology = "LOB"
	PublicGetAssetListDtoTechnologyLOOKER                    PublicGetAssetListDtoTechnology = "LOOKER"
	PublicGetAssetListDtoTechnologyLOOP                      PublicGetAssetListDtoTechnology = "LOOP"
	PublicGetAssetListDtoTechnologyLOOPIO                    PublicGetAssetListDtoTechnology = "LOOPIO"
	PublicGetAssetListDtoTechnologyLUMA                      PublicGetAssetListDtoTechnology = "LUMA"
	PublicGetAssetListDtoTechnologyMAGENTO                   PublicGetAssetListDtoTechnology = "MAGENTO"
	PublicGetAssetListDtoTechnologyMAILCHIMP                 PublicGetAssetListDtoTechnology = "MAILCHIMP"
	PublicGetAssetListDtoTechnologyMAILGUN                   PublicGetAssetListDtoTechnology = "MAILGUN"
	PublicGetAssetListDtoTechnologyMANDRILL                  PublicGetAssetListDtoTechnology = "MANDRILL"
	PublicGetAssetListDtoTechnologyMANTA                     PublicGetAssetListDtoTechnology = "MANTA"
	PublicGetAssetListDtoTechnologyMARIADB                   PublicGetAssetListDtoTechnology = "MARIADB"
	PublicGetAssetListDtoTechnologyMARINSOFTWARE             PublicGetAssetListDtoTechnology = "MARIN_SOFTWARE"
	PublicGetAssetListDtoTechnologyMARKETO                   PublicGetAssetListDtoTechnology = "MARKETO"
	PublicGetAssetListDtoTechnologyMATTERMOST                PublicGetAssetListDtoTechnology = "MATTERMOST"
	PublicGetAssetListDtoTechnologyMAVENLINK                 PublicGetAssetListDtoTechnology = "MAVENLINK"
	PublicGetAssetListDtoTechnologyMAXIO                     PublicGetAssetListDtoTechnology = "MAXIO"
	PublicGetAssetListDtoTechnologyMEDALLIA                  PublicGetAssetListDtoTechnology = "MEDALLIA"
	PublicGetAssetListDtoTechnologyMETA                      PublicGetAssetListDtoTechnology = "META"
	PublicGetAssetListDtoTechnologyMETABASE                  PublicGetAssetListDtoTechnology = "METABASE"
	PublicGetAssetListDtoTechnologyMETAPHOR                  PublicGetAssetListDtoTechnology = "METAPHOR"
	PublicGetAssetListDtoTechnologyMETAPLANE                 PublicGetAssetListDtoTechnology = "METAPLANE"
	PublicGetAssetListDtoTechnologyMICROSOFT                 PublicGetAssetListDtoTechnology = "MICROSOFT"
	PublicGetAssetListDtoTechnologyMICROSOFTAZUREBLOBSTORAGE PublicGetAssetListDtoTechnology = "MICROSOFT_AZURE_BLOB_STORAGE"
	PublicGetAssetListDtoTechnologyMICROSOFTAZUREML          PublicGetAssetListDtoTechnology = "MICROSOFT_AZURE_ML"
	PublicGetAssetListDtoTechnologyMICROSOFTDYNAMICS         PublicGetAssetListDtoTechnology = "MICROSOFT_DYNAMICS"
	PublicGetAssetListDtoTechnologyMICROSOFTONEDRIVE         PublicGetAssetListDtoTechnology = "MICROSOFT_ONEDRIVE"
	PublicGetAssetListDtoTechnologyMICROSOFTPURVIEW          PublicGetAssetListDtoTechnology = "MICROSOFT_PURVIEW"
	PublicGetAssetListDtoTechnologyMICROSOFTTEAMS            PublicGetAssetListDtoTechnology = "MICROSOFT_TEAMS"
	PublicGetAssetListDtoTechnologyMICROSTRATEGY             PublicGetAssetListDtoTechnology = "MICROSTRATEGY"
	PublicGetAssetListDtoTechnologyMIXMAX                    PublicGetAssetListDtoTechnology = "MIXMAX"
	PublicGetAssetListDtoTechnologyMIXPANEL                  PublicGetAssetListDtoTechnology = "MIXPANEL"
	PublicGetAssetListDtoTechnologyMONDAYCOM                 PublicGetAssetListDtoTechnology = "MONDAY_COM"
	PublicGetAssetListDtoTechnologyMONGODB                   PublicGetAssetListDtoTechnology = "MONGODB"
	PublicGetAssetListDtoTechnologyMONTECARLO                PublicGetAssetListDtoTechnology = "MONTE_CARLO"
	PublicGetAssetListDtoTechnologyMOUNTAIN                  PublicGetAssetListDtoTechnology = "MOUNTAIN"
	PublicGetAssetListDtoTechnologyMSSQL                     PublicGetAssetListDtoTechnology = "MSSQL"
	PublicGetAssetListDtoTechnologyMULESOFT                  PublicGetAssetListDtoTechnology = "MULESOFT"
	PublicGetAssetListDtoTechnologyMUX                       PublicGetAssetListDtoTechnology = "MUX"
	PublicGetAssetListDtoTechnologyMWAA                      PublicGetAssetListDtoTechnology = "MWAA"
	PublicGetAssetListDtoTechnologyMYSQL                     PublicGetAssetListDtoTechnology = "MYSQL"
	PublicGetAssetListDtoTechnologyNAMELY                    PublicGetAssetListDtoTechnology = "NAMELY"
	PublicGetAssetListDtoTechnologyNCINO                     PublicGetAssetListDtoTechnology = "NCINO"
	PublicGetAssetListDtoTechnologyNETSUITEANALYTICS         PublicGetAssetListDtoTechnology = "NETSUITE_ANALYTICS"
	PublicGetAssetListDtoTechnologyNEWRELIC                  PublicGetAssetListDtoTechnology = "NEW_RELIC"
	PublicGetAssetListDtoTechnologyNOTION                    PublicGetAssetListDtoTechnology = "NOTION"
	PublicGetAssetListDtoTechnologyNYLAS                     PublicGetAssetListDtoTechnology = "NYLAS"
	PublicGetAssetListDtoTechnologyOBSERVE                   PublicGetAssetListDtoTechnology = "OBSERVE"
	PublicGetAssetListDtoTechnologyOCTOPAI                   PublicGetAssetListDtoTechnology = "OCTOPAI"
	PublicGetAssetListDtoTechnologyOKTA                      PublicGetAssetListDtoTechnology = "OKTA"
	PublicGetAssetListDtoTechnologyOPENAI                    PublicGetAssetListDtoTechnology = "OPEN_AI"
	PublicGetAssetListDtoTechnologyOPENDATADC                PublicGetAssetListDtoTechnology = "OPEN_DATA_DC"
	PublicGetAssetListDtoTechnologyOPENEXCHANGESRATES        PublicGetAssetListDtoTechnology = "OPEN_EXCHANGES_RATES"
	PublicGetAssetListDtoTechnologyOPENSEARCH                PublicGetAssetListDtoTechnology = "OPEN_SEARCH"
	PublicGetAssetListDtoTechnologyOPTIMIZELY                PublicGetAssetListDtoTechnology = "OPTIMIZELY"
	PublicGetAssetListDtoTechnologyORACLE                    PublicGetAssetListDtoTechnology = "ORACLE"
	PublicGetAssetListDtoTechnologyORBITCOMMUNITYPLATFORM    PublicGetAssetListDtoTechnology = "ORBIT_COMMUNITY_PLATFORM"
	PublicGetAssetListDtoTechnologyORDWAY                    PublicGetAssetListDtoTechnology = "ORDWAY"
	PublicGetAssetListDtoTechnologyORTTO                     PublicGetAssetListDtoTechnology = "ORTTO"
	PublicGetAssetListDtoTechnologyOSCOMMERCE                PublicGetAssetListDtoTechnology = "OS_COMMERCE"
	PublicGetAssetListDtoTechnologyOUTBRAIN                  PublicGetAssetListDtoTechnology = "OUTBRAIN"
	PublicGetAssetListDtoTechnologyOUTREACH                  PublicGetAssetListDtoTechnology = "OUTREACH"
	PublicGetAssetListDtoTechnologyOVALEDGE                  PublicGetAssetListDtoTechnology = "OVALEDGE"
	PublicGetAssetListDtoTechnologyPAGERDUTY                 PublicGetAssetListDtoTechnology = "PAGERDUTY"
	PublicGetAssetListDtoTechnologyPAGERSHIFT                PublicGetAssetListDtoTechnology = "PAGERSHIFT"
	PublicGetAssetListDtoTechnologyPAYPAL                    PublicGetAssetListDtoTechnology = "PAYPAL"
	PublicGetAssetListDtoTechnologyPENDO                     PublicGetAssetListDtoTechnology = "PENDO"
	PublicGetAssetListDtoTechnologyPINGDOM                   PublicGetAssetListDtoTechnology = "PINGDOM"
	PublicGetAssetListDtoTechnologyPINTEREST                 PublicGetAssetListDtoTechnology = "PINTEREST"
	PublicGetAssetListDtoTechnologyPIPE17                    PublicGetAssetListDtoTechnology = "PIPE17"
	PublicGetAssetListDtoTechnologyPIPEDRIVE                 PublicGetAssetListDtoTechnology = "PIPEDRIVE"
	PublicGetAssetListDtoTechnologyPIVOTALTRACKER            PublicGetAssetListDtoTechnology = "PIVOTAL_TRACKER"
	PublicGetAssetListDtoTechnologyPLAYVOX                   PublicGetAssetListDtoTechnology = "PLAYVOX"
	PublicGetAssetListDtoTechnologyPOSTGRES                  PublicGetAssetListDtoTechnology = "POSTGRES"
	PublicGetAssetListDtoTechnologyPOSTHOG                   PublicGetAssetListDtoTechnology = "POSTHOG"
	PublicGetAssetListDtoTechnologyPOWERBI                   PublicGetAssetListDtoTechnology = "POWER_BI"
	PublicGetAssetListDtoTechnologyPOWERSCHOOL               PublicGetAssetListDtoTechnology = "POWERSCHOOL"
	PublicGetAssetListDtoTechnologyPREFECT                   PublicGetAssetListDtoTechnology = "PREFECT"
	PublicGetAssetListDtoTechnologyPRESTASHOP                PublicGetAssetListDtoTechnology = "PRESTASHOP"
	PublicGetAssetListDtoTechnologyPRESTO                    PublicGetAssetListDtoTechnology = "PRESTO"
	PublicGetAssetListDtoTechnologyPRODUCTBOARD              PublicGetAssetListDtoTechnology = "PRODUCTBOARD"
	PublicGetAssetListDtoTechnologyPYTHON                    PublicGetAssetListDtoTechnology = "PYTHON"
	PublicGetAssetListDtoTechnologyQLIK                      PublicGetAssetListDtoTechnology = "QLIK"
	PublicGetAssetListDtoTechnologyQUALAROO                  PublicGetAssetListDtoTechnology = "QUALAROO"
	PublicGetAssetListDtoTechnologyQUALTRICS                 PublicGetAssetListDtoTechnology = "QUALTRICS"
	PublicGetAssetListDtoTechnologyQUICKBOOKS                PublicGetAssetListDtoTechnology = "QUICKBOOKS"
	PublicGetAssetListDtoTechnologyQUICKSIGHT                PublicGetAssetListDtoTechnology = "QUICKSIGHT"
	PublicGetAssetListDtoTechnologyRAMP                      PublicGetAssetListDtoTechnology = "RAMP"
	PublicGetAssetListDtoTechnologyRARIBLE                   PublicGetAssetListDtoTechnology = "RARIBLE"
	PublicGetAssetListDtoTechnologyRECHARGE                  PublicGetAssetListDtoTechnology = "RECHARGE"
	PublicGetAssetListDtoTechnologyRECURLY                   PublicGetAssetListDtoTechnology = "RECURLY"
	PublicGetAssetListDtoTechnologyREDDIT                    PublicGetAssetListDtoTechnology = "REDDIT"
	PublicGetAssetListDtoTechnologyREDSHIFT                  PublicGetAssetListDtoTechnology = "REDSHIFT"
	PublicGetAssetListDtoTechnologyRELTIO                    PublicGetAssetListDtoTechnology = "RELTIO"
	PublicGetAssetListDtoTechnologyREPLYIO                   PublicGetAssetListDtoTechnology = "REPLY_IO"
	PublicGetAssetListDtoTechnologyRETAILNEXT                PublicGetAssetListDtoTechnology = "RETAILNEXT"
	PublicGetAssetListDtoTechnologyRETENTLY                  PublicGetAssetListDtoTechnology = "RETENTLY"
	PublicGetAssetListDtoTechnologyREVELSYSTEMS              PublicGetAssetListDtoTechnology = "REVEL_SYSTEMS"
	PublicGetAssetListDtoTechnologyRINGCENTRAL               PublicGetAssetListDtoTechnology = "RINGCENTRAL"
	PublicGetAssetListDtoTechnologyRIPPLING                  PublicGetAssetListDtoTechnology = "RIPPLING"
	PublicGetAssetListDtoTechnologyROLLBAR                   PublicGetAssetListDtoTechnology = "ROLLBAR"
	PublicGetAssetListDtoTechnologyROOTLY                    PublicGetAssetListDtoTechnology = "ROOTLY"
	PublicGetAssetListDtoTechnologyS3                        PublicGetAssetListDtoTechnology = "S3"
	PublicGetAssetListDtoTechnologySAGEHR                    PublicGetAssetListDtoTechnology = "SAGE_HR"
	PublicGetAssetListDtoTechnologySAGEINTACCT               PublicGetAssetListDtoTechnology = "SAGE_INTACCT"
	PublicGetAssetListDtoTechnologySAILTHRU                  PublicGetAssetListDtoTechnology = "SAILTHRU"
	PublicGetAssetListDtoTechnologySALESFORCE                PublicGetAssetListDtoTechnology = "SALESFORCE"
	PublicGetAssetListDtoTechnologySALESLOFT                 PublicGetAssetListDtoTechnology = "SALESLOFT"
	PublicGetAssetListDtoTechnologySALSIFY                   PublicGetAssetListDtoTechnology = "SALSIFY"
	PublicGetAssetListDtoTechnologySAMSARA                   PublicGetAssetListDtoTechnology = "SAMSARA"
	PublicGetAssetListDtoTechnologySAP                       PublicGetAssetListDtoTechnology = "SAP"
	PublicGetAssetListDtoTechnologySAPCONCUR                 PublicGetAssetListDtoTechnology = "SAP_CONCUR"
	PublicGetAssetListDtoTechnologySCORM                     PublicGetAssetListDtoTechnology = "SCORM"
	PublicGetAssetListDtoTechnologySECODA                    PublicGetAssetListDtoTechnology = "SECODA"
	PublicGetAssetListDtoTechnologySECURITYJOURNEY           PublicGetAssetListDtoTechnology = "SECURITY_JOURNEY"
	PublicGetAssetListDtoTechnologySEGMENT                   PublicGetAssetListDtoTechnology = "SEGMENT"
	PublicGetAssetListDtoTechnologySELECTSTAR                PublicGetAssetListDtoTechnology = "SELECT_STAR"
	PublicGetAssetListDtoTechnologySENDGRID                  PublicGetAssetListDtoTechnology = "SENDGRID"
	PublicGetAssetListDtoTechnologySERVICENOW                PublicGetAssetListDtoTechnology = "SERVICE_NOW"
	PublicGetAssetListDtoTechnologySFTP                      PublicGetAssetListDtoTechnology = "SFTP"
	PublicGetAssetListDtoTechnologySHAREPOINT                PublicGetAssetListDtoTechnology = "SHAREPOINT"
	PublicGetAssetListDtoTechnologySHARETRIBE                PublicGetAssetListDtoTechnology = "SHARETRIBE"
	PublicGetAssetListDtoTechnologySHIPHERO                  PublicGetAssetListDtoTechnology = "SHIPHERO"
	PublicGetAssetListDtoTechnologySHIPSTATION               PublicGetAssetListDtoTechnology = "SHIPSTATION"
	PublicGetAssetListDtoTechnologySHOPIFY                   PublicGetAssetListDtoTechnology = "SHOPIFY"
	PublicGetAssetListDtoTechnologySHOPWARE                  PublicGetAssetListDtoTechnology = "SHOPWARE"
	PublicGetAssetListDtoTechnologySHORTIO                   PublicGetAssetListDtoTechnology = "SHORT_IO"
	PublicGetAssetListDtoTechnologySIFFLET                   PublicGetAssetListDtoTechnology = "SIFFLET"
	PublicGetAssetListDtoTechnologySIGMA                     PublicGetAssetListDtoTechnology = "SIGMA"
	PublicGetAssetListDtoTechnologySIMPLECAST                PublicGetAssetListDtoTechnology = "SIMPLECAST"
	PublicGetAssetListDtoTechnologySIMPLESAT                 PublicGetAssetListDtoTechnology = "SIMPLESAT"
	PublicGetAssetListDtoTechnologySINGLESTORE               PublicGetAssetListDtoTechnology = "SINGLESTORE"
	PublicGetAssetListDtoTechnologySISENSE                   PublicGetAssetListDtoTechnology = "SISENSE"
	PublicGetAssetListDtoTechnologySIXSENSE                  PublicGetAssetListDtoTechnology = "SIXSENSE"
	PublicGetAssetListDtoTechnologySKILLJAR                  PublicGetAssetListDtoTechnology = "SKILLJAR"
	PublicGetAssetListDtoTechnologySKUVAULT                  PublicGetAssetListDtoTechnology = "SKUVAULT"
	PublicGetAssetListDtoTechnologySLAB                      PublicGetAssetListDtoTechnology = "SLAB"
	PublicGetAssetListDtoTechnologySLACK                     PublicGetAssetListDtoTechnology = "SLACK"
	PublicGetAssetListDtoTechnologySMADEX                    PublicGetAssetListDtoTechnology = "SMADEX"
	PublicGetAssetListDtoTechnologySNAPCHAT                  PublicGetAssetListDtoTechnology = "SNAPCHAT"
	PublicGetAssetListDtoTechnologySNOWFLAKE                 PublicGetAssetListDtoTechnology = "SNOWFLAKE"
	PublicGetAssetListDtoTechnologySNOWPLOW                  PublicGetAssetListDtoTechnology = "SNOWPLOW"
	PublicGetAssetListDtoTechnologySODA                      PublicGetAssetListDtoTechnology = "SODA"
	PublicGetAssetListDtoTechnologySONARQUBE                 PublicGetAssetListDtoTechnology = "SONARQUBE"
	PublicGetAssetListDtoTechnologySPLITIO                   PublicGetAssetListDtoTechnology = "SPLIT_IO"
	PublicGetAssetListDtoTechnologySPLUNK                    PublicGetAssetListDtoTechnology = "SPLUNK"
	PublicGetAssetListDtoTechnologySPOTIFY                   PublicGetAssetListDtoTechnology = "SPOTIFY"
	PublicGetAssetListDtoTechnologySPREECOMMERCE             PublicGetAssetListDtoTechnology = "SPREE_COMMERCE"
	PublicGetAssetListDtoTechnologySPROUTSOCIAL              PublicGetAssetListDtoTechnology = "SPROUT_SOCIAL"
	PublicGetAssetListDtoTechnologySQUARE                    PublicGetAssetListDtoTechnology = "SQUARE"
	PublicGetAssetListDtoTechnologySQUARESPACE               PublicGetAssetListDtoTechnology = "SQUARESPACE"
	PublicGetAssetListDtoTechnologySTACKADAPT                PublicGetAssetListDtoTechnology = "STACK_ADAPT"
	PublicGetAssetListDtoTechnologySTATSIG                   PublicGetAssetListDtoTechnology = "STATSIG"
	PublicGetAssetListDtoTechnologySTITCH                    PublicGetAssetListDtoTechnology = "STITCH"
	PublicGetAssetListDtoTechnologySTRIPE                    PublicGetAssetListDtoTechnology = "STRIPE"
	PublicGetAssetListDtoTechnologySTYLIGHT                  PublicGetAssetListDtoTechnology = "STYLIGHT"
	PublicGetAssetListDtoTechnologySUBSCRIPT                 PublicGetAssetListDtoTechnology = "SUBSCRIPT"
	PublicGetAssetListDtoTechnologySYNAPSE                   PublicGetAssetListDtoTechnology = "SYNAPSE"
	PublicGetAssetListDtoTechnologyTABLEAU                   PublicGetAssetListDtoTechnology = "TABLEAU"
	PublicGetAssetListDtoTechnologyTABOOLA                   PublicGetAssetListDtoTechnology = "TABOOLA"
	PublicGetAssetListDtoTechnologyTALEND                    PublicGetAssetListDtoTechnology = "TALEND"
	PublicGetAssetListDtoTechnologyTALKDESK                  PublicGetAssetListDtoTechnology = "TALKDESK"
	PublicGetAssetListDtoTechnologyTALKWALKER                PublicGetAssetListDtoTechnology = "TALKWALKER"
	PublicGetAssetListDtoTechnologyTEAMWORKCOM               PublicGetAssetListDtoTechnology = "TEAMWORK_COM"
	PublicGetAssetListDtoTechnologyTEMPOIO                   PublicGetAssetListDtoTechnology = "TEMPO_IO"
	PublicGetAssetListDtoTechnologyTERADATA                  PublicGetAssetListDtoTechnology = "TERADATA"
	PublicGetAssetListDtoTechnologyTERRAFORM                 PublicGetAssetListDtoTechnology = "TERRAFORM"
	PublicGetAssetListDtoTechnologyTHETRADEDESK              PublicGetAssetListDtoTechnology = "THE_TRADE_DESK"
	PublicGetAssetListDtoTechnologyTHOUGHTSPOT               PublicGetAssetListDtoTechnology = "THOUGHT_SPOT"
	PublicGetAssetListDtoTechnologyTHREESIXTYLEARNING        PublicGetAssetListDtoTechnology = "THREESIXTYLEARNING"
	PublicGetAssetListDtoTechnologyTIKTOK                    PublicGetAssetListDtoTechnology = "TIKTOK"
	PublicGetAssetListDtoTechnologyTOGGL                     PublicGetAssetListDtoTechnology = "TOGGL"
	PublicGetAssetListDtoTechnologyTRANSCEND                 PublicGetAssetListDtoTechnology = "TRANSCEND"
	PublicGetAssetListDtoTechnologyTRELLO                    PublicGetAssetListDtoTechnology = "TRELLO"
	PublicGetAssetListDtoTechnologyTRINET                    PublicGetAssetListDtoTechnology = "TRINET"
	PublicGetAssetListDtoTechnologyTRISOLUTE                 PublicGetAssetListDtoTechnology = "TRISOLUTE"
	PublicGetAssetListDtoTechnologyTWILIO                    PublicGetAssetListDtoTechnology = "TWILIO"
	PublicGetAssetListDtoTechnologyTYPEFORM                  PublicGetAssetListDtoTechnology = "TYPEFORM"
	PublicGetAssetListDtoTechnologyUNKNOWN                   PublicGetAssetListDtoTechnology = "UNKNOWN"
	PublicGetAssetListDtoTechnologyUPLAND                    PublicGetAssetListDtoTechnology = "UPLAND"
	PublicGetAssetListDtoTechnologyUSERVOICE                 PublicGetAssetListDtoTechnology = "USERVOICE"
	PublicGetAssetListDtoTechnologyVALIDIO                   PublicGetAssetListDtoTechnology = "VALIDIO"
	PublicGetAssetListDtoTechnologyVEEVA                     PublicGetAssetListDtoTechnology = "VEEVA"
	PublicGetAssetListDtoTechnologyVERIZONMEDIA              PublicGetAssetListDtoTechnology = "VERIZON_MEDIA"
	PublicGetAssetListDtoTechnologyVITALLY                   PublicGetAssetListDtoTechnology = "VITALLY"
	PublicGetAssetListDtoTechnologyVONAGE                    PublicGetAssetListDtoTechnology = "VONAGE"
	PublicGetAssetListDtoTechnologyVUETIFY                   PublicGetAssetListDtoTechnology = "VUETIFY"
	PublicGetAssetListDtoTechnologyWEBHOOKS                  PublicGetAssetListDtoTechnology = "WEBHOOKS"
	PublicGetAssetListDtoTechnologyWEBSCRAPER                PublicGetAssetListDtoTechnology = "WEB_SCRAPER"
	PublicGetAssetListDtoTechnologyWHENIWORK                 PublicGetAssetListDtoTechnology = "WHEN_I_WORK"
	PublicGetAssetListDtoTechnologyWHEREFOUR                 PublicGetAssetListDtoTechnology = "WHEREFOUR"
	PublicGetAssetListDtoTechnologyWIKIPEDIA                 PublicGetAssetListDtoTechnology = "WIKIPEDIA"
	PublicGetAssetListDtoTechnologyWOOCOMMERCE               PublicGetAssetListDtoTechnology = "WOOCOMMERCE"
	PublicGetAssetListDtoTechnologyWORDPRESS                 PublicGetAssetListDtoTechnology = "WORDPRESS"
	PublicGetAssetListDtoTechnologyWORKABLE                  PublicGetAssetListDtoTechnology = "WORKABLE"
	PublicGetAssetListDtoTechnologyWORKDAY                   PublicGetAssetListDtoTechnology = "WORKDAY"
	PublicGetAssetListDtoTechnologyWORKFLOWMAX               PublicGetAssetListDtoTechnology = "WORKFLOW_MAX"
	PublicGetAssetListDtoTechnologyWRIKE                     PublicGetAssetListDtoTechnology = "WRIKE"
	PublicGetAssetListDtoTechnologyX                         PublicGetAssetListDtoTechnology = "X"
	PublicGetAssetListDtoTechnologyXERO                      PublicGetAssetListDtoTechnology = "XERO"
	PublicGetAssetListDtoTechnologyXRAY                      PublicGetAssetListDtoTechnology = "XRAY"
	PublicGetAssetListDtoTechnologyYAHOO                     PublicGetAssetListDtoTechnology = "YAHOO"
	PublicGetAssetListDtoTechnologyYOTPO                     PublicGetAssetListDtoTechnology = "YOTPO"
	PublicGetAssetListDtoTechnologyYOUTUBE                   PublicGetAssetListDtoTechnology = "YOUTUBE"
	PublicGetAssetListDtoTechnologyZEENEA                    PublicGetAssetListDtoTechnology = "ZEENEA"
	PublicGetAssetListDtoTechnologyZENCART                   PublicGetAssetListDtoTechnology = "ZEN_CART"
	PublicGetAssetListDtoTechnologyZENDESKCHAT               PublicGetAssetListDtoTechnology = "ZENDESK_CHAT"
	PublicGetAssetListDtoTechnologyZENDESKSELL               PublicGetAssetListDtoTechnology = "ZENDESK_SELL"
	PublicGetAssetListDtoTechnologyZENDESKSUNSHINE           PublicGetAssetListDtoTechnology = "ZENDESK_SUNSHINE"
	PublicGetAssetListDtoTechnologyZENDESKSUPPORT            PublicGetAssetListDtoTechnology = "ZENDESK_SUPPORT"
	PublicGetAssetListDtoTechnologyZINGTREE                  PublicGetAssetListDtoTechnology = "ZINGTREE"
	PublicGetAssetListDtoTechnologyZOHOBOOKS                 PublicGetAssetListDtoTechnology = "ZOHO_BOOKS"
	PublicGetAssetListDtoTechnologyZOHOCAMPAIGNS             PublicGetAssetListDtoTechnology = "ZOHO_CAMPAIGNS"
	PublicGetAssetListDtoTechnologyZOHOCRM                   PublicGetAssetListDtoTechnology = "ZOHO_CRM"
	PublicGetAssetListDtoTechnologyZOOM                      PublicGetAssetListDtoTechnology = "ZOOM"
	PublicGetAssetListDtoTechnologyZUORA                     PublicGetAssetListDtoTechnology = "ZUORA"
)

// Defines values for PublicGetAssetListDtoType.
const (
	PublicGetAssetListDtoTypeCONNECTOR        PublicGetAssetListDtoType = "CONNECTOR"
	PublicGetAssetListDtoTypeDAG              PublicGetAssetListDtoType = "DAG"
	PublicGetAssetListDtoTypeDASHBOARD        PublicGetAssetListDtoType = "DASHBOARD"
	PublicGetAssetListDtoTypeEXTERNALTABLE    PublicGetAssetListDtoType = "EXTERNAL_TABLE"
	PublicGetAssetListDtoTypeMATERIALIZEDVIEW PublicGetAssetListDtoType = "MATERIALIZED_VIEW"
	PublicGetAssetListDtoTypeMLMODEL          PublicGetAssetListDtoType = "ML_MODEL"
	PublicGetAssetListDtoTypeMODEL            PublicGetAssetListDtoType = "MODEL"
	PublicGetAssetListDtoTypeORCHESTRATOR     PublicGetAssetListDtoType = "ORCHESTRATOR"
	PublicGetAssetListDtoTypeOTHER            PublicGetAssetListDtoType = "OTHER"
	PublicGetAssetListDtoTypePIPELINE         PublicGetAssetListDtoType = "PIPELINE"
	PublicGetAssetListDtoTypeREPORT           PublicGetAssetListDtoType = "REPORT"
	PublicGetAssetListDtoTypeSNOWFLAKESTREAM  PublicGetAssetListDtoType = "SNOWFLAKE_STREAM"
	PublicGetAssetListDtoTypeTABLE            PublicGetAssetListDtoType = "TABLE"
	PublicGetAssetListDtoTypeTRANSFORMATION   PublicGetAssetListDtoType = "TRANSFORMATION"
	PublicGetAssetListDtoTypeVIEW             PublicGetAssetListDtoType = "VIEW"
)

// Defines values for PublicGetAssetListDtoUsage.
const (
	HIGH        PublicGetAssetListDtoUsage = "HIGH"
	LOW         PublicGetAssetListDtoUsage = "LOW"
	MEDIUM      PublicGetAssetListDtoUsage = "MEDIUM"
	UNSUPPORTED PublicGetAssetListDtoUsage = "UNSUPPORTED"
)

// Defines values for PublicGetLastRunDtoStatus.
const (
	PublicGetLastRunDtoStatusFAILURE                         PublicGetLastRunDtoStatus = "FAILURE"
	PublicGetLastRunDtoStatusPENDING                         PublicGetLastRunDtoStatus = "PENDING"
	PublicGetLastRunDtoStatusRUNNING                         PublicGetLastRunDtoStatus = "RUNNING"
	PublicGetLastRunDtoStatusSKIPPEDDATASOURCEALREADYRUNNING PublicGetLastRunDtoStatus = "SKIPPED_DATASOURCE_ALREADY_RUNNING"
	PublicGetLastRunDtoStatusSUCCESS                         PublicGetLastRunDtoStatus = "SUCCESS"
)

// Defines values for PublicLookerParametersDtoType.
const (
	PublicLookerParametersDtoTypeAIRFLOW           PublicLookerParametersDtoType = "AIRFLOW"
	PublicLookerParametersDtoTypeATHENA            PublicLookerParametersDtoType = "ATHENA"
	PublicLookerParametersDtoTypeBIGQUERY          PublicLookerParametersDtoType = "BIGQUERY"
	PublicLookerParametersDtoTypeDATABRICKS        PublicLookerParametersDtoType = "DATABRICKS"
	PublicLookerParametersDtoTypeDBT               PublicLookerParametersDtoType = "DBT"
	PublicLookerParametersDtoTypeDBTCLOUD          PublicLookerParametersDtoType = "DBT_CLOUD"
	PublicLookerParametersDtoTypeDECLARATIVE       PublicLookerParametersDtoType = "DECLARATIVE"
	PublicLookerParametersDtoTypeFIVETRAN          PublicLookerParametersDtoType = "FIVETRAN"
	PublicLookerParametersDtoTypeLOOKER            PublicLookerParametersDtoType = "LOOKER"
	PublicLookerParametersDtoTypeMSSQL             PublicLookerParametersDtoType = "MSSQL"
	PublicLookerParametersDtoTypeMYSQL             PublicLookerParametersDtoType = "MYSQL"
	PublicLookerParametersDtoTypeORACLE            PublicLookerParametersDtoType = "ORACLE"
	PublicLookerParametersDtoTypePOSTGRESQL        PublicLookerParametersDtoType = "POSTGRESQL"
	PublicLookerParametersDtoTypePOWERBI           PublicLookerParametersDtoType = "POWER_BI"
	PublicLookerParametersDtoTypeQUICKSIGHT        PublicLookerParametersDtoType = "QUICKSIGHT"
	PublicLookerParametersDtoTypeREDSHIFT          PublicLookerParametersDtoType = "REDSHIFT"
	PublicLookerParametersDtoTypeSNOWFLAKE         PublicLookerParametersDtoType = "SNOWFLAKE"
	PublicLookerParametersDtoTypeSYNAPSE           PublicLookerParametersDtoType = "SYNAPSE"
	PublicLookerParametersDtoTypeTABLEAU           PublicLookerParametersDtoType = "TABLEAU"
	PublicLookerParametersDtoTypeUnderscoreUNKNOWN PublicLookerParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicMssqlParametersDtoType.
const (
	PublicMssqlParametersDtoTypeAIRFLOW           PublicMssqlParametersDtoType = "AIRFLOW"
	PublicMssqlParametersDtoTypeATHENA            PublicMssqlParametersDtoType = "ATHENA"
	PublicMssqlParametersDtoTypeBIGQUERY          PublicMssqlParametersDtoType = "BIGQUERY"
	PublicMssqlParametersDtoTypeDATABRICKS        PublicMssqlParametersDtoType = "DATABRICKS"
	PublicMssqlParametersDtoTypeDBT               PublicMssqlParametersDtoType = "DBT"
	PublicMssqlParametersDtoTypeDBTCLOUD          PublicMssqlParametersDtoType = "DBT_CLOUD"
	PublicMssqlParametersDtoTypeDECLARATIVE       PublicMssqlParametersDtoType = "DECLARATIVE"
	PublicMssqlParametersDtoTypeFIVETRAN          PublicMssqlParametersDtoType = "FIVETRAN"
	PublicMssqlParametersDtoTypeLOOKER            PublicMssqlParametersDtoType = "LOOKER"
	PublicMssqlParametersDtoTypeMSSQL             PublicMssqlParametersDtoType = "MSSQL"
	PublicMssqlParametersDtoTypeMYSQL             PublicMssqlParametersDtoType = "MYSQL"
	PublicMssqlParametersDtoTypeORACLE            PublicMssqlParametersDtoType = "ORACLE"
	PublicMssqlParametersDtoTypePOSTGRESQL        PublicMssqlParametersDtoType = "POSTGRESQL"
	PublicMssqlParametersDtoTypePOWERBI           PublicMssqlParametersDtoType = "POWER_BI"
	PublicMssqlParametersDtoTypeQUICKSIGHT        PublicMssqlParametersDtoType = "QUICKSIGHT"
	PublicMssqlParametersDtoTypeREDSHIFT          PublicMssqlParametersDtoType = "REDSHIFT"
	PublicMssqlParametersDtoTypeSNOWFLAKE         PublicMssqlParametersDtoType = "SNOWFLAKE"
	PublicMssqlParametersDtoTypeSYNAPSE           PublicMssqlParametersDtoType = "SYNAPSE"
	PublicMssqlParametersDtoTypeTABLEAU           PublicMssqlParametersDtoType = "TABLEAU"
	PublicMssqlParametersDtoTypeUnderscoreUNKNOWN PublicMssqlParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicMysqlParametersDtoMysqlTlsVersion.
const (
	TLSV12 PublicMysqlParametersDtoMysqlTlsVersion = "TLS_V_1_2"
	TLSV13 PublicMysqlParametersDtoMysqlTlsVersion = "TLS_V_1_3"
)

// Defines values for PublicMysqlParametersDtoType.
const (
	PublicMysqlParametersDtoTypeAIRFLOW           PublicMysqlParametersDtoType = "AIRFLOW"
	PublicMysqlParametersDtoTypeATHENA            PublicMysqlParametersDtoType = "ATHENA"
	PublicMysqlParametersDtoTypeBIGQUERY          PublicMysqlParametersDtoType = "BIGQUERY"
	PublicMysqlParametersDtoTypeDATABRICKS        PublicMysqlParametersDtoType = "DATABRICKS"
	PublicMysqlParametersDtoTypeDBT               PublicMysqlParametersDtoType = "DBT"
	PublicMysqlParametersDtoTypeDBTCLOUD          PublicMysqlParametersDtoType = "DBT_CLOUD"
	PublicMysqlParametersDtoTypeDECLARATIVE       PublicMysqlParametersDtoType = "DECLARATIVE"
	PublicMysqlParametersDtoTypeFIVETRAN          PublicMysqlParametersDtoType = "FIVETRAN"
	PublicMysqlParametersDtoTypeLOOKER            PublicMysqlParametersDtoType = "LOOKER"
	PublicMysqlParametersDtoTypeMSSQL             PublicMysqlParametersDtoType = "MSSQL"
	PublicMysqlParametersDtoTypeMYSQL             PublicMysqlParametersDtoType = "MYSQL"
	PublicMysqlParametersDtoTypeORACLE            PublicMysqlParametersDtoType = "ORACLE"
	PublicMysqlParametersDtoTypePOSTGRESQL        PublicMysqlParametersDtoType = "POSTGRESQL"
	PublicMysqlParametersDtoTypePOWERBI           PublicMysqlParametersDtoType = "POWER_BI"
	PublicMysqlParametersDtoTypeQUICKSIGHT        PublicMysqlParametersDtoType = "QUICKSIGHT"
	PublicMysqlParametersDtoTypeREDSHIFT          PublicMysqlParametersDtoType = "REDSHIFT"
	PublicMysqlParametersDtoTypeSNOWFLAKE         PublicMysqlParametersDtoType = "SNOWFLAKE"
	PublicMysqlParametersDtoTypeSYNAPSE           PublicMysqlParametersDtoType = "SYNAPSE"
	PublicMysqlParametersDtoTypeTABLEAU           PublicMysqlParametersDtoType = "TABLEAU"
	PublicMysqlParametersDtoTypeUnderscoreUNKNOWN PublicMysqlParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicOracleParametersDtoType.
const (
	PublicOracleParametersDtoTypeAIRFLOW           PublicOracleParametersDtoType = "AIRFLOW"
	PublicOracleParametersDtoTypeATHENA            PublicOracleParametersDtoType = "ATHENA"
	PublicOracleParametersDtoTypeBIGQUERY          PublicOracleParametersDtoType = "BIGQUERY"
	PublicOracleParametersDtoTypeDATABRICKS        PublicOracleParametersDtoType = "DATABRICKS"
	PublicOracleParametersDtoTypeDBT               PublicOracleParametersDtoType = "DBT"
	PublicOracleParametersDtoTypeDBTCLOUD          PublicOracleParametersDtoType = "DBT_CLOUD"
	PublicOracleParametersDtoTypeDECLARATIVE       PublicOracleParametersDtoType = "DECLARATIVE"
	PublicOracleParametersDtoTypeFIVETRAN          PublicOracleParametersDtoType = "FIVETRAN"
	PublicOracleParametersDtoTypeLOOKER            PublicOracleParametersDtoType = "LOOKER"
	PublicOracleParametersDtoTypeMSSQL             PublicOracleParametersDtoType = "MSSQL"
	PublicOracleParametersDtoTypeMYSQL             PublicOracleParametersDtoType = "MYSQL"
	PublicOracleParametersDtoTypeORACLE            PublicOracleParametersDtoType = "ORACLE"
	PublicOracleParametersDtoTypePOSTGRESQL        PublicOracleParametersDtoType = "POSTGRESQL"
	PublicOracleParametersDtoTypePOWERBI           PublicOracleParametersDtoType = "POWER_BI"
	PublicOracleParametersDtoTypeQUICKSIGHT        PublicOracleParametersDtoType = "QUICKSIGHT"
	PublicOracleParametersDtoTypeREDSHIFT          PublicOracleParametersDtoType = "REDSHIFT"
	PublicOracleParametersDtoTypeSNOWFLAKE         PublicOracleParametersDtoType = "SNOWFLAKE"
	PublicOracleParametersDtoTypeSYNAPSE           PublicOracleParametersDtoType = "SYNAPSE"
	PublicOracleParametersDtoTypeTABLEAU           PublicOracleParametersDtoType = "TABLEAU"
	PublicOracleParametersDtoTypeUnderscoreUNKNOWN PublicOracleParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicPostgresqlParametersDtoType.
const (
	PublicPostgresqlParametersDtoTypeAIRFLOW           PublicPostgresqlParametersDtoType = "AIRFLOW"
	PublicPostgresqlParametersDtoTypeATHENA            PublicPostgresqlParametersDtoType = "ATHENA"
	PublicPostgresqlParametersDtoTypeBIGQUERY          PublicPostgresqlParametersDtoType = "BIGQUERY"
	PublicPostgresqlParametersDtoTypeDATABRICKS        PublicPostgresqlParametersDtoType = "DATABRICKS"
	PublicPostgresqlParametersDtoTypeDBT               PublicPostgresqlParametersDtoType = "DBT"
	PublicPostgresqlParametersDtoTypeDBTCLOUD          PublicPostgresqlParametersDtoType = "DBT_CLOUD"
	PublicPostgresqlParametersDtoTypeDECLARATIVE       PublicPostgresqlParametersDtoType = "DECLARATIVE"
	PublicPostgresqlParametersDtoTypeFIVETRAN          PublicPostgresqlParametersDtoType = "FIVETRAN"
	PublicPostgresqlParametersDtoTypeLOOKER            PublicPostgresqlParametersDtoType = "LOOKER"
	PublicPostgresqlParametersDtoTypeMSSQL             PublicPostgresqlParametersDtoType = "MSSQL"
	PublicPostgresqlParametersDtoTypeMYSQL             PublicPostgresqlParametersDtoType = "MYSQL"
	PublicPostgresqlParametersDtoTypeORACLE            PublicPostgresqlParametersDtoType = "ORACLE"
	PublicPostgresqlParametersDtoTypePOSTGRESQL        PublicPostgresqlParametersDtoType = "POSTGRESQL"
	PublicPostgresqlParametersDtoTypePOWERBI           PublicPostgresqlParametersDtoType = "POWER_BI"
	PublicPostgresqlParametersDtoTypeQUICKSIGHT        PublicPostgresqlParametersDtoType = "QUICKSIGHT"
	PublicPostgresqlParametersDtoTypeREDSHIFT          PublicPostgresqlParametersDtoType = "REDSHIFT"
	PublicPostgresqlParametersDtoTypeSNOWFLAKE         PublicPostgresqlParametersDtoType = "SNOWFLAKE"
	PublicPostgresqlParametersDtoTypeSYNAPSE           PublicPostgresqlParametersDtoType = "SYNAPSE"
	PublicPostgresqlParametersDtoTypeTABLEAU           PublicPostgresqlParametersDtoType = "TABLEAU"
	PublicPostgresqlParametersDtoTypeUnderscoreUNKNOWN PublicPostgresqlParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicPowerBiParametersDtoType.
const (
	PublicPowerBiParametersDtoTypeAIRFLOW           PublicPowerBiParametersDtoType = "AIRFLOW"
	PublicPowerBiParametersDtoTypeATHENA            PublicPowerBiParametersDtoType = "ATHENA"
	PublicPowerBiParametersDtoTypeBIGQUERY          PublicPowerBiParametersDtoType = "BIGQUERY"
	PublicPowerBiParametersDtoTypeDATABRICKS        PublicPowerBiParametersDtoType = "DATABRICKS"
	PublicPowerBiParametersDtoTypeDBT               PublicPowerBiParametersDtoType = "DBT"
	PublicPowerBiParametersDtoTypeDBTCLOUD          PublicPowerBiParametersDtoType = "DBT_CLOUD"
	PublicPowerBiParametersDtoTypeDECLARATIVE       PublicPowerBiParametersDtoType = "DECLARATIVE"
	PublicPowerBiParametersDtoTypeFIVETRAN          PublicPowerBiParametersDtoType = "FIVETRAN"
	PublicPowerBiParametersDtoTypeLOOKER            PublicPowerBiParametersDtoType = "LOOKER"
	PublicPowerBiParametersDtoTypeMSSQL             PublicPowerBiParametersDtoType = "MSSQL"
	PublicPowerBiParametersDtoTypeMYSQL             PublicPowerBiParametersDtoType = "MYSQL"
	PublicPowerBiParametersDtoTypeORACLE            PublicPowerBiParametersDtoType = "ORACLE"
	PublicPowerBiParametersDtoTypePOSTGRESQL        PublicPowerBiParametersDtoType = "POSTGRESQL"
	PublicPowerBiParametersDtoTypePOWERBI           PublicPowerBiParametersDtoType = "POWER_BI"
	PublicPowerBiParametersDtoTypeQUICKSIGHT        PublicPowerBiParametersDtoType = "QUICKSIGHT"
	PublicPowerBiParametersDtoTypeREDSHIFT          PublicPowerBiParametersDtoType = "REDSHIFT"
	PublicPowerBiParametersDtoTypeSNOWFLAKE         PublicPowerBiParametersDtoType = "SNOWFLAKE"
	PublicPowerBiParametersDtoTypeSYNAPSE           PublicPowerBiParametersDtoType = "SYNAPSE"
	PublicPowerBiParametersDtoTypeTABLEAU           PublicPowerBiParametersDtoType = "TABLEAU"
	PublicPowerBiParametersDtoTypeUnderscoreUNKNOWN PublicPowerBiParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicQuicksightParametersDtoType.
const (
	PublicQuicksightParametersDtoTypeAIRFLOW           PublicQuicksightParametersDtoType = "AIRFLOW"
	PublicQuicksightParametersDtoTypeATHENA            PublicQuicksightParametersDtoType = "ATHENA"
	PublicQuicksightParametersDtoTypeBIGQUERY          PublicQuicksightParametersDtoType = "BIGQUERY"
	PublicQuicksightParametersDtoTypeDATABRICKS        PublicQuicksightParametersDtoType = "DATABRICKS"
	PublicQuicksightParametersDtoTypeDBT               PublicQuicksightParametersDtoType = "DBT"
	PublicQuicksightParametersDtoTypeDBTCLOUD          PublicQuicksightParametersDtoType = "DBT_CLOUD"
	PublicQuicksightParametersDtoTypeDECLARATIVE       PublicQuicksightParametersDtoType = "DECLARATIVE"
	PublicQuicksightParametersDtoTypeFIVETRAN          PublicQuicksightParametersDtoType = "FIVETRAN"
	PublicQuicksightParametersDtoTypeLOOKER            PublicQuicksightParametersDtoType = "LOOKER"
	PublicQuicksightParametersDtoTypeMSSQL             PublicQuicksightParametersDtoType = "MSSQL"
	PublicQuicksightParametersDtoTypeMYSQL             PublicQuicksightParametersDtoType = "MYSQL"
	PublicQuicksightParametersDtoTypeORACLE            PublicQuicksightParametersDtoType = "ORACLE"
	PublicQuicksightParametersDtoTypePOSTGRESQL        PublicQuicksightParametersDtoType = "POSTGRESQL"
	PublicQuicksightParametersDtoTypePOWERBI           PublicQuicksightParametersDtoType = "POWER_BI"
	PublicQuicksightParametersDtoTypeQUICKSIGHT        PublicQuicksightParametersDtoType = "QUICKSIGHT"
	PublicQuicksightParametersDtoTypeREDSHIFT          PublicQuicksightParametersDtoType = "REDSHIFT"
	PublicQuicksightParametersDtoTypeSNOWFLAKE         PublicQuicksightParametersDtoType = "SNOWFLAKE"
	PublicQuicksightParametersDtoTypeSYNAPSE           PublicQuicksightParametersDtoType = "SYNAPSE"
	PublicQuicksightParametersDtoTypeTABLEAU           PublicQuicksightParametersDtoType = "TABLEAU"
	PublicQuicksightParametersDtoTypeUnderscoreUNKNOWN PublicQuicksightParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicRedshiftParametersDtoType.
const (
	PublicRedshiftParametersDtoTypeAIRFLOW           PublicRedshiftParametersDtoType = "AIRFLOW"
	PublicRedshiftParametersDtoTypeATHENA            PublicRedshiftParametersDtoType = "ATHENA"
	PublicRedshiftParametersDtoTypeBIGQUERY          PublicRedshiftParametersDtoType = "BIGQUERY"
	PublicRedshiftParametersDtoTypeDATABRICKS        PublicRedshiftParametersDtoType = "DATABRICKS"
	PublicRedshiftParametersDtoTypeDBT               PublicRedshiftParametersDtoType = "DBT"
	PublicRedshiftParametersDtoTypeDBTCLOUD          PublicRedshiftParametersDtoType = "DBT_CLOUD"
	PublicRedshiftParametersDtoTypeDECLARATIVE       PublicRedshiftParametersDtoType = "DECLARATIVE"
	PublicRedshiftParametersDtoTypeFIVETRAN          PublicRedshiftParametersDtoType = "FIVETRAN"
	PublicRedshiftParametersDtoTypeLOOKER            PublicRedshiftParametersDtoType = "LOOKER"
	PublicRedshiftParametersDtoTypeMSSQL             PublicRedshiftParametersDtoType = "MSSQL"
	PublicRedshiftParametersDtoTypeMYSQL             PublicRedshiftParametersDtoType = "MYSQL"
	PublicRedshiftParametersDtoTypeORACLE            PublicRedshiftParametersDtoType = "ORACLE"
	PublicRedshiftParametersDtoTypePOSTGRESQL        PublicRedshiftParametersDtoType = "POSTGRESQL"
	PublicRedshiftParametersDtoTypePOWERBI           PublicRedshiftParametersDtoType = "POWER_BI"
	PublicRedshiftParametersDtoTypeQUICKSIGHT        PublicRedshiftParametersDtoType = "QUICKSIGHT"
	PublicRedshiftParametersDtoTypeREDSHIFT          PublicRedshiftParametersDtoType = "REDSHIFT"
	PublicRedshiftParametersDtoTypeSNOWFLAKE         PublicRedshiftParametersDtoType = "SNOWFLAKE"
	PublicRedshiftParametersDtoTypeSYNAPSE           PublicRedshiftParametersDtoType = "SYNAPSE"
	PublicRedshiftParametersDtoTypeTABLEAU           PublicRedshiftParametersDtoType = "TABLEAU"
	PublicRedshiftParametersDtoTypeUnderscoreUNKNOWN PublicRedshiftParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicSnowflakeParametersDtoType.
const (
	PublicSnowflakeParametersDtoTypeAIRFLOW           PublicSnowflakeParametersDtoType = "AIRFLOW"
	PublicSnowflakeParametersDtoTypeATHENA            PublicSnowflakeParametersDtoType = "ATHENA"
	PublicSnowflakeParametersDtoTypeBIGQUERY          PublicSnowflakeParametersDtoType = "BIGQUERY"
	PublicSnowflakeParametersDtoTypeDATABRICKS        PublicSnowflakeParametersDtoType = "DATABRICKS"
	PublicSnowflakeParametersDtoTypeDBT               PublicSnowflakeParametersDtoType = "DBT"
	PublicSnowflakeParametersDtoTypeDBTCLOUD          PublicSnowflakeParametersDtoType = "DBT_CLOUD"
	PublicSnowflakeParametersDtoTypeDECLARATIVE       PublicSnowflakeParametersDtoType = "DECLARATIVE"
	PublicSnowflakeParametersDtoTypeFIVETRAN          PublicSnowflakeParametersDtoType = "FIVETRAN"
	PublicSnowflakeParametersDtoTypeLOOKER            PublicSnowflakeParametersDtoType = "LOOKER"
	PublicSnowflakeParametersDtoTypeMSSQL             PublicSnowflakeParametersDtoType = "MSSQL"
	PublicSnowflakeParametersDtoTypeMYSQL             PublicSnowflakeParametersDtoType = "MYSQL"
	PublicSnowflakeParametersDtoTypeORACLE            PublicSnowflakeParametersDtoType = "ORACLE"
	PublicSnowflakeParametersDtoTypePOSTGRESQL        PublicSnowflakeParametersDtoType = "POSTGRESQL"
	PublicSnowflakeParametersDtoTypePOWERBI           PublicSnowflakeParametersDtoType = "POWER_BI"
	PublicSnowflakeParametersDtoTypeQUICKSIGHT        PublicSnowflakeParametersDtoType = "QUICKSIGHT"
	PublicSnowflakeParametersDtoTypeREDSHIFT          PublicSnowflakeParametersDtoType = "REDSHIFT"
	PublicSnowflakeParametersDtoTypeSNOWFLAKE         PublicSnowflakeParametersDtoType = "SNOWFLAKE"
	PublicSnowflakeParametersDtoTypeSYNAPSE           PublicSnowflakeParametersDtoType = "SYNAPSE"
	PublicSnowflakeParametersDtoTypeTABLEAU           PublicSnowflakeParametersDtoType = "TABLEAU"
	PublicSnowflakeParametersDtoTypeUnderscoreUNKNOWN PublicSnowflakeParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicSourceFilterDtoTypes.
const (
	PublicSourceFilterDtoTypesAIRFLOW           PublicSourceFilterDtoTypes = "AIRFLOW"
	PublicSourceFilterDtoTypesATHENA            PublicSourceFilterDtoTypes = "ATHENA"
	PublicSourceFilterDtoTypesBIGQUERY          PublicSourceFilterDtoTypes = "BIGQUERY"
	PublicSourceFilterDtoTypesDATABRICKS        PublicSourceFilterDtoTypes = "DATABRICKS"
	PublicSourceFilterDtoTypesDBT               PublicSourceFilterDtoTypes = "DBT"
	PublicSourceFilterDtoTypesDBTCLOUD          PublicSourceFilterDtoTypes = "DBT_CLOUD"
	PublicSourceFilterDtoTypesDECLARATIVE       PublicSourceFilterDtoTypes = "DECLARATIVE"
	PublicSourceFilterDtoTypesFIVETRAN          PublicSourceFilterDtoTypes = "FIVETRAN"
	PublicSourceFilterDtoTypesLOOKER            PublicSourceFilterDtoTypes = "LOOKER"
	PublicSourceFilterDtoTypesMSSQL             PublicSourceFilterDtoTypes = "MSSQL"
	PublicSourceFilterDtoTypesMYSQL             PublicSourceFilterDtoTypes = "MYSQL"
	PublicSourceFilterDtoTypesORACLE            PublicSourceFilterDtoTypes = "ORACLE"
	PublicSourceFilterDtoTypesPOSTGRESQL        PublicSourceFilterDtoTypes = "POSTGRESQL"
	PublicSourceFilterDtoTypesPOWERBI           PublicSourceFilterDtoTypes = "POWER_BI"
	PublicSourceFilterDtoTypesQUICKSIGHT        PublicSourceFilterDtoTypes = "QUICKSIGHT"
	PublicSourceFilterDtoTypesREDSHIFT          PublicSourceFilterDtoTypes = "REDSHIFT"
	PublicSourceFilterDtoTypesSNOWFLAKE         PublicSourceFilterDtoTypes = "SNOWFLAKE"
	PublicSourceFilterDtoTypesSYNAPSE           PublicSourceFilterDtoTypes = "SYNAPSE"
	PublicSourceFilterDtoTypesTABLEAU           PublicSourceFilterDtoTypes = "TABLEAU"
	PublicSourceFilterDtoTypesUnderscoreUNKNOWN PublicSourceFilterDtoTypes = "_UNKNOWN_"
)

// Defines values for PublicSourceParametersDtoType.
const (
	PublicSourceParametersDtoTypeAIRFLOW           PublicSourceParametersDtoType = "AIRFLOW"
	PublicSourceParametersDtoTypeATHENA            PublicSourceParametersDtoType = "ATHENA"
	PublicSourceParametersDtoTypeBIGQUERY          PublicSourceParametersDtoType = "BIGQUERY"
	PublicSourceParametersDtoTypeDATABRICKS        PublicSourceParametersDtoType = "DATABRICKS"
	PublicSourceParametersDtoTypeDBT               PublicSourceParametersDtoType = "DBT"
	PublicSourceParametersDtoTypeDBTCLOUD          PublicSourceParametersDtoType = "DBT_CLOUD"
	PublicSourceParametersDtoTypeDECLARATIVE       PublicSourceParametersDtoType = "DECLARATIVE"
	PublicSourceParametersDtoTypeFIVETRAN          PublicSourceParametersDtoType = "FIVETRAN"
	PublicSourceParametersDtoTypeLOOKER            PublicSourceParametersDtoType = "LOOKER"
	PublicSourceParametersDtoTypeMSSQL             PublicSourceParametersDtoType = "MSSQL"
	PublicSourceParametersDtoTypeMYSQL             PublicSourceParametersDtoType = "MYSQL"
	PublicSourceParametersDtoTypeORACLE            PublicSourceParametersDtoType = "ORACLE"
	PublicSourceParametersDtoTypePOSTGRESQL        PublicSourceParametersDtoType = "POSTGRESQL"
	PublicSourceParametersDtoTypePOWERBI           PublicSourceParametersDtoType = "POWER_BI"
	PublicSourceParametersDtoTypeQUICKSIGHT        PublicSourceParametersDtoType = "QUICKSIGHT"
	PublicSourceParametersDtoTypeREDSHIFT          PublicSourceParametersDtoType = "REDSHIFT"
	PublicSourceParametersDtoTypeSNOWFLAKE         PublicSourceParametersDtoType = "SNOWFLAKE"
	PublicSourceParametersDtoTypeSYNAPSE           PublicSourceParametersDtoType = "SYNAPSE"
	PublicSourceParametersDtoTypeTABLEAU           PublicSourceParametersDtoType = "TABLEAU"
	PublicSourceParametersDtoTypeUnderscoreUNKNOWN PublicSourceParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicSynapseParametersDtoType.
const (
	PublicSynapseParametersDtoTypeAIRFLOW           PublicSynapseParametersDtoType = "AIRFLOW"
	PublicSynapseParametersDtoTypeATHENA            PublicSynapseParametersDtoType = "ATHENA"
	PublicSynapseParametersDtoTypeBIGQUERY          PublicSynapseParametersDtoType = "BIGQUERY"
	PublicSynapseParametersDtoTypeDATABRICKS        PublicSynapseParametersDtoType = "DATABRICKS"
	PublicSynapseParametersDtoTypeDBT               PublicSynapseParametersDtoType = "DBT"
	PublicSynapseParametersDtoTypeDBTCLOUD          PublicSynapseParametersDtoType = "DBT_CLOUD"
	PublicSynapseParametersDtoTypeDECLARATIVE       PublicSynapseParametersDtoType = "DECLARATIVE"
	PublicSynapseParametersDtoTypeFIVETRAN          PublicSynapseParametersDtoType = "FIVETRAN"
	PublicSynapseParametersDtoTypeLOOKER            PublicSynapseParametersDtoType = "LOOKER"
	PublicSynapseParametersDtoTypeMSSQL             PublicSynapseParametersDtoType = "MSSQL"
	PublicSynapseParametersDtoTypeMYSQL             PublicSynapseParametersDtoType = "MYSQL"
	PublicSynapseParametersDtoTypeORACLE            PublicSynapseParametersDtoType = "ORACLE"
	PublicSynapseParametersDtoTypePOSTGRESQL        PublicSynapseParametersDtoType = "POSTGRESQL"
	PublicSynapseParametersDtoTypePOWERBI           PublicSynapseParametersDtoType = "POWER_BI"
	PublicSynapseParametersDtoTypeQUICKSIGHT        PublicSynapseParametersDtoType = "QUICKSIGHT"
	PublicSynapseParametersDtoTypeREDSHIFT          PublicSynapseParametersDtoType = "REDSHIFT"
	PublicSynapseParametersDtoTypeSNOWFLAKE         PublicSynapseParametersDtoType = "SNOWFLAKE"
	PublicSynapseParametersDtoTypeSYNAPSE           PublicSynapseParametersDtoType = "SYNAPSE"
	PublicSynapseParametersDtoTypeTABLEAU           PublicSynapseParametersDtoType = "TABLEAU"
	PublicSynapseParametersDtoTypeUnderscoreUNKNOWN PublicSynapseParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicTableauParametersDtoType.
const (
	PublicTableauParametersDtoTypeAIRFLOW           PublicTableauParametersDtoType = "AIRFLOW"
	PublicTableauParametersDtoTypeATHENA            PublicTableauParametersDtoType = "ATHENA"
	PublicTableauParametersDtoTypeBIGQUERY          PublicTableauParametersDtoType = "BIGQUERY"
	PublicTableauParametersDtoTypeDATABRICKS        PublicTableauParametersDtoType = "DATABRICKS"
	PublicTableauParametersDtoTypeDBT               PublicTableauParametersDtoType = "DBT"
	PublicTableauParametersDtoTypeDBTCLOUD          PublicTableauParametersDtoType = "DBT_CLOUD"
	PublicTableauParametersDtoTypeDECLARATIVE       PublicTableauParametersDtoType = "DECLARATIVE"
	PublicTableauParametersDtoTypeFIVETRAN          PublicTableauParametersDtoType = "FIVETRAN"
	PublicTableauParametersDtoTypeLOOKER            PublicTableauParametersDtoType = "LOOKER"
	PublicTableauParametersDtoTypeMSSQL             PublicTableauParametersDtoType = "MSSQL"
	PublicTableauParametersDtoTypeMYSQL             PublicTableauParametersDtoType = "MYSQL"
	PublicTableauParametersDtoTypeORACLE            PublicTableauParametersDtoType = "ORACLE"
	PublicTableauParametersDtoTypePOSTGRESQL        PublicTableauParametersDtoType = "POSTGRESQL"
	PublicTableauParametersDtoTypePOWERBI           PublicTableauParametersDtoType = "POWER_BI"
	PublicTableauParametersDtoTypeQUICKSIGHT        PublicTableauParametersDtoType = "QUICKSIGHT"
	PublicTableauParametersDtoTypeREDSHIFT          PublicTableauParametersDtoType = "REDSHIFT"
	PublicTableauParametersDtoTypeSNOWFLAKE         PublicTableauParametersDtoType = "SNOWFLAKE"
	PublicTableauParametersDtoTypeSYNAPSE           PublicTableauParametersDtoType = "SYNAPSE"
	PublicTableauParametersDtoTypeTABLEAU           PublicTableauParametersDtoType = "TABLEAU"
	PublicTableauParametersDtoTypeUnderscoreUNKNOWN PublicTableauParametersDtoType = "_UNKNOWN_"
)

// Defines values for PublicTagReferenceDtoKind.
const (
	Classification PublicTagReferenceDtoKind = "Classification"
	Tag            PublicTagReferenceDtoKind = "Tag"
)

// Defines values for PublicTagReferenceGetDtoKind.
const (
	PublicTagReferenceGetDtoKindBIGQUERYEXTERNAL  PublicTagReferenceGetDtoKind = "BIGQUERY_EXTERNAL"
	PublicTagReferenceGetDtoKindCLASSIFICATION    PublicTagReferenceGetDtoKind = "CLASSIFICATION"
	PublicTagReferenceGetDtoKindSNOWFLAKEEXTERNAL PublicTagReferenceGetDtoKind = "SNOWFLAKE_EXTERNAL"
	PublicTagReferenceGetDtoKindTAG               PublicTagReferenceGetDtoKind = "TAG"
)

// Defines values for PublicTransformationRunDtoLastRunStatus.
const (
	PublicTransformationRunDtoLastRunStatusERROR          PublicTransformationRunDtoLastRunStatus = "ERROR"
	PublicTransformationRunDtoLastRunStatusNOTTARGETED    PublicTransformationRunDtoLastRunStatus = "NOT_TARGETED"
	PublicTransformationRunDtoLastRunStatusPARTIALSUCCESS PublicTransformationRunDtoLastRunStatus = "PARTIAL_SUCCESS"
	PublicTransformationRunDtoLastRunStatusSKIPPED        PublicTransformationRunDtoLastRunStatus = "SKIPPED"
	PublicTransformationRunDtoLastRunStatusSUCCESS        PublicTransformationRunDtoLastRunStatus = "SUCCESS"
	PublicTransformationRunDtoLastRunStatusUNKNOWN        PublicTransformationRunDtoLastRunStatus = "UNKNOWN"
)

// Defines values for PublicUserCreateDtoAuthTypes.
const (
	PublicUserCreateDtoAuthTypesLOGINPASSWORD PublicUserCreateDtoAuthTypes = "LOGIN_PASSWORD"
	PublicUserCreateDtoAuthTypesSAML2         PublicUserCreateDtoAuthTypes = "SAML2"
)

// Defines values for PublicUserCreateDtoRole.
const (
	PublicUserCreateDtoRoleADMIN  PublicUserCreateDtoRole = "ADMIN"
	PublicUserCreateDtoRoleEDITOR PublicUserCreateDtoRole = "EDITOR"
	PublicUserCreateDtoRoleVIEWER PublicUserCreateDtoRole = "VIEWER"
)

// Defines values for PublicUserGetDtoAuthTypes.
const (
	PublicUserGetDtoAuthTypesLOGINPASSWORD PublicUserGetDtoAuthTypes = "LOGIN_PASSWORD"
	PublicUserGetDtoAuthTypesSAML2         PublicUserGetDtoAuthTypes = "SAML2"
)

// Defines values for PublicUserGetDtoRole.
const (
	PublicUserGetDtoRoleADMIN  PublicUserGetDtoRole = "ADMIN"
	PublicUserGetDtoRoleEDITOR PublicUserGetDtoRole = "EDITOR"
	PublicUserGetDtoRoleVIEWER PublicUserGetDtoRole = "VIEWER"
)

// Defines values for PublicUserPermissionAssignmentDtoDomainRole.
const (
	PublicUserPermissionAssignmentDtoDomainRoleCATALOGEDITOR    PublicUserPermissionAssignmentDtoDomainRole = "CATALOG_EDITOR"
	PublicUserPermissionAssignmentDtoDomainRoleEDITOR           PublicUserPermissionAssignmentDtoDomainRole = "EDITOR"
	PublicUserPermissionAssignmentDtoDomainRoleMONITORRESPONDER PublicUserPermissionAssignmentDtoDomainRole = "MONITOR_RESPONDER"
	PublicUserPermissionAssignmentDtoDomainRoleVIEWER           PublicUserPermissionAssignmentDtoDomainRole = "VIEWER"
)

// Defines values for PublicUserUpdateDtoAuthTypes.
const (
	LOGINPASSWORD PublicUserUpdateDtoAuthTypes = "LOGIN_PASSWORD"
	SAML2         PublicUserUpdateDtoAuthTypes = "SAML2"
)

// Defines values for PublicUserUpdateDtoRole.
const (
	PublicUserUpdateDtoRoleADMIN  PublicUserUpdateDtoRole = "ADMIN"
	PublicUserUpdateDtoRoleEDITOR PublicUserUpdateDtoRole = "EDITOR"
	PublicUserUpdateDtoRoleVIEWER PublicUserUpdateDtoRole = "VIEWER"
)

// Defines values for RuleCatalogAssetDtoRuleType.
const (
	AUTOMATICRULE RuleCatalogAssetDtoRuleType = "AUTOMATIC_RULE"
	CUSTOMRULE    RuleCatalogAssetDtoRuleType = "CUSTOM_RULE"
	SIFFLETRULE   RuleCatalogAssetDtoRuleType = "SIFFLET_RULE"
)

// Defines values for RuleCatalogAssetDtoSourcePlatform.
const (
	RuleCatalogAssetDtoSourcePlatformDBT     RuleCatalogAssetDtoSourcePlatform = "DBT"
	RuleCatalogAssetDtoSourcePlatformSIFFLET RuleCatalogAssetDtoSourcePlatform = "SIFFLET"
)

// Defines values for RuleInfoDtoLastRunStatus.
const (
	RuleInfoDtoLastRunStatusFAILED                RuleInfoDtoLastRunStatus = "FAILED"
	RuleInfoDtoLastRunStatusPENDING               RuleInfoDtoLastRunStatus = "PENDING"
	RuleInfoDtoLastRunStatusREQUIRESYOURATTENTION RuleInfoDtoLastRunStatus = "REQUIRES_YOUR_ATTENTION"
	RuleInfoDtoLastRunStatusRUNNING               RuleInfoDtoLastRunStatus = "RUNNING"
	RuleInfoDtoLastRunStatusSUCCESS               RuleInfoDtoLastRunStatus = "SUCCESS"
	RuleInfoDtoLastRunStatusTECHNICALERROR        RuleInfoDtoLastRunStatus = "TECHNICAL_ERROR"
)

// Defines values for RuleInfoDtoRuleStatus.
const (
	RuleInfoDtoRuleStatusFAILING        RuleInfoDtoRuleStatus = "FAILING"
	RuleInfoDtoRuleStatusNEEDSATTENTION RuleInfoDtoRuleStatus = "NEEDS_ATTENTION"
	RuleInfoDtoRuleStatusNOTEVALUATED   RuleInfoDtoRuleStatus = "NOT_EVALUATED"
	RuleInfoDtoRuleStatusPASSING        RuleInfoDtoRuleStatus = "PASSING"
)

// Defines values for RuleInfoDtoSourcePlatform.
const (
	RuleInfoDtoSourcePlatformDBT     RuleInfoDtoSourcePlatform = "DBT"
	RuleInfoDtoSourcePlatformSIFFLET RuleInfoDtoSourcePlatform = "SIFFLET"
)

// Defines values for RuleRunDtoIncidentStatus.
const (
	RuleRunDtoIncidentStatusCLOSED     RuleRunDtoIncidentStatus = "CLOSED"
	RuleRunDtoIncidentStatusINPROGRESS RuleRunDtoIncidentStatus = "IN_PROGRESS"
	RuleRunDtoIncidentStatusOPEN       RuleRunDtoIncidentStatus = "OPEN"
)

// Defines values for RuleRunDtoStatus.
const (
	RuleRunDtoStatusFAILED                RuleRunDtoStatus = "FAILED"
	RuleRunDtoStatusPENDING               RuleRunDtoStatus = "PENDING"
	RuleRunDtoStatusREQUIRESYOURATTENTION RuleRunDtoStatus = "REQUIRES_YOUR_ATTENTION"
	RuleRunDtoStatusRUNNING               RuleRunDtoStatus = "RUNNING"
	RuleRunDtoStatusSUCCESS               RuleRunDtoStatus = "SUCCESS"
	RuleRunDtoStatusTECHNICALERROR        RuleRunDtoStatus = "TECHNICAL_ERROR"
)

// Defines values for RuleRunDtoType.
const (
	DBT       RuleRunDtoType = "DBT"
	MANUAL    RuleRunDtoType = "MANUAL"
	SCHEDULED RuleRunDtoType = "SCHEDULED"
)

// Defines values for RuleStatusDtoRuleStatus.
const (
	RuleStatusDtoRuleStatusFAILING        RuleStatusDtoRuleStatus = "FAILING"
	RuleStatusDtoRuleStatusNEEDSATTENTION RuleStatusDtoRuleStatus = "NEEDS_ATTENTION"
	RuleStatusDtoRuleStatusNOTEVALUATED   RuleStatusDtoRuleStatus = "NOT_EVALUATED"
	RuleStatusDtoRuleStatusPASSING        RuleStatusDtoRuleStatus = "PASSING"
)

// Defines values for TagDtoType.
const (
	TagDtoTypeBIGQUERYEXTERNAL          TagDtoType = "BIGQUERY_EXTERNAL"
	TagDtoTypeDBTEXTERNAL               TagDtoType = "DBT_EXTERNAL"
	TagDtoTypeGENERIC                   TagDtoType = "GENERIC"
	TagDtoTypeHIDDENDATACLASSIFICATION  TagDtoType = "HIDDEN_DATA_CLASSIFICATION"
	TagDtoTypeSNOWFLAKEEXTERNAL         TagDtoType = "SNOWFLAKE_EXTERNAL"
	TagDtoTypeTERM                      TagDtoType = "TERM"
	TagDtoTypeVISIBLEDATACLASSIFICATION TagDtoType = "VISIBLE_DATA_CLASSIFICATION"
)

// Defines values for UserProviderDtoType.
const (
	ACCESSTOKEN UserProviderDtoType = "ACCESS_TOKEN"
	DATASOURCE  UserProviderDtoType = "DATASOURCE"
	GENERIC     UserProviderDtoType = "GENERIC"
	USER        UserProviderDtoType = "USER"
)

// Defines values for WorkspaceApplyObjectResponseDtoStatus.
const (
	WorkspaceApplyObjectResponseDtoStatusError WorkspaceApplyObjectResponseDtoStatus = "Error"
	WorkspaceApplyObjectResponseDtoStatusFatal WorkspaceApplyObjectResponseDtoStatus = "Fatal"
	WorkspaceApplyObjectResponseDtoStatusOK    WorkspaceApplyObjectResponseDtoStatus = "OK"
)

// Defines values for WorkspaceApplyObjectResponseDtoSubStatus.
const (
	DeserializationError WorkspaceApplyObjectResponseDtoSubStatus = "DeserializationError"
	InternalServerError  WorkspaceApplyObjectResponseDtoSubStatus = "InternalServerError"
	Skipped              WorkspaceApplyObjectResponseDtoSubStatus = "Skipped"
	Success              WorkspaceApplyObjectResponseDtoSubStatus = "Success"
	Unauthorized         WorkspaceApplyObjectResponseDtoSubStatus = "Unauthorized"
	ValidationError      WorkspaceApplyObjectResponseDtoSubStatus = "ValidationError"
)

// Defines values for GetAllRuleParamsLastRunStatus.
const (
	GetAllRuleParamsLastRunStatusFAILED                GetAllRuleParamsLastRunStatus = "FAILED"
	GetAllRuleParamsLastRunStatusPENDING               GetAllRuleParamsLastRunStatus = "PENDING"
	GetAllRuleParamsLastRunStatusREQUIRESYOURATTENTION GetAllRuleParamsLastRunStatus = "REQUIRES_YOUR_ATTENTION"
	GetAllRuleParamsLastRunStatusRUNNING               GetAllRuleParamsLastRunStatus = "RUNNING"
	GetAllRuleParamsLastRunStatusSUCCESS               GetAllRuleParamsLastRunStatus = "SUCCESS"
	GetAllRuleParamsLastRunStatusTECHNICALERROR        GetAllRuleParamsLastRunStatus = "TECHNICAL_ERROR"
)

// Defines values for GetAllRuleParamsRuleStatus.
const (
	FAILING        GetAllRuleParamsRuleStatus = "FAILING"
	NEEDSATTENTION GetAllRuleParamsRuleStatus = "NEEDS_ATTENTION"
	NOTEVALUATED   GetAllRuleParamsRuleStatus = "NOT_EVALUATED"
	PASSING        GetAllRuleParamsRuleStatus = "PASSING"
)

// Defines values for GetSiffletRuleRunsParamsStatus.
const (
	FAILED                GetSiffletRuleRunsParamsStatus = "FAILED"
	PENDING               GetSiffletRuleRunsParamsStatus = "PENDING"
	REQUIRESYOURATTENTION GetSiffletRuleRunsParamsStatus = "REQUIRES_YOUR_ATTENTION"
	RUNNING               GetSiffletRuleRunsParamsStatus = "RUNNING"
	SUCCESS               GetSiffletRuleRunsParamsStatus = "SUCCESS"
	TECHNICALERROR        GetSiffletRuleRunsParamsStatus = "TECHNICAL_ERROR"
)

// Defines values for GetSiffletRuleRunParamsExpand.
const (
	VALUES GetSiffletRuleRunParamsExpand = "VALUES"
)

// AccessTokenProviderDto defines model for AccessTokenProviderDto.
type AccessTokenProviderDto struct {
	Name *string                     `json:"name,omitempty"`
	Type *AccessTokenProviderDtoType `json:"type,omitempty"`
}

// AccessTokenProviderDtoType defines model for AccessTokenProviderDto.Type.
type AccessTokenProviderDtoType string

// AlertingHookDto defines model for AlertingHookDto.
type AlertingHookDto struct {
	CreatedBy        *string             `json:"createdBy,omitempty"`
	CreatedDate      *int64              `json:"createdDate,omitempty"`
	ExternalHook     string              `json:"externalHook"`
	Id               openapi_types.UUID  `json:"id"`
	LastModifiedDate *int64              `json:"lastModifiedDate,omitempty"`
	ModifiedBy       *string             `json:"modifiedBy,omitempty"`
	Name             string              `json:"name"`
	Params           *AlertingHookParams `json:"params,omitempty"`
	Type             AlertingHookDtoType `json:"type"`
}

// AlertingHookDtoType defines model for AlertingHookDto.Type.
type AlertingHookDtoType string

// AlertingHookParams defines model for AlertingHookParams.
type AlertingHookParams struct {
	Headers *[]CustomHeader `json:"headers,omitempty"`
}

// ApiProblemSchema defines model for ApiProblemSchema.
type ApiProblemSchema struct {
	Detail   *string `json:"detail,omitempty"`
	Response *string `json:"response,omitempty"`
	Status   *int32  `json:"status,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// CalendarTimeslot defines model for CalendarTimeslot.
type CalendarTimeslot struct {
	Date        openapi_types.Date `json:"date"`
	Description *string            `json:"description"`
}

// CatalogFilterDto defines model for CatalogFilterDto.
type CatalogFilterDto struct {
	Children *[]FilterElementDto `json:"children,omitempty"`
	Id       *string             `json:"id,omitempty"`
	Name     *string             `json:"name,omitempty"`
	Query    *string             `json:"query,omitempty"`
}

// ChangeDto defines model for ChangeDto.
type ChangeDto struct {
	From            *JsonNode           `json:"from,omitempty"`
	FromWorkspaceId *openapi_types.UUID `json:"fromWorkspaceId,omitempty"`
	To              *JsonNode           `json:"to,omitempty"`
	ToWorkspaceId   *openapi_types.UUID `json:"toWorkspaceId,omitempty"`
	Type            *ChangeDtoType      `json:"type,omitempty"`
}

// ChangeDtoType defines model for ChangeDto.Type.
type ChangeDtoType string

// Criticality defines model for Criticality.
type Criticality string

// CustomHeader defines model for CustomHeader.
type CustomHeader struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// DatasetBriefDto defines model for DatasetBriefDto.
type DatasetBriefDto struct {
	DatasourceName string             `json:"datasourceName"`
	DatasourceType string             `json:"datasourceType"`
	Id             openapi_types.UUID `json:"id"`
	Name           string             `json:"name"`
	Urn            string             `json:"urn"`
}

// DatasetBriefWithUriDto defines model for DatasetBriefWithUriDto.
type DatasetBriefWithUriDto struct {
	DatasourceName string             `json:"datasourceName"`
	DatasourceType string             `json:"datasourceType"`
	Id             openapi_types.UUID `json:"id"`
	Name           string             `json:"name"`
	QualifiedName  *string            `json:"qualifiedName,omitempty"`
	Uri            *string            `json:"uri,omitempty"`
	Urn            string             `json:"urn"`
}

// DatasourceProviderDto defines model for DatasourceProviderDto.
type DatasourceProviderDto struct {
	Id   *openapi_types.UUID        `json:"id,omitempty"`
	Name *string                    `json:"name,omitempty"`
	Type *DatasourceProviderDtoType `json:"type,omitempty"`
}

// DatasourceProviderDtoType defines model for DatasourceProviderDto.Type.
type DatasourceProviderDtoType string

// FilterElementDto defines model for FilterElementDto.
type FilterElementDto struct {
	Id      *string `json:"id,omitempty"`
	Name    string  `json:"name"`
	Results *int32  `json:"results,omitempty"`
}

// GenericProviderDto defines model for GenericProviderDto.
type GenericProviderDto struct {
	CreatedBy *string                 `json:"createdBy,omitempty"`
	Type      *GenericProviderDtoType `json:"type,omitempty"`
}

// GenericProviderDtoType defines model for GenericProviderDto.Type.
type GenericProviderDtoType string

// GetCollaborationToolItemDto defines model for GetCollaborationToolItemDto.
type GetCollaborationToolItemDto struct {
	Id      openapi_types.UUID              `json:"id"`
	ItemKey string                          `json:"itemKey"`
	ItemUrl *string                         `json:"itemUrl,omitempty"`
	Type    GetCollaborationToolItemDtoType `json:"type"`
}

// GetCollaborationToolItemDtoType defines model for GetCollaborationToolItemDto.Type.
type GetCollaborationToolItemDtoType string

// GitConnection The LookML configuration. See https://docs.siffletdata.com/docs/looker. If you don't use LookML, use an empty list `[]`
type GitConnection struct {
	AuthType GitConnectionAuthType `json:"authType"`
	Branch   *string               `json:"branch,omitempty"`
	SecretId string                `json:"secretId"`
	Url      string                `json:"url"`
}

// GitConnectionAuthType defines model for GitConnection.AuthType.
type GitConnectionAuthType string

// IncidentLightDto defines model for IncidentLightDto.
type IncidentLightDto struct {
	CollaborationToolItems []GetCollaborationToolItemDto `json:"collaborationToolItems"`
	CompromisedAssets      int32                         `json:"compromisedAssets"`
	Criticality            int32                         `json:"criticality"`
	Datasets               []DatasetBriefDto             `json:"datasets"`
	Id                     openapi_types.UUID            `json:"id"`
	IssueNo                int32                         `json:"issueNo"`
	LastModifiedDate       *int64                        `json:"lastModifiedDate,omitempty"`
	LastOccurredDate       int64                         `json:"lastOccurredDate"`
	Name                   string                        `json:"name"`
	Owners                 []UserDto                     `json:"owners"`
	Qualification          IncidentLightDtoQualification `json:"qualification"`
	Status                 IncidentLightDtoStatus        `json:"status"`
	TriggerTime            int64                         `json:"triggerTime"`
}

// IncidentLightDtoQualification defines model for IncidentLightDto.Qualification.
type IncidentLightDtoQualification string

// IncidentLightDtoStatus defines model for IncidentLightDto.Status.
type IncidentLightDtoStatus string

// JsonNode defines model for JsonNode.
type JsonNode = map[string]interface{}

// LastRunStatusDto defines model for LastRunStatusDto.
type LastRunStatusDto struct {
	Result    *string                `json:"result"`
	Status    LastRunStatusDtoStatus `json:"status"`
	Timestamp int64                  `json:"timestamp"`
}

// LastRunStatusDtoStatus defines model for LastRunStatusDto.Status.
type LastRunStatusDtoStatus string

// LogDto defines model for LogDto.
type LogDto struct {
	Level   *LogDtoLevel `json:"level,omitempty"`
	Message *string      `json:"message,omitempty"`
}

// LogDtoLevel defines model for LogDto.Level.
type LogDtoLevel string

// MonitoringSearchDto defines model for MonitoringSearchDto.
type MonitoringSearchDto struct {
	CatalogFilters []CatalogFilterDto                  `json:"catalogFilters"`
	SearchRules    SearchCollectionRuleCatalogAssetDto `json:"searchRules"`
}

// ParameterizedQueryDto defines model for ParameterizedQueryDto.
type ParameterizedQueryDto struct {
	PositionalParameters []PositionalParameterDto `json:"positionalParameters"`
	Query                string                   `json:"query"`
}

// PositionalParameterDto defines model for PositionalParameterDto.
type PositionalParameterDto struct {
	Value *map[string]interface{} `json:"value,omitempty"`
}

// ProviderDto defines model for ProviderDto.
type ProviderDto struct {
	Type *ProviderDtoType `json:"type,omitempty"`
}

// ProviderDtoType defines model for ProviderDto.Type.
type ProviderDtoType string

// PublicAirflowParametersDto defines model for PublicAirflowParametersDto.
type PublicAirflowParametersDto struct {
	// Host Your Airflow server hostname
	Host *string `json:"host,omitempty"`

	// Port Your Airflow server port
	Port *int32                         `json:"port,omitempty"`
	Type PublicAirflowParametersDtoType `json:"type"`
}

// PublicAirflowParametersDtoType defines model for PublicAirflowParametersDto.Type.
type PublicAirflowParametersDtoType string

// PublicAssetFilterDto Filter to apply on the assets search
type PublicAssetFilterDto struct {
	// AssetType List of asset types to filter on. Valid values are TABLE_AND_VIEW, PIPELINE, DASHBOARD, ML_MODEL. For filtering declared assets with custom types, you can use the format declared-asset_{custom sub type}. For example: declared-asset_Storage
	AssetType *[]string `json:"assetType,omitempty"`

	// DomainId Domain to search on
	DomainId *openapi_types.UUID `json:"domainId,omitempty"`

	// HealthStatus List of health status to filter on
	HealthStatus *[]PublicAssetFilterDtoHealthStatus `json:"healthStatus,omitempty"`

	// IngestionMethod List of ingestion methods to filter on
	IngestionMethod *[]PublicAssetFilterDtoIngestionMethod `json:"ingestionMethod,omitempty"`

	// LevelOfUsage List of usage qualifications to filter on
	LevelOfUsage *[]PublicAssetFilterDtoLevelOfUsage `json:"levelOfUsage,omitempty"`

	// Owners List of owners to filter on
	Owners *[]PublicReferenceByIdOrEmailDto `json:"owners,omitempty"`

	// SourceId List of sources to filter on
	SourceId *[]openapi_types.UUID `json:"sourceId,omitempty"`

	// Tags List of tags to filter on
	Tags *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// Terms List of terms to filter on
	Terms *[]PublicReferenceByIdOrNameDto `json:"terms,omitempty"`

	// TextSearch Text to match in the asset names
	TextSearch *string `json:"textSearch,omitempty"`
}

// PublicAssetFilterDtoHealthStatus List of health status to filter on
type PublicAssetFilterDtoHealthStatus string

// PublicAssetFilterDtoIngestionMethod List of ingestion methods to filter on
type PublicAssetFilterDtoIngestionMethod string

// PublicAssetFilterDtoLevelOfUsage List of usage qualifications to filter on
type PublicAssetFilterDtoLevelOfUsage string

// PublicAssetPaginationDto Pagination to apply on the assets search
type PublicAssetPaginationDto struct {
	// ItemsPerPage Number of items per page. Value -1 returns all items.
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`

	// Page Page number. Default value returns first page.
	Page *int32 `json:"page,omitempty"`
}

// PublicAssetSearchCriteriaDto defines model for PublicAssetSearchCriteriaDto.
type PublicAssetSearchCriteriaDto struct {
	// Filter Filter to apply on the assets search
	Filter *PublicAssetFilterDto `json:"filter,omitempty"`

	// Pagination Pagination to apply on the assets search
	Pagination *PublicAssetPaginationDto `json:"pagination,omitempty"`

	// Sort Sort to apply on the assets search. Possible values for field are 'name' and 'relevance'
	Sort *[]string `json:"sort,omitempty"`
}

// PublicAthenaParametersDto defines model for PublicAthenaParametersDto.
type PublicAthenaParametersDto struct {
	// Database Your Athena database name
	Database *string `json:"database,omitempty"`

	// Datasource Your Athena data source name
	Datasource *string `json:"datasource,omitempty"`

	// Region Your Athena instance AWS region
	Region *string `json:"region,omitempty"`

	// RoleArn ARN of the IAM role to use for Athena queries
	RoleArn *string `json:"roleArn,omitempty"`

	// S3OutputLocation The S3 location where Athena query results are stored
	S3OutputLocation *string                       `json:"s3OutputLocation,omitempty"`
	Type             PublicAthenaParametersDtoType `json:"type"`

	// VpcUrl Your VPC URL for Athena connection
	VpcUrl *string `json:"vpcUrl,omitempty"`

	// Workgroup Your Athena workgroup name
	Workgroup *string `json:"workgroup,omitempty"`
}

// PublicAthenaParametersDtoType defines model for PublicAthenaParametersDto.Type.
type PublicAthenaParametersDtoType string

// PublicBigQueryParametersDto defines model for PublicBigQueryParametersDto.
type PublicBigQueryParametersDto struct {
	// BillingProjectId Your billing project ID
	BillingProjectId *string `json:"billingProjectId,omitempty"`

	// DatasetId Your BigQuery dataset ID
	DatasetId *string `json:"datasetId,omitempty"`

	// ProjectId Your BigQuery project ID
	ProjectId *string                         `json:"projectId,omitempty"`
	Type      PublicBigQueryParametersDtoType `json:"type"`
}

// PublicBigQueryParametersDtoType defines model for PublicBigQueryParametersDto.Type.
type PublicBigQueryParametersDtoType string

// PublicCalendarCreateDto defines model for PublicCalendarCreateDto.
type PublicCalendarCreateDto struct {
	Description *string            `json:"description,omitempty"`
	Name        string             `json:"name"`
	Timeslots   []CalendarTimeslot `json:"timeslots"`
}

// PublicCalendarGetDto defines model for PublicCalendarGetDto.
type PublicCalendarGetDto struct {
	Description      *string                               `json:"description"`
	Editable         *bool                                 `json:"editable,omitempty"`
	Id               openapi_types.UUID                    `json:"id"`
	Name             string                                `json:"name"`
	StandardCalendar *PublicCalendarGetDtoStandardCalendar `json:"standardCalendar"`
	Timeslots        []CalendarTimeslot                    `json:"timeslots"`
}

// PublicCalendarGetDtoStandardCalendar defines model for PublicCalendarGetDto.StandardCalendar.
type PublicCalendarGetDtoStandardCalendar string

// PublicCalendarUpdateDto defines model for PublicCalendarUpdateDto.
type PublicCalendarUpdateDto struct {
	Description *string            `json:"description,omitempty"`
	Name        string             `json:"name"`
	Timeslots   []CalendarTimeslot `json:"timeslots"`
}

// PublicCreateSourceDto defines model for PublicCreateSourceDto.
type PublicCreateSourceDto struct {
	// Credentials Credentials of the source. Required for all sources type except 'ATHENA', 'DBT', 'QUICKSIGHT'.
	Credentials *string `json:"credentials,omitempty"`

	// Description Description of the source
	Description *string `json:"description,omitempty"`

	// Name Name of the source
	Name       string                           `json:"name"`
	Parameters PublicCreateSourceDto_Parameters `json:"parameters"`

	// Schedule Schedule of the source. Supports CRON syntax. If empty, the source won't be scheduled.
	Schedule *string                  `json:"schedule,omitempty"`
	Tags     *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// Timezone A string representing a timezone identifier (e.g. 'UTC' or 'Europe/Paris')
	Timezone *string `json:"timezone,omitempty"`
}

// PublicCreateSourceDto_Parameters defines model for PublicCreateSourceDto.Parameters.
type PublicCreateSourceDto_Parameters struct {
	union json.RawMessage
}

// PublicCredentialsCreateDto defines model for PublicCredentialsCreateDto.
type PublicCredentialsCreateDto struct {
	// Description Description of credentials
	Description *string `json:"description,omitempty"`

	// Name Name of credentials. Must start and end with a letter, and contain only letters, digits, and hyphens
	Name string `json:"name"`

	// Value Value of credentials. Double quotes must be escaped with a backslash.
	Value string `json:"value"`
}

// PublicCredentialsGetDto defines model for PublicCredentialsGetDto.
type PublicCredentialsGetDto struct {
	// Description Description of credentials
	Description *string `json:"description,omitempty"`

	// Name Name of credentials
	Name string `json:"name"`
}

// PublicCredentialsPageDtoPublicCredentialsGetDto defines model for PublicCredentialsPageDtoPublicCredentialsGetDto.
type PublicCredentialsPageDtoPublicCredentialsGetDto struct {
	Data []PublicCredentialsGetDto `json:"data"`

	// TotalCount Number of credentials on the account
	TotalCount *int64 `json:"totalCount,omitempty"`
}

// PublicCredentialsPatchDto defines model for PublicCredentialsPatchDto.
type PublicCredentialsPatchDto struct {
	// Description Description of credentials
	Description *string `json:"description,omitempty"`

	// Value Value of credentials. Double quotes must be escaped with a backslash.
	Value *string `json:"value,omitempty"`
}

// PublicDatabricksParametersDto defines model for PublicDatabricksParametersDto.
type PublicDatabricksParametersDto struct {
	// Catalog Your Databricks catalog
	Catalog *string `json:"catalog,omitempty"`

	// Host Your Databricks server hostname
	Host *string `json:"host,omitempty"`

	// HttpPath Your Databricks HTTP path
	HttpPath *string `json:"httpPath,omitempty"`

	// Port Your Databricks server port
	Port *int32 `json:"port,omitempty"`

	// Schema Your Databricks schema
	Schema *string                           `json:"schema,omitempty"`
	Type   PublicDatabricksParametersDtoType `json:"type"`
}

// PublicDatabricksParametersDtoType defines model for PublicDatabricksParametersDto.Type.
type PublicDatabricksParametersDtoType string

// PublicDbtCloudParametersDto defines model for PublicDbtCloudParametersDto.
type PublicDbtCloudParametersDto struct {
	// AccountId Your dbt Cloud account ID
	AccountId *string `json:"accountId,omitempty"`

	// BaseUrl Your dbt Cloud base URL
	BaseUrl *string `json:"baseUrl,omitempty"`

	// JobDefinitionId Your dbt Cloud job ID
	JobDefinitionId *string `json:"jobDefinitionId,omitempty"`

	// ProjectId Your dbt Cloud project ID
	ProjectId *string                         `json:"projectId,omitempty"`
	Type      PublicDbtCloudParametersDtoType `json:"type"`
}

// PublicDbtCloudParametersDtoType defines model for PublicDbtCloudParametersDto.Type.
type PublicDbtCloudParametersDtoType string

// PublicDbtParametersDto defines model for PublicDbtParametersDto.
type PublicDbtParametersDto struct {
	// ProjectName Your dbt project name (the 'name' value in your dbt_project.yml file)
	ProjectName *string `json:"projectName,omitempty"`

	// Target Your dbt target name (the 'target' value in your profiles.yml file)
	Target *string                    `json:"target,omitempty"`
	Type   PublicDbtParametersDtoType `json:"type"`
}

// PublicDbtParametersDtoType defines model for PublicDbtParametersDto.Type.
type PublicDbtParametersDtoType string

// PublicDeclarativeAssetDto Use this parameter to declare assets and their associated links. It is recommended to use the `lineages` object of the `assets` array of objects rather than the `lineages` array of objects for cases where you want to declare assets and their corresponding lineage links.
type PublicDeclarativeAssetDto struct {
	// Description Description of the declared asset
	Description *string `json:"description,omitempty"`

	// Href External link to be associated with the declared asset (e.g. link to your actual BI dashboard, ML model, etc.). This link will show up as a button on your asset page.
	Href *string `json:"href,omitempty"`

	// Lineages Lineage links to be created for the declared asset
	Lineages *PublicDeclarativeLineageListDto `json:"lineages,omitempty"`

	// Name Display name of the declared asset
	Name *string `json:"name,omitempty"`

	// Owners Owners to be associated with the declared asset
	Owners *[]PublicReferenceByIdOrEmailDto `json:"owners,omitempty"`

	// SubType Secondary type of the declared asset. Shows up in the Data Catalog as an additional metadata giving more details about the asset type (e.g. "type": "Dataset", "subType": "View"). "type": "Generic" declared assets will have their subType value added to the Asset type filter category of the Data Catalog.
	SubType *string `json:"subType,omitempty"`

	// Tags Tags to be associated with the declared asset
	Tags *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// Terms Business terms to be associated with the declared asset. Business terms can be referenced either through their `id`, their `name`, or both.
	Terms *[]PublicReferenceByIdOrNameDto `json:"terms,omitempty"`

	// Type Primary type of the declared asset, indicating the overall category the asset falls in.
	// Utilized to know which value the declared asset should be nested in in the Asset type filter category of the Data Catalog. Selecting Generic will result in the subType value being added as a value of this Asset type filter category.
	Type PublicDeclarativeAssetDtoType `json:"type"`

	// Uri URI string identifying the declared asset. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	Uri string `json:"uri"`
}

// PublicDeclarativeAssetDtoType Primary type of the declared asset, indicating the overall category the asset falls in.
// Utilized to know which value the declared asset should be nested in in the Asset type filter category of the Data Catalog. Selecting Generic will result in the subType value being added as a value of this Asset type filter category.
type PublicDeclarativeAssetDtoType string

// PublicDeclarativeLineageDto Use this parameter to declare lineage links between assets. It is recommended to use the `lineages` arrays of objects object rather than the `lineages` object of the `assets` array of objects for cases where you want to declare lineage links between existing assets.
type PublicDeclarativeLineageDto struct {
	// From URI string identifying the upstream asset of the lineage. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	From string `json:"from"`

	// To URI string identifying the downstream asset of the lineage. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	To string `json:"to"`
}

// PublicDeclarativeLineageListDto Lineage links to be created for the declared asset
type PublicDeclarativeLineageListDto struct {
	// From URI strings identifying the upstream assets. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	From *[]string `json:"from,omitempty"`

	// To URI strings identifying the downstream assets. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	To *[]string `json:"to,omitempty"`
}

// PublicDeclarativeParametersDto Parameters of the source
type PublicDeclarativeParametersDto = PublicSourceParametersDto

// PublicDeclarativePayloadDto defines model for PublicDeclarativePayloadDto.
type PublicDeclarativePayloadDto struct {
	// Assets Use this parameter to declare assets and their associated links. It is recommended to use the `lineages` object of the `assets` array of objects rather than the `lineages` array of objects for cases where you want to declare assets and their corresponding lineage links.
	Assets *[]PublicDeclarativeAssetDto `json:"assets,omitempty"`

	// Lineages Use this parameter to declare lineage links between assets. It is recommended to use the `lineages` arrays of objects object rather than the `lineages` object of the `assets` array of objects for cases where you want to declare lineage links between existing assets.
	Lineages *[]PublicDeclarativeLineageDto `json:"lineages,omitempty"`

	// Sources Declaring sources is optional. Declaring a source is useful if you want to attach it specific metadata (e.g. a name, a description, etc.). If no source is declared, Sifflet automatically adds declared assets to sources using declared assets URIs.
	Sources *[]PublicDeclarativeSourceDto `json:"sources,omitempty"`

	// Workspace Name of the workspace containing declared assets and sources. <a href="https://docs.siffletdata.com/docs/declarative-assets#workspaces">[Read more about workspaces]</a>
	Workspace string `json:"workspace"`
}

// PublicDeclarativeSourceDto Declaring sources is optional. Declaring a source is useful if you want to attach it specific metadata (e.g. a name, a description, etc.). If no source is declared, Sifflet automatically adds declared assets to sources using declared assets URIs.
type PublicDeclarativeSourceDto struct {
	// Description Description of the declared source
	Description *string `json:"description,omitempty"`

	// Name Display name of the declared source
	Name string `json:"name"`

	// Tags Tags to be associated with the declared source
	Tags *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// Uri URI string identifying the declared source. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	Uri string `json:"uri"`
}

// PublicDescriptionDto Descriptions of the asset from external providers
type PublicDescriptionDto struct {
	Description *string                     `json:"description,omitempty"`
	Origin      *PublicDescriptionDtoOrigin `json:"origin,omitempty"`
}

// PublicDescriptionDtoOrigin defines model for PublicDescriptionDto.Origin.
type PublicDescriptionDtoOrigin string

// PublicDomainGetDto Domains of the asset
type PublicDomainGetDto struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// PublicFivetranParametersDto defines model for PublicFivetranParametersDto.
type PublicFivetranParametersDto struct {
	// Host Your Fivetran environment URL
	Host *string                         `json:"host,omitempty"`
	Type PublicFivetranParametersDtoType `json:"type"`
}

// PublicFivetranParametersDtoType defines model for PublicFivetranParametersDto.Type.
type PublicFivetranParametersDtoType string

// PublicGetAssetColumnDto Fields of the asset
type PublicGetAssetColumnDto struct {
	// Description Description of the field
	Description *string `json:"description,omitempty"`

	// ExternalDescriptions Descriptions of the field from external providers
	ExternalDescriptions *[]PublicDescriptionDto `json:"externalDescriptions,omitempty"`
	Id                   openapi_types.UUID      `json:"id"`

	// Name Name of the field
	Name string `json:"name"`

	// Tags Tags of the column
	Tags *[]PublicTagReferenceGetDto `json:"tags,omitempty"`

	// Terms Business glossaries of the field
	Terms *[]PublicReferenceByIdOrNameDto `json:"terms,omitempty"`

	// Type Type of the field
	Type string `json:"type"`
}

// PublicGetAssetDto defines model for PublicGetAssetDto.
type PublicGetAssetDto struct {
	// Columns Fields of the asset
	Columns *[]PublicGetAssetColumnDto `json:"columns,omitempty"`

	// Description Description of the asset
	Description *string `json:"description,omitempty"`

	// Domains Domains of the asset
	Domains []PublicDomainGetDto `json:"domains"`

	// ExternalDescriptions Descriptions of the asset from external providers
	ExternalDescriptions *[]PublicDescriptionDto `json:"externalDescriptions,omitempty"`

	// HealthStatus Asset health status
	HealthStatus PublicGetAssetDtoHealthStatus `json:"healthStatus"`
	Id           openapi_types.UUID            `json:"id"`

	// IngestionMethod Ingestion method of the asset
	IngestionMethod PublicGetAssetDtoIngestionMethod `json:"ingestionMethod"`

	// Name Name of the asset
	Name string `json:"name"`

	// Owners Owners of the asset
	Owners *[]PublicReferenceByIdOrEmailDto `json:"owners,omitempty"`

	// Tags Tags of the asset
	Tags *[]PublicTagReferenceGetDto `json:"tags,omitempty"`

	// Technology Technology of the asset
	Technology PublicGetAssetDtoTechnology `json:"technology"`

	// Terms Business glossaries of the asset
	Terms *[]PublicReferenceByIdOrNameDto `json:"terms,omitempty"`

	// TransformationRun Transformation associated to the asset
	TransformationRun *PublicTransformationRunDto `json:"transformationRun,omitempty"`

	// Type Type of the asset
	Type PublicGetAssetDtoType `json:"type"`

	// Uri URI string identifying the asset. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	Uri string `json:"uri"`

	// Urn Internal Sifflet identifier for the asset
	Urn string `json:"urn"`

	// Usage Usage level of the asset
	Usage PublicGetAssetDtoUsage `json:"usage"`
}

// PublicGetAssetDtoHealthStatus Asset health status
type PublicGetAssetDtoHealthStatus string

// PublicGetAssetDtoIngestionMethod Ingestion method of the asset
type PublicGetAssetDtoIngestionMethod string

// PublicGetAssetDtoTechnology Technology of the asset
type PublicGetAssetDtoTechnology string

// PublicGetAssetDtoType Type of the asset
type PublicGetAssetDtoType string

// PublicGetAssetDtoUsage Usage level of the asset
type PublicGetAssetDtoUsage string

// PublicGetAssetListDto defines model for PublicGetAssetListDto.
type PublicGetAssetListDto struct {
	// Description Description of the asset
	Description *string `json:"description,omitempty"`

	// ExternalDescriptions Descriptions of the asset from external providers
	ExternalDescriptions *[]PublicDescriptionDto `json:"externalDescriptions,omitempty"`

	// HealthStatus Asset health status
	HealthStatus PublicGetAssetListDtoHealthStatus `json:"healthStatus"`
	Id           openapi_types.UUID                `json:"id"`

	// IngestionMethod Ingestion method of the asset
	IngestionMethod PublicGetAssetListDtoIngestionMethod `json:"ingestionMethod"`

	// Name Name of the asset
	Name string `json:"name"`

	// Owners Owners of the asset
	Owners *[]PublicReferenceByIdOrEmailDto `json:"owners,omitempty"`

	// Tags Tags of the asset
	Tags *[]PublicTagReferenceGetDto `json:"tags,omitempty"`

	// Technology Technology of the asset
	Technology PublicGetAssetListDtoTechnology `json:"technology"`

	// Terms Business glossaries of the asset
	Terms *[]PublicReferenceByIdOrNameDto `json:"terms,omitempty"`

	// TransformationRun Transformation associated to the asset
	TransformationRun *PublicTransformationRunDto `json:"transformationRun,omitempty"`

	// Type Type of the asset
	Type PublicGetAssetListDtoType `json:"type"`

	// Uri URI string identifying the asset. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	Uri string `json:"uri"`

	// Urn Internal Sifflet identifier for the asset
	Urn string `json:"urn"`

	// Usage Usage level of the asset
	Usage PublicGetAssetListDtoUsage `json:"usage"`
}

// PublicGetAssetListDtoHealthStatus Asset health status
type PublicGetAssetListDtoHealthStatus string

// PublicGetAssetListDtoIngestionMethod Ingestion method of the asset
type PublicGetAssetListDtoIngestionMethod string

// PublicGetAssetListDtoTechnology Technology of the asset
type PublicGetAssetListDtoTechnology string

// PublicGetAssetListDtoType Type of the asset
type PublicGetAssetListDtoType string

// PublicGetAssetListDtoUsage Usage level of the asset
type PublicGetAssetListDtoUsage string

// PublicGetAssetRequestDto defines model for PublicGetAssetRequestDto.
type PublicGetAssetRequestDto struct {
	// Uri URI string identifying the asset. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	Uri string `json:"uri"`
}

// PublicGetLastRunDto Information about the last run of the source
type PublicGetLastRunDto struct {
	// Status Last run status of the source
	Status *PublicGetLastRunDtoStatus `json:"status,omitempty"`

	// Timestamp Timestamp of the last update of the source
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// PublicGetLastRunDtoStatus Last run status of the source
type PublicGetLastRunDtoStatus string

// PublicGetSourceDto defines model for PublicGetSourceDto.
type PublicGetSourceDto struct {
	// Credentials Credentials of the source
	Credentials *string `json:"credentials,omitempty"`

	// Description Description of the source
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`

	// LastRun Information about the last run of the source
	LastRun *PublicGetLastRunDto `json:"lastRun,omitempty"`

	// Name Name of the source
	Name       string                        `json:"name"`
	Parameters PublicGetSourceDto_Parameters `json:"parameters"`

	// Schedule Schedule of the source. Supports CRON syntax. If empty, the source won't be scheduled.
	Schedule *string `json:"schedule,omitempty"`

	// Tags Tags of the source
	Tags *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// Timezone A string representing a timezone identifier (e.g. 'UTC' or 'Europe/Paris')
	Timezone *string `json:"timezone,omitempty"`
}

// PublicGetSourceDto_Parameters defines model for PublicGetSourceDto.Parameters.
type PublicGetSourceDto_Parameters struct {
	union json.RawMessage
}

// PublicLookerParametersDto defines model for PublicLookerParametersDto.
type PublicLookerParametersDto struct {
	// GitConnections The LookML configuration. See https://docs.siffletdata.com/docs/looker. If you don't use LookML, use an empty list `[]`
	GitConnections *[]GitConnection `json:"gitConnections,omitempty"`

	// Host URL of the Looker site and append at the end the following "/api/4.0".
	// For instance if you usually connect to Looker on "https://abcdef.cloud.looker.com/",
	//  then you should add the following on host: "https://abcdef.cloud.looker.com/api/4.0"
	Host *string                       `json:"host,omitempty"`
	Type PublicLookerParametersDtoType `json:"type"`
}

// PublicLookerParametersDtoType defines model for PublicLookerParametersDto.Type.
type PublicLookerParametersDtoType string

// PublicMssqlParametersDto defines model for PublicMssqlParametersDto.
type PublicMssqlParametersDto struct {
	// Database Your database name
	Database *string `json:"database,omitempty"`

	// Host Your MSSQL server hostname
	Host *string `json:"host,omitempty"`

	// Port Your MSSQL server port
	Port *int32 `json:"port,omitempty"`

	// Schema Your schema name
	Schema *string `json:"schema,omitempty"`

	// Ssl Whether to use SSL to connect to your MSSQL server
	Ssl  *bool                        `json:"ssl,omitempty"`
	Type PublicMssqlParametersDtoType `json:"type"`
}

// PublicMssqlParametersDtoType defines model for PublicMssqlParametersDto.Type.
type PublicMssqlParametersDtoType string

// PublicMysqlParametersDto defines model for PublicMysqlParametersDto.
type PublicMysqlParametersDto struct {
	// Database Your database name
	Database *string `json:"database,omitempty"`

	// Host Your MySQL server hostname
	Host *string `json:"host,omitempty"`

	// MysqlTlsVersion The TLS version to use to connect to your MySQL server
	MysqlTlsVersion *PublicMysqlParametersDtoMysqlTlsVersion `json:"mysqlTlsVersion,omitempty"`

	// Port Your MySQL server port
	Port *int32                       `json:"port,omitempty"`
	Type PublicMysqlParametersDtoType `json:"type"`
}

// PublicMysqlParametersDtoMysqlTlsVersion The TLS version to use to connect to your MySQL server
type PublicMysqlParametersDtoMysqlTlsVersion string

// PublicMysqlParametersDtoType defines model for PublicMysqlParametersDto.Type.
type PublicMysqlParametersDtoType string

// PublicOracleParametersDto defines model for PublicOracleParametersDto.
type PublicOracleParametersDto struct {
	// Database Your database name
	Database *string `json:"database,omitempty"`

	// Host Your Oracle server hostname
	Host *string `json:"host,omitempty"`

	// Port Your Oracle server port
	Port *int32 `json:"port,omitempty"`

	// Schema Your schema name
	Schema *string                       `json:"schema,omitempty"`
	Type   PublicOracleParametersDtoType `json:"type"`
}

// PublicOracleParametersDtoType defines model for PublicOracleParametersDto.Type.
type PublicOracleParametersDtoType string

// PublicPageDtoPublicCalendarGetDto defines model for PublicPageDtoPublicCalendarGetDto.
type PublicPageDtoPublicCalendarGetDto struct {
	Data       []PublicCalendarGetDto `json:"data"`
	TotalCount *int64                 `json:"totalCount,omitempty"`
}

// PublicPageDtoPublicGetAssetListDto defines model for PublicPageDtoPublicGetAssetListDto.
type PublicPageDtoPublicGetAssetListDto struct {
	Data       []PublicGetAssetListDto `json:"data"`
	TotalCount *int64                  `json:"totalCount,omitempty"`
}

// PublicPageDtoPublicGetSourceDto defines model for PublicPageDtoPublicGetSourceDto.
type PublicPageDtoPublicGetSourceDto struct {
	Data       []PublicGetSourceDto `json:"data"`
	TotalCount *int64               `json:"totalCount,omitempty"`
}

// PublicPageDtoPublicUserGetDto defines model for PublicPageDtoPublicUserGetDto.
type PublicPageDtoPublicUserGetDto struct {
	Data       []PublicUserGetDto `json:"data"`
	TotalCount *int64             `json:"totalCount,omitempty"`
}

// PublicPostgresqlParametersDto defines model for PublicPostgresqlParametersDto.
type PublicPostgresqlParametersDto struct {
	// Database Your database name
	Database *string `json:"database,omitempty"`

	// Host Your PostgreSQL server host
	Host *string `json:"host,omitempty"`

	// Port Your PostgreSQL server port
	Port *int32 `json:"port,omitempty"`

	// Schema Your schema name
	Schema *string                           `json:"schema,omitempty"`
	Type   PublicPostgresqlParametersDtoType `json:"type"`
}

// PublicPostgresqlParametersDtoType defines model for PublicPostgresqlParametersDto.Type.
type PublicPostgresqlParametersDtoType string

// PublicPowerBiParametersDto defines model for PublicPowerBiParametersDto.
type PublicPowerBiParametersDto struct {
	// ClientId Your Azure AD client ID
	ClientId *string `json:"clientId,omitempty"`

	// TenantId Your Azure AD tenant ID
	TenantId *string                        `json:"tenantId,omitempty"`
	Type     PublicPowerBiParametersDtoType `json:"type"`

	// WorkspaceId Your Power BI workspace ID
	WorkspaceId *string `json:"workspaceId,omitempty"`
}

// PublicPowerBiParametersDtoType defines model for PublicPowerBiParametersDto.Type.
type PublicPowerBiParametersDtoType string

// PublicQuicksightParametersDto defines model for PublicQuicksightParametersDto.
type PublicQuicksightParametersDto struct {
	// AccountId Your AWS account ID
	AccountId *string `json:"accountId,omitempty"`

	// AwsRegion Your AWS region
	AwsRegion *string `json:"awsRegion,omitempty"`

	// RoleArn The ARN for your QuickSight role
	RoleArn *string                           `json:"roleArn,omitempty"`
	Type    PublicQuicksightParametersDtoType `json:"type"`
}

// PublicQuicksightParametersDtoType defines model for PublicQuicksightParametersDto.Type.
type PublicQuicksightParametersDtoType string

// PublicRedshiftParametersDto defines model for PublicRedshiftParametersDto.
type PublicRedshiftParametersDto struct {
	// Database Your database name
	Database *string `json:"database,omitempty"`

	// Host Your Redshift server host
	Host *string `json:"host,omitempty"`

	// Port Your Redshift server port
	Port *int32 `json:"port,omitempty"`

	// Schema Your schema name
	Schema *string `json:"schema,omitempty"`

	// Ssl Whether to use SSL to connect to your Redshift server
	Ssl  *bool                           `json:"ssl,omitempty"`
	Type PublicRedshiftParametersDtoType `json:"type"`
}

// PublicRedshiftParametersDtoType defines model for PublicRedshiftParametersDto.Type.
type PublicRedshiftParametersDtoType string

// PublicReferenceByIdOrEmailDto Id or email reference to an owner
type PublicReferenceByIdOrEmailDto struct {
	// Email Email of the referenced owner
	Email *string `json:"email,omitempty"`

	// Id Id of the referenced owner
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// PublicReferenceByIdOrNameDto Id or name reference to an object
type PublicReferenceByIdOrNameDto struct {
	// Id Id of the referenced object
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the referenced object
	Name *string `json:"name,omitempty"`
}

// PublicSnowflakeParametersDto defines model for PublicSnowflakeParametersDto.
type PublicSnowflakeParametersDto struct {
	// AccountIdentifier Your Snowflake account identifier
	AccountIdentifier *string `json:"accountIdentifier,omitempty"`

	// Database Your database name
	Database *string `json:"database,omitempty"`

	// Schema Your schema name
	Schema *string                          `json:"schema,omitempty"`
	Type   PublicSnowflakeParametersDtoType `json:"type"`

	// Warehouse Your Snowflake warehouse
	Warehouse *string `json:"warehouse,omitempty"`
}

// PublicSnowflakeParametersDtoType defines model for PublicSnowflakeParametersDto.Type.
type PublicSnowflakeParametersDtoType string

// PublicSourceFilterDto Filter to apply on the sources search
type PublicSourceFilterDto struct {
	// Tags List of tags to filter on
	Tags *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// TextSearch Text to search in the name of the sources
	TextSearch *string `json:"textSearch,omitempty"`

	// Types List of source types to filter on
	Types *[]PublicSourceFilterDtoTypes `json:"types,omitempty"`
}

// PublicSourceFilterDtoTypes List of source types to filter on
type PublicSourceFilterDtoTypes string

// PublicSourcePaginationDto Pagination to apply on the sources search
type PublicSourcePaginationDto struct {
	// ItemsPerPage Default value returns all items.
	ItemsPerPage *int32 `json:"itemsPerPage,omitempty"`
	Page         *int32 `json:"page,omitempty"`
}

// PublicSourceParametersDto Parameters of the source
type PublicSourceParametersDto struct {
	Type PublicSourceParametersDtoType `json:"type"`
}

// PublicSourceParametersDtoType defines model for PublicSourceParametersDto.Type.
type PublicSourceParametersDtoType string

// PublicSourceSearchCriteriaDto defines model for PublicSourceSearchCriteriaDto.
type PublicSourceSearchCriteriaDto struct {
	// Filter Filter to apply on the sources search
	Filter *PublicSourceFilterDto `json:"filter,omitempty"`

	// Pagination Pagination to apply on the sources search
	Pagination *PublicSourcePaginationDto `json:"pagination,omitempty"`

	// Sort Sort to apply on the sources search
	Sort *[]string `json:"sort,omitempty"`
}

// PublicSynapseParametersDto defines model for PublicSynapseParametersDto.
type PublicSynapseParametersDto struct {
	// Database Your database name
	Database *string `json:"database,omitempty"`

	// Host The host of your Synapse server
	Host *string `json:"host,omitempty"`

	// Port Your Synapse server port
	Port *int32 `json:"port,omitempty"`

	// Schema Your schema name
	Schema *string                        `json:"schema,omitempty"`
	Type   PublicSynapseParametersDtoType `json:"type"`
}

// PublicSynapseParametersDtoType defines model for PublicSynapseParametersDto.Type.
type PublicSynapseParametersDtoType string

// PublicTableauParametersDto defines model for PublicTableauParametersDto.
type PublicTableauParametersDto struct {
	// Host Your Tableau Server hostname
	Host *string `json:"host,omitempty"`

	// Site Your Tableau Server site. Leave empty if your Tableau environment is using the Default Site.
	Site *string                        `json:"site,omitempty"`
	Type PublicTableauParametersDtoType `json:"type"`
}

// PublicTableauParametersDtoType defines model for PublicTableauParametersDto.Type.
type PublicTableauParametersDtoType string

// PublicTagReferenceDto Tags of the source. A tag can either be referenced by its id or its name or its name and kind.
type PublicTagReferenceDto struct {
	// Id Id of the referenced object
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Kind Type of the referenced tag
	Kind *PublicTagReferenceDtoKind `json:"kind,omitempty"`

	// Name Name of the referenced object
	Name *string `json:"name,omitempty"`
}

// PublicTagReferenceDtoKind Type of the referenced tag
type PublicTagReferenceDtoKind string

// PublicTagReferenceGetDto Tags of the asset
type PublicTagReferenceGetDto struct {
	// Id Id of the referenced object
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Kind Type of the referenced tag
	Kind *PublicTagReferenceGetDtoKind `json:"kind,omitempty"`

	// Name Name of the referenced object
	Name *string `json:"name,omitempty"`
}

// PublicTagReferenceGetDtoKind Type of the referenced tag
type PublicTagReferenceGetDtoKind string

// PublicTransformationRunDto Transformation associated to the asset
type PublicTransformationRunDto struct {
	// LastRunDate Last run date of the transformation
	LastRunDate *int64 `json:"lastRunDate,omitempty"`

	// LastRunStatus Last run status of the transformation
	LastRunStatus *PublicTransformationRunDtoLastRunStatus `json:"lastRunStatus,omitempty"`

	// Type Type of the transformation
	Type *string `json:"type,omitempty"`
}

// PublicTransformationRunDtoLastRunStatus Last run status of the transformation
type PublicTransformationRunDtoLastRunStatus string

// PublicUpdateAssetColumnDto Fields of the asset
type PublicUpdateAssetColumnDto struct {
	// Description Description of the field
	Description *string `json:"description,omitempty"`

	// Name Name of the field
	Name string `json:"name"`

	// Tags Tags of the field
	Tags *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// Terms Terms of the field
	Terms *[]PublicReferenceByIdOrNameDto `json:"terms,omitempty"`
}

// PublicUpdateAssetDto defines model for PublicUpdateAssetDto.
type PublicUpdateAssetDto struct {
	// Columns Fields of the asset
	Columns *[]PublicUpdateAssetColumnDto `json:"columns,omitempty"`

	// Description Description of the asset
	Description *string `json:"description,omitempty"`

	// Owners Owners of the asset
	Owners *[]PublicReferenceByIdOrEmailDto `json:"owners,omitempty"`
	Tags   *[]PublicTagReferenceDto         `json:"tags,omitempty"`

	// Terms Terms of the asset
	Terms *[]PublicReferenceByIdOrNameDto `json:"terms,omitempty"`

	// Uri URI string identifying the asset. <a href="https://docs.siffletdata.com/docs/uris">[Read more about URIs]</a>
	Uri string `json:"uri"`
}

// PublicUpdateSourceDto defines model for PublicUpdateSourceDto.
type PublicUpdateSourceDto struct {
	// Credentials Credentials of the source. Required for all sources type except 'ATHENA', 'DBT', 'QUICKSIGHT'.
	Credentials *string `json:"credentials,omitempty"`

	// Description Description of the source
	Description *string `json:"description,omitempty"`

	// Name Name of the source
	Name       *string                           `json:"name,omitempty"`
	Parameters *PublicUpdateSourceDto_Parameters `json:"parameters,omitempty"`

	// Schedule Schedule of the source. Supports CRON syntax. If empty, the source won't be scheduled.
	Schedule *string                  `json:"schedule,omitempty"`
	Tags     *[]PublicTagReferenceDto `json:"tags,omitempty"`

	// Timezone A string representing a timezone identifier (e.g. 'UTC' or 'Europe/Paris')
	Timezone *string `json:"timezone,omitempty"`
}

// PublicUpdateSourceDto_Parameters defines model for PublicUpdateSourceDto.Parameters.
type PublicUpdateSourceDto_Parameters struct {
	union json.RawMessage
}

// PublicUserCreateDto defines model for PublicUserCreateDto.
type PublicUserCreateDto struct {
	AuthTypes   *[]PublicUserCreateDtoAuthTypes     `json:"authTypes,omitempty"`
	Email       string                              `json:"email"`
	Name        string                              `json:"name"`
	Permissions []PublicUserPermissionAssignmentDto `json:"permissions"`
	Role        PublicUserCreateDtoRole             `json:"role"`
}

// PublicUserCreateDtoAuthTypes defines model for PublicUserCreateDto.AuthTypes.
type PublicUserCreateDtoAuthTypes string

// PublicUserCreateDtoRole defines model for PublicUserCreateDto.Role.
type PublicUserCreateDtoRole string

// PublicUserGetDto defines model for PublicUserGetDto.
type PublicUserGetDto struct {
	AuthTypes   []PublicUserGetDtoAuthTypes         `json:"authTypes"`
	Email       string                              `json:"email"`
	Id          openapi_types.UUID                  `json:"id"`
	Name        string                              `json:"name"`
	Permissions []PublicUserPermissionAssignmentDto `json:"permissions"`
	Role        PublicUserGetDtoRole                `json:"role"`
}

// PublicUserGetDtoAuthTypes defines model for PublicUserGetDto.AuthTypes.
type PublicUserGetDtoAuthTypes string

// PublicUserGetDtoRole defines model for PublicUserGetDto.Role.
type PublicUserGetDtoRole string

// PublicUserPermissionAssignmentDto defines model for PublicUserPermissionAssignmentDto.
type PublicUserPermissionAssignmentDto struct {
	DomainId   openapi_types.UUID                           `json:"domainId"`
	DomainRole *PublicUserPermissionAssignmentDtoDomainRole `json:"domainRole,omitempty"`
}

// PublicUserPermissionAssignmentDtoDomainRole defines model for PublicUserPermissionAssignmentDto.DomainRole.
type PublicUserPermissionAssignmentDtoDomainRole string

// PublicUserResetPasswordDto defines model for PublicUserResetPasswordDto.
type PublicUserResetPasswordDto struct {
	Password string `json:"password"`
}

// PublicUserUpdateDto defines model for PublicUserUpdateDto.
type PublicUserUpdateDto struct {
	AuthTypes   *[]PublicUserUpdateDtoAuthTypes     `json:"authTypes,omitempty"`
	Name        string                              `json:"name"`
	Permissions []PublicUserPermissionAssignmentDto `json:"permissions"`
	Role        PublicUserUpdateDtoRole             `json:"role"`
}

// PublicUserUpdateDtoAuthTypes defines model for PublicUserUpdateDto.AuthTypes.
type PublicUserUpdateDtoAuthTypes string

// PublicUserUpdateDtoRole defines model for PublicUserUpdateDto.Role.
type PublicUserUpdateDtoRole string

// RuleCatalogAssetDto defines model for RuleCatalogAssetDto.
type RuleCatalogAssetDto struct {
	CanManuallyRun              bool                              `json:"canManuallyRun"`
	CreatedBy                   *UserDto                          `json:"createdBy,omitempty"`
	Criticality                 int32                             `json:"criticality"`
	DatasetFieldNames           []string                          `json:"datasetFieldNames"`
	Datasets                    []DatasetBriefWithUriDto          `json:"datasets"`
	Description                 *string                           `json:"description,omitempty"`
	HasAiRecommendations        bool                              `json:"hasAiRecommendations"`
	Id                          openapi_types.UUID                `json:"id"`
	LastRunId                   *openapi_types.UUID               `json:"lastRunId"`
	LastRunStatus               *LastRunStatusDto                 `json:"lastRunStatus,omitempty"`
	LastWeekStatuses            []LastRunStatusDto                `json:"lastWeekStatuses"`
	Mails                       []AlertingHookDto                 `json:"mails"`
	MsTeams                     []AlertingHookDto                 `json:"msTeams"`
	MultiDimensional            bool                              `json:"multiDimensional"`
	Name                        string                            `json:"name"`
	Provider                    *RuleCatalogAssetDto_Provider     `json:"provider,omitempty"`
	ReadOnly                    bool                              `json:"readOnly"`
	RuleLabel                   *string                           `json:"ruleLabel,omitempty"`
	RuleStatus                  RuleStatusDto                     `json:"ruleStatus"`
	RuleType                    RuleCatalogAssetDtoRuleType       `json:"ruleType"`
	Schedule                    *string                           `json:"schedule,omitempty"`
	Selectable                  bool                              `json:"selectable"`
	SlackChannels               []AlertingHookDto                 `json:"slackChannels"`
	SourcePlatform              RuleCatalogAssetDtoSourcePlatform `json:"sourcePlatform"`
	SupportAsCodeYAMLConversion bool                              `json:"supportAsCodeYAMLConversion"`
	Tags                        []TagDto                          `json:"tags"`
	Terms                       []TagDto                          `json:"terms"`
}

// RuleCatalogAssetDto_Provider defines model for RuleCatalogAssetDto.Provider.
type RuleCatalogAssetDto_Provider struct {
	union json.RawMessage
}

// RuleCatalogAssetDtoRuleType defines model for RuleCatalogAssetDto.RuleType.
type RuleCatalogAssetDtoRuleType string

// RuleCatalogAssetDtoSourcePlatform defines model for RuleCatalogAssetDto.SourcePlatform.
type RuleCatalogAssetDtoSourcePlatform string

// RuleDetailsDto defines model for RuleDetailsDto.
type RuleDetailsDto struct {
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	CreatedBy         *string                          `json:"createdBy"`
	CreatedByProvider RuleDetailsDto_CreatedByProvider `json:"createdByProvider"`
	CreatedDate       *int64                           `json:"createdDate"`
	LastModifiedDate  *int64                           `json:"lastModifiedDate"`
	Mails             []AlertingHookDto                `json:"mails"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	ModifiedBy         *string                           `json:"modifiedBy"`
	ModifiedByProvider RuleDetailsDto_ModifiedByProvider `json:"modifiedByProvider"`
	MsTeams            []AlertingHookDto                 `json:"msTeams"`
	Provider           RuleDetailsDto_Provider           `json:"provider"`
	RuleParams         *JsonNode                         `json:"ruleParams,omitempty"`
	SlackChannels      []AlertingHookDto                 `json:"slackChannels"`
	Tags               []TagDto                          `json:"tags"`
	Terms              []TagDto                          `json:"terms"`
	Webhooks           []AlertingHookDto                 `json:"webhooks"`
}

// RuleDetailsDto_CreatedByProvider defines model for RuleDetailsDto.CreatedByProvider.
type RuleDetailsDto_CreatedByProvider struct {
	union json.RawMessage
}

// RuleDetailsDto_ModifiedByProvider defines model for RuleDetailsDto.ModifiedByProvider.
type RuleDetailsDto_ModifiedByProvider struct {
	union json.RawMessage
}

// RuleDetailsDto_Provider defines model for RuleDetailsDto.Provider.
type RuleDetailsDto_Provider struct {
	union json.RawMessage
}

// RuleInfoDto defines model for RuleInfoDto.
type RuleInfoDto struct {
	CanBeQualified bool               `json:"canBeQualified"`
	CanBeScheduled bool               `json:"canBeScheduled"`
	CanManuallyRun bool               `json:"canManuallyRun"`
	Criticality    Criticality        `json:"criticality"`
	Datasets       *[]DatasetBriefDto `json:"datasets,omitempty"`
	Id             openapi_types.UUID `json:"id"`
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	LastRunStatus               *RuleInfoDtoLastRunStatus `json:"lastRunStatus,omitempty"`
	LastRunTimestamp            *int64                    `json:"lastRunTimestamp,omitempty"`
	LastUnresolvedIncident      *IncidentLightDto         `json:"lastUnresolvedIncident,omitempty"`
	Mails                       *[]AlertingHookDto        `json:"mails,omitempty"`
	MsTeams                     *[]AlertingHookDto        `json:"msTeams,omitempty"`
	Muted                       *bool                     `json:"muted,omitempty"`
	Name                        string                    `json:"name"`
	ReadOnly                    bool                      `json:"readOnly"`
	RuleLabel                   string                    `json:"ruleLabel"`
	RuleStatus                  RuleInfoDtoRuleStatus     `json:"ruleStatus"`
	RuleTemplateName            string                    `json:"ruleTemplateName"`
	Schedule                    *string                   `json:"schedule,omitempty"`
	ScheduleTimezone            *TimeZoneDto              `json:"scheduleTimezone,omitempty"`
	SlackChannels               *[]AlertingHookDto        `json:"slackChannels,omitempty"`
	SourcePlatform              RuleInfoDtoSourcePlatform `json:"sourcePlatform"`
	SupportAsCodeYAMLConversion bool                      `json:"supportAsCodeYAMLConversion"`
	Tags                        *[]TagDto                 `json:"tags,omitempty"`
	UnresolvedIncidents         int32                     `json:"unresolvedIncidents"`
	Workspace                   *WorkspaceDto             `json:"workspace,omitempty"`
}

// RuleInfoDtoLastRunStatus defines model for RuleInfoDto.LastRunStatus.
type RuleInfoDtoLastRunStatus string

// RuleInfoDtoRuleStatus defines model for RuleInfoDto.RuleStatus.
type RuleInfoDtoRuleStatus string

// RuleInfoDtoSourcePlatform defines model for RuleInfoDto.SourcePlatform.
type RuleInfoDtoSourcePlatform string

// RuleOverviewDto defines model for RuleOverviewDto.
type RuleOverviewDto struct {
	Description *string `json:"description,omitempty"`
}

// RuleRunDto defines model for RuleRunDto.
type RuleRunDto struct {
	CanShowFailingRows bool                      `json:"canShowFailingRows"`
	CreatedBy          *string                   `json:"createdBy,omitempty"`
	CreatedDate        *int64                    `json:"createdDate,omitempty"`
	DebugSql           *ParameterizedQueryDto    `json:"debugSql,omitempty"`
	Debuggable         bool                      `json:"debuggable"`
	EndDate            *int64                    `json:"endDate,omitempty"`
	HasGraph           bool                      `json:"hasGraph"`
	HasGroupBy         bool                      `json:"hasGroupBy"`
	Id                 openapi_types.UUID        `json:"id"`
	IncidentIssue      *int32                    `json:"incidentIssue,omitempty"`
	IncidentName       *string                   `json:"incidentName,omitempty"`
	IncidentStatus     *RuleRunDtoIncidentStatus `json:"incidentStatus,omitempty"`
	Result             *string                   `json:"result,omitempty"`
	RuleId             *openapi_types.UUID       `json:"ruleId,omitempty"`
	StartDate          *int64                    `json:"startDate,omitempty"`
	Status             *RuleRunDtoStatus         `json:"status,omitempty"`
	Type               *RuleRunDtoType           `json:"type,omitempty"`
	Values             *RuleRunValuesDto         `json:"values,omitempty"`
}

// RuleRunDtoIncidentStatus defines model for RuleRunDto.IncidentStatus.
type RuleRunDtoIncidentStatus string

// RuleRunDtoStatus defines model for RuleRunDto.Status.
type RuleRunDtoStatus string

// RuleRunDtoType defines model for RuleRunDto.Type.
type RuleRunDtoType string

// RuleRunExpectedValuesDto defines model for RuleRunExpectedValuesDto.
type RuleRunExpectedValuesDto struct {
	Max *float32 `json:"max,omitempty"`
	Min *float32 `json:"min,omitempty"`
}

// RuleRunValuesDto defines model for RuleRunValuesDto.
type RuleRunValuesDto struct {
	Actual   *float32                  `json:"actual,omitempty"`
	Expected *RuleRunExpectedValuesDto `json:"expected,omitempty"`
}

// RuleStatusDto defines model for RuleStatusDto.
type RuleStatusDto struct {
	LatestRunDate *int64                  `json:"latestRunDate,omitempty"`
	RuleStatus    RuleStatusDtoRuleStatus `json:"ruleStatus"`
}

// RuleStatusDtoRuleStatus defines model for RuleStatusDto.RuleStatus.
type RuleStatusDtoRuleStatus string

// SearchCollectionRuleCatalogAssetDto defines model for SearchCollectionRuleCatalogAssetDto.
type SearchCollectionRuleCatalogAssetDto struct {
	Data          []RuleCatalogAssetDto `json:"data"`
	TotalElements *int64                `json:"totalElements,omitempty"`
}

// SearchCollectionRuleRunDto defines model for SearchCollectionRuleRunDto.
type SearchCollectionRuleRunDto struct {
	Data          []RuleRunDto `json:"data"`
	TotalElements *int64       `json:"totalElements,omitempty"`
}

// TagDto defines model for TagDto.
type TagDto struct {
	CreatedBy        *string            `json:"createdBy,omitempty"`
	CreatedDate      *int64             `json:"createdDate,omitempty"`
	Description      *string            `json:"description,omitempty"`
	Editable         *bool              `json:"editable,omitempty"`
	Id               openapi_types.UUID `json:"id"`
	LastModifiedDate *int64             `json:"lastModifiedDate,omitempty"`
	ModifiedBy       *string            `json:"modifiedBy,omitempty"`
	Name             string             `json:"name"`
	Type             TagDtoType         `json:"type"`
}

// TagDtoType defines model for TagDto.Type.
type TagDtoType string

// TimeZoneDto defines model for TimeZoneDto.
type TimeZoneDto struct {
	Timezone  string `json:"timezone"`
	UtcOffset string `json:"utcOffset"`
}

// UserDto defines model for UserDto.
type UserDto struct {
	Id    *openapi_types.UUID `json:"id,omitempty"`
	Login *string             `json:"login,omitempty"`
	Name  *string             `json:"name,omitempty"`
}

// UserProviderDto defines model for UserProviderDto.
type UserProviderDto struct {
	Name *string              `json:"name,omitempty"`
	Type *UserProviderDtoType `json:"type,omitempty"`
}

// UserProviderDtoType defines model for UserProviderDto.Type.
type UserProviderDtoType string

// WorkspaceApplyObjectResponseDto defines model for WorkspaceApplyObjectResponseDto.
type WorkspaceApplyObjectResponseDto struct {
	Change    *ChangeDto                                `json:"change,omitempty"`
	Id        *openapi_types.UUID                       `json:"id,omitempty"`
	Kind      *string                                   `json:"kind,omitempty"`
	Logs      *[]LogDto                                 `json:"logs,omitempty"`
	Status    *WorkspaceApplyObjectResponseDtoStatus    `json:"status,omitempty"`
	SubStatus *WorkspaceApplyObjectResponseDtoSubStatus `json:"subStatus,omitempty"`
}

// WorkspaceApplyObjectResponseDtoStatus defines model for WorkspaceApplyObjectResponseDto.Status.
type WorkspaceApplyObjectResponseDtoStatus string

// WorkspaceApplyObjectResponseDtoSubStatus defines model for WorkspaceApplyObjectResponseDto.SubStatus.
type WorkspaceApplyObjectResponseDtoSubStatus string

// WorkspaceApplyResponseDto defines model for WorkspaceApplyResponseDto.
type WorkspaceApplyResponseDto struct {
	Changes *[]WorkspaceApplyObjectResponseDto `json:"changes,omitempty"`
}

// WorkspaceDto defines model for WorkspaceDto.
type WorkspaceDto struct {
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
}

// PublicSyncAssetsParams defines parameters for PublicSyncAssets.
type PublicSyncAssetsParams struct {
	DryRun *bool `form:"dryRun,omitempty" json:"dryRun,omitempty"`
}

// PublicDeleteWorkspaceParams defines parameters for PublicDeleteWorkspace.
type PublicDeleteWorkspaceParams struct {
	DryRun *bool `form:"dryRun,omitempty" json:"dryRun,omitempty"`
}

// UploadDbtMetadataFilesMultipartBody defines parameters for UploadDbtMetadataFiles.
type UploadDbtMetadataFilesMultipartBody struct {
	Catalog    *openapi_types.File `json:"catalog,omitempty"`
	Manifest   *openapi_types.File `json:"manifest,omitempty"`
	RunResults *openapi_types.File `json:"run_results,omitempty"`
}

// GetAllRuleParams defines parameters for GetAllRule.
type GetAllRuleParams struct {
	// TextSearch Global text search
	TextSearch *string `form:"textSearch,omitempty" json:"textSearch,omitempty"`

	// RuleTemplateName Filter on given rule template name
	RuleTemplateName *[]string `form:"ruleTemplateName,omitempty" json:"ruleTemplateName,omitempty"`

	// LastRunStatus Filter on given last run statuses
	LastRunStatus *[]GetAllRuleParamsLastRunStatus `form:"lastRunStatus,omitempty" json:"lastRunStatus,omitempty"`

	// RuleStatus Filter on given rule status
	RuleStatus *[]GetAllRuleParamsRuleStatus `form:"ruleStatus,omitempty" json:"ruleStatus,omitempty"`

	// Dataset Filter on given dataset ids
	Dataset *[]openapi_types.UUID `form:"dataset,omitempty" json:"dataset,omitempty"`

	// Tag Filter on given tag ids
	Tag *[]openapi_types.UUID `form:"tag,omitempty" json:"tag,omitempty"`

	// Datasource Filter on given datasource ids
	Datasource  *[]openapi_types.UUID `form:"datasource,omitempty" json:"datasource,omitempty"`
	Criticality *[]int32              `form:"criticality,omitempty" json:"criticality,omitempty"`

	// Domain Domain searched
	Domain *string `form:"domain,omitempty" json:"domain,omitempty"`

	// Page The requested page number. Zero-based page index (0..N)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`

	// Sort The resource fields on which to apply the sort, format : property,ASC|DESC
	Sort *[]string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetAllRuleParamsLastRunStatus defines parameters for GetAllRule.
type GetAllRuleParamsLastRunStatus string

// GetAllRuleParamsRuleStatus defines parameters for GetAllRule.
type GetAllRuleParamsRuleStatus string

// GetSiffletRuleRunsParams defines parameters for GetSiffletRuleRuns.
type GetSiffletRuleRunsParams struct {
	// Status Filter by run status
	Status *[]GetSiffletRuleRunsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Page The requested page number. Zero-based page index (0..N)
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage The number of elements to be returned inside the page. Pass a value of -1, to bypass pagination and fetch all items
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`

	// Sort The resource fields on which to apply the sort, format : property,ASC|DESC
	Sort *[]string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetSiffletRuleRunsParamsStatus defines parameters for GetSiffletRuleRuns.
type GetSiffletRuleRunsParamsStatus string

// GetSiffletRuleRunParams defines parameters for GetSiffletRuleRun.
type GetSiffletRuleRunParams struct {
	Expand *[]GetSiffletRuleRunParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetSiffletRuleRunParamsExpand defines parameters for GetSiffletRuleRun.
type GetSiffletRuleRunParamsExpand string

// PublicGetUsersParams defines parameters for PublicGetUsers.
type PublicGetUsersParams struct {
	// Page The page number to retrieve. Starts at 0.
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage The number of elements to be returned inside the page.
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// PublicEditAssetJSONRequestBody defines body for PublicEditAsset for application/json ContentType.
type PublicEditAssetJSONRequestBody = PublicUpdateAssetDto

// PublicGetAssetJSONRequestBody defines body for PublicGetAsset for application/json ContentType.
type PublicGetAssetJSONRequestBody = PublicGetAssetRequestDto

// PublicGetAssetsJSONRequestBody defines body for PublicGetAssets for application/json ContentType.
type PublicGetAssetsJSONRequestBody = PublicAssetSearchCriteriaDto

// PublicSyncAssetsJSONRequestBody defines body for PublicSyncAssets for application/json ContentType.
type PublicSyncAssetsJSONRequestBody = PublicDeclarativePayloadDto

// PublicCreateCalendarJSONRequestBody defines body for PublicCreateCalendar for application/json ContentType.
type PublicCreateCalendarJSONRequestBody = PublicCalendarCreateDto

// PublicUpdateCalendarJSONRequestBody defines body for PublicUpdateCalendar for application/json ContentType.
type PublicUpdateCalendarJSONRequestBody = PublicCalendarUpdateDto

// PublicCreateCredentialsJSONRequestBody defines body for PublicCreateCredentials for application/json ContentType.
type PublicCreateCredentialsJSONRequestBody = PublicCredentialsCreateDto

// PublicUpdateCredentialsJSONRequestBody defines body for PublicUpdateCredentials for application/json ContentType.
type PublicUpdateCredentialsJSONRequestBody = PublicCredentialsPatchDto

// UploadDbtMetadataFilesMultipartRequestBody defines body for UploadDbtMetadataFiles for multipart/form-data ContentType.
type UploadDbtMetadataFilesMultipartRequestBody UploadDbtMetadataFilesMultipartBody

// PublicCreateSourceJSONRequestBody defines body for PublicCreateSource for application/json ContentType.
type PublicCreateSourceJSONRequestBody = PublicCreateSourceDto

// PublicGetSourcesJSONRequestBody defines body for PublicGetSources for application/json ContentType.
type PublicGetSourcesJSONRequestBody = PublicSourceSearchCriteriaDto

// TestSourceConnectionJSONRequestBody defines body for TestSourceConnection for application/json ContentType.
type TestSourceConnectionJSONRequestBody = PublicCreateSourceDto

// PublicEditSourceJSONRequestBody defines body for PublicEditSource for application/json ContentType.
type PublicEditSourceJSONRequestBody = PublicUpdateSourceDto

// PublicCreateUserJSONRequestBody defines body for PublicCreateUser for application/json ContentType.
type PublicCreateUserJSONRequestBody = PublicUserCreateDto

// PublicUpdateUserJSONRequestBody defines body for PublicUpdateUser for application/json ContentType.
type PublicUpdateUserJSONRequestBody = PublicUserUpdateDto

// AsPublicAirflowParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicAirflowParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicAirflowParametersDto() (PublicAirflowParametersDto, error) {
	var body PublicAirflowParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicAirflowParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicAirflowParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicAirflowParametersDto(v PublicAirflowParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicAirflowParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicAirflowParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicAirflowParametersDto(v PublicAirflowParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicAthenaParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicAthenaParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicAthenaParametersDto() (PublicAthenaParametersDto, error) {
	var body PublicAthenaParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicAthenaParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicAthenaParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicAthenaParametersDto(v PublicAthenaParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicAthenaParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicAthenaParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicAthenaParametersDto(v PublicAthenaParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicBigQueryParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicBigQueryParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicBigQueryParametersDto() (PublicBigQueryParametersDto, error) {
	var body PublicBigQueryParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicBigQueryParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicBigQueryParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicBigQueryParametersDto(v PublicBigQueryParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicBigQueryParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicBigQueryParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicBigQueryParametersDto(v PublicBigQueryParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDatabricksParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicDatabricksParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicDatabricksParametersDto() (PublicDatabricksParametersDto, error) {
	var body PublicDatabricksParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDatabricksParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicDatabricksParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicDatabricksParametersDto(v PublicDatabricksParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDatabricksParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicDatabricksParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicDatabricksParametersDto(v PublicDatabricksParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDbtCloudParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicDbtCloudParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicDbtCloudParametersDto() (PublicDbtCloudParametersDto, error) {
	var body PublicDbtCloudParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDbtCloudParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicDbtCloudParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicDbtCloudParametersDto(v PublicDbtCloudParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDbtCloudParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicDbtCloudParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicDbtCloudParametersDto(v PublicDbtCloudParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDbtParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicDbtParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicDbtParametersDto() (PublicDbtParametersDto, error) {
	var body PublicDbtParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDbtParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicDbtParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicDbtParametersDto(v PublicDbtParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDbtParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicDbtParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicDbtParametersDto(v PublicDbtParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDeclarativeParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicDeclarativeParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicDeclarativeParametersDto() (PublicDeclarativeParametersDto, error) {
	var body PublicDeclarativeParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDeclarativeParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicDeclarativeParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicDeclarativeParametersDto(v PublicDeclarativeParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDeclarativeParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicDeclarativeParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicDeclarativeParametersDto(v PublicDeclarativeParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicFivetranParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicFivetranParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicFivetranParametersDto() (PublicFivetranParametersDto, error) {
	var body PublicFivetranParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicFivetranParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicFivetranParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicFivetranParametersDto(v PublicFivetranParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicFivetranParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicFivetranParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicFivetranParametersDto(v PublicFivetranParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicLookerParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicLookerParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicLookerParametersDto() (PublicLookerParametersDto, error) {
	var body PublicLookerParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicLookerParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicLookerParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicLookerParametersDto(v PublicLookerParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicLookerParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicLookerParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicLookerParametersDto(v PublicLookerParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicMssqlParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicMssqlParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicMssqlParametersDto() (PublicMssqlParametersDto, error) {
	var body PublicMssqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicMssqlParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicMssqlParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicMssqlParametersDto(v PublicMssqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicMssqlParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicMssqlParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicMssqlParametersDto(v PublicMssqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicMysqlParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicMysqlParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicMysqlParametersDto() (PublicMysqlParametersDto, error) {
	var body PublicMysqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicMysqlParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicMysqlParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicMysqlParametersDto(v PublicMysqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicMysqlParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicMysqlParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicMysqlParametersDto(v PublicMysqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicOracleParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicOracleParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicOracleParametersDto() (PublicOracleParametersDto, error) {
	var body PublicOracleParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicOracleParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicOracleParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicOracleParametersDto(v PublicOracleParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicOracleParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicOracleParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicOracleParametersDto(v PublicOracleParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicPostgresqlParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicPostgresqlParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicPostgresqlParametersDto() (PublicPostgresqlParametersDto, error) {
	var body PublicPostgresqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicPostgresqlParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicPostgresqlParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicPostgresqlParametersDto(v PublicPostgresqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicPostgresqlParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicPostgresqlParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicPostgresqlParametersDto(v PublicPostgresqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicPowerBiParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicPowerBiParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicPowerBiParametersDto() (PublicPowerBiParametersDto, error) {
	var body PublicPowerBiParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicPowerBiParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicPowerBiParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicPowerBiParametersDto(v PublicPowerBiParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicPowerBiParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicPowerBiParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicPowerBiParametersDto(v PublicPowerBiParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicQuicksightParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicQuicksightParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicQuicksightParametersDto() (PublicQuicksightParametersDto, error) {
	var body PublicQuicksightParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicQuicksightParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicQuicksightParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicQuicksightParametersDto(v PublicQuicksightParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicQuicksightParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicQuicksightParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicQuicksightParametersDto(v PublicQuicksightParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicRedshiftParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicRedshiftParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicRedshiftParametersDto() (PublicRedshiftParametersDto, error) {
	var body PublicRedshiftParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicRedshiftParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicRedshiftParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicRedshiftParametersDto(v PublicRedshiftParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicRedshiftParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicRedshiftParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicRedshiftParametersDto(v PublicRedshiftParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicSnowflakeParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicSnowflakeParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicSnowflakeParametersDto() (PublicSnowflakeParametersDto, error) {
	var body PublicSnowflakeParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicSnowflakeParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicSnowflakeParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicSnowflakeParametersDto(v PublicSnowflakeParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicSnowflakeParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicSnowflakeParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicSnowflakeParametersDto(v PublicSnowflakeParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicSynapseParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicSynapseParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicSynapseParametersDto() (PublicSynapseParametersDto, error) {
	var body PublicSynapseParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicSynapseParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicSynapseParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicSynapseParametersDto(v PublicSynapseParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicSynapseParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicSynapseParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicSynapseParametersDto(v PublicSynapseParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicTableauParametersDto returns the union data inside the PublicCreateSourceDto_Parameters as a PublicTableauParametersDto
func (t PublicCreateSourceDto_Parameters) AsPublicTableauParametersDto() (PublicTableauParametersDto, error) {
	var body PublicTableauParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicTableauParametersDto overwrites any union data inside the PublicCreateSourceDto_Parameters as the provided PublicTableauParametersDto
func (t *PublicCreateSourceDto_Parameters) FromPublicTableauParametersDto(v PublicTableauParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicTableauParametersDto performs a merge with any union data inside the PublicCreateSourceDto_Parameters, using the provided PublicTableauParametersDto
func (t *PublicCreateSourceDto_Parameters) MergePublicTableauParametersDto(v PublicTableauParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PublicCreateSourceDto_Parameters) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PublicCreateSourceDto_Parameters) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPublicAirflowParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicAirflowParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicAirflowParametersDto() (PublicAirflowParametersDto, error) {
	var body PublicAirflowParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicAirflowParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicAirflowParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicAirflowParametersDto(v PublicAirflowParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicAirflowParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicAirflowParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicAirflowParametersDto(v PublicAirflowParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicAthenaParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicAthenaParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicAthenaParametersDto() (PublicAthenaParametersDto, error) {
	var body PublicAthenaParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicAthenaParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicAthenaParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicAthenaParametersDto(v PublicAthenaParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicAthenaParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicAthenaParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicAthenaParametersDto(v PublicAthenaParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicBigQueryParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicBigQueryParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicBigQueryParametersDto() (PublicBigQueryParametersDto, error) {
	var body PublicBigQueryParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicBigQueryParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicBigQueryParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicBigQueryParametersDto(v PublicBigQueryParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicBigQueryParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicBigQueryParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicBigQueryParametersDto(v PublicBigQueryParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDatabricksParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicDatabricksParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicDatabricksParametersDto() (PublicDatabricksParametersDto, error) {
	var body PublicDatabricksParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDatabricksParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicDatabricksParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicDatabricksParametersDto(v PublicDatabricksParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDatabricksParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicDatabricksParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicDatabricksParametersDto(v PublicDatabricksParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDbtCloudParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicDbtCloudParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicDbtCloudParametersDto() (PublicDbtCloudParametersDto, error) {
	var body PublicDbtCloudParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDbtCloudParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicDbtCloudParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicDbtCloudParametersDto(v PublicDbtCloudParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDbtCloudParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicDbtCloudParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicDbtCloudParametersDto(v PublicDbtCloudParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDbtParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicDbtParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicDbtParametersDto() (PublicDbtParametersDto, error) {
	var body PublicDbtParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDbtParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicDbtParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicDbtParametersDto(v PublicDbtParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDbtParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicDbtParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicDbtParametersDto(v PublicDbtParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDeclarativeParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicDeclarativeParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicDeclarativeParametersDto() (PublicDeclarativeParametersDto, error) {
	var body PublicDeclarativeParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDeclarativeParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicDeclarativeParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicDeclarativeParametersDto(v PublicDeclarativeParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDeclarativeParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicDeclarativeParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicDeclarativeParametersDto(v PublicDeclarativeParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicFivetranParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicFivetranParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicFivetranParametersDto() (PublicFivetranParametersDto, error) {
	var body PublicFivetranParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicFivetranParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicFivetranParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicFivetranParametersDto(v PublicFivetranParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicFivetranParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicFivetranParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicFivetranParametersDto(v PublicFivetranParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicLookerParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicLookerParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicLookerParametersDto() (PublicLookerParametersDto, error) {
	var body PublicLookerParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicLookerParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicLookerParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicLookerParametersDto(v PublicLookerParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicLookerParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicLookerParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicLookerParametersDto(v PublicLookerParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicMssqlParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicMssqlParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicMssqlParametersDto() (PublicMssqlParametersDto, error) {
	var body PublicMssqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicMssqlParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicMssqlParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicMssqlParametersDto(v PublicMssqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicMssqlParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicMssqlParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicMssqlParametersDto(v PublicMssqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicMysqlParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicMysqlParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicMysqlParametersDto() (PublicMysqlParametersDto, error) {
	var body PublicMysqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicMysqlParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicMysqlParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicMysqlParametersDto(v PublicMysqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicMysqlParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicMysqlParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicMysqlParametersDto(v PublicMysqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicOracleParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicOracleParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicOracleParametersDto() (PublicOracleParametersDto, error) {
	var body PublicOracleParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicOracleParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicOracleParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicOracleParametersDto(v PublicOracleParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicOracleParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicOracleParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicOracleParametersDto(v PublicOracleParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicPostgresqlParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicPostgresqlParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicPostgresqlParametersDto() (PublicPostgresqlParametersDto, error) {
	var body PublicPostgresqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicPostgresqlParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicPostgresqlParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicPostgresqlParametersDto(v PublicPostgresqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicPostgresqlParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicPostgresqlParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicPostgresqlParametersDto(v PublicPostgresqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicPowerBiParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicPowerBiParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicPowerBiParametersDto() (PublicPowerBiParametersDto, error) {
	var body PublicPowerBiParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicPowerBiParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicPowerBiParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicPowerBiParametersDto(v PublicPowerBiParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicPowerBiParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicPowerBiParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicPowerBiParametersDto(v PublicPowerBiParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicQuicksightParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicQuicksightParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicQuicksightParametersDto() (PublicQuicksightParametersDto, error) {
	var body PublicQuicksightParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicQuicksightParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicQuicksightParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicQuicksightParametersDto(v PublicQuicksightParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicQuicksightParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicQuicksightParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicQuicksightParametersDto(v PublicQuicksightParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicRedshiftParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicRedshiftParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicRedshiftParametersDto() (PublicRedshiftParametersDto, error) {
	var body PublicRedshiftParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicRedshiftParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicRedshiftParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicRedshiftParametersDto(v PublicRedshiftParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicRedshiftParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicRedshiftParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicRedshiftParametersDto(v PublicRedshiftParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicSnowflakeParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicSnowflakeParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicSnowflakeParametersDto() (PublicSnowflakeParametersDto, error) {
	var body PublicSnowflakeParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicSnowflakeParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicSnowflakeParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicSnowflakeParametersDto(v PublicSnowflakeParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicSnowflakeParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicSnowflakeParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicSnowflakeParametersDto(v PublicSnowflakeParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicSynapseParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicSynapseParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicSynapseParametersDto() (PublicSynapseParametersDto, error) {
	var body PublicSynapseParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicSynapseParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicSynapseParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicSynapseParametersDto(v PublicSynapseParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicSynapseParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicSynapseParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicSynapseParametersDto(v PublicSynapseParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicTableauParametersDto returns the union data inside the PublicGetSourceDto_Parameters as a PublicTableauParametersDto
func (t PublicGetSourceDto_Parameters) AsPublicTableauParametersDto() (PublicTableauParametersDto, error) {
	var body PublicTableauParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicTableauParametersDto overwrites any union data inside the PublicGetSourceDto_Parameters as the provided PublicTableauParametersDto
func (t *PublicGetSourceDto_Parameters) FromPublicTableauParametersDto(v PublicTableauParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicTableauParametersDto performs a merge with any union data inside the PublicGetSourceDto_Parameters, using the provided PublicTableauParametersDto
func (t *PublicGetSourceDto_Parameters) MergePublicTableauParametersDto(v PublicTableauParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PublicGetSourceDto_Parameters) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PublicGetSourceDto_Parameters) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPublicAirflowParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicAirflowParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicAirflowParametersDto() (PublicAirflowParametersDto, error) {
	var body PublicAirflowParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicAirflowParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicAirflowParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicAirflowParametersDto(v PublicAirflowParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicAirflowParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicAirflowParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicAirflowParametersDto(v PublicAirflowParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicAthenaParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicAthenaParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicAthenaParametersDto() (PublicAthenaParametersDto, error) {
	var body PublicAthenaParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicAthenaParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicAthenaParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicAthenaParametersDto(v PublicAthenaParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicAthenaParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicAthenaParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicAthenaParametersDto(v PublicAthenaParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicBigQueryParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicBigQueryParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicBigQueryParametersDto() (PublicBigQueryParametersDto, error) {
	var body PublicBigQueryParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicBigQueryParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicBigQueryParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicBigQueryParametersDto(v PublicBigQueryParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicBigQueryParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicBigQueryParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicBigQueryParametersDto(v PublicBigQueryParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDatabricksParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicDatabricksParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicDatabricksParametersDto() (PublicDatabricksParametersDto, error) {
	var body PublicDatabricksParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDatabricksParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicDatabricksParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicDatabricksParametersDto(v PublicDatabricksParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDatabricksParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicDatabricksParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicDatabricksParametersDto(v PublicDatabricksParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDbtCloudParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicDbtCloudParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicDbtCloudParametersDto() (PublicDbtCloudParametersDto, error) {
	var body PublicDbtCloudParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDbtCloudParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicDbtCloudParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicDbtCloudParametersDto(v PublicDbtCloudParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDbtCloudParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicDbtCloudParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicDbtCloudParametersDto(v PublicDbtCloudParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDbtParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicDbtParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicDbtParametersDto() (PublicDbtParametersDto, error) {
	var body PublicDbtParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDbtParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicDbtParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicDbtParametersDto(v PublicDbtParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDbtParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicDbtParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicDbtParametersDto(v PublicDbtParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicDeclarativeParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicDeclarativeParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicDeclarativeParametersDto() (PublicDeclarativeParametersDto, error) {
	var body PublicDeclarativeParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicDeclarativeParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicDeclarativeParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicDeclarativeParametersDto(v PublicDeclarativeParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicDeclarativeParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicDeclarativeParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicDeclarativeParametersDto(v PublicDeclarativeParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicFivetranParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicFivetranParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicFivetranParametersDto() (PublicFivetranParametersDto, error) {
	var body PublicFivetranParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicFivetranParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicFivetranParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicFivetranParametersDto(v PublicFivetranParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicFivetranParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicFivetranParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicFivetranParametersDto(v PublicFivetranParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicLookerParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicLookerParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicLookerParametersDto() (PublicLookerParametersDto, error) {
	var body PublicLookerParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicLookerParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicLookerParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicLookerParametersDto(v PublicLookerParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicLookerParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicLookerParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicLookerParametersDto(v PublicLookerParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicMssqlParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicMssqlParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicMssqlParametersDto() (PublicMssqlParametersDto, error) {
	var body PublicMssqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicMssqlParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicMssqlParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicMssqlParametersDto(v PublicMssqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicMssqlParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicMssqlParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicMssqlParametersDto(v PublicMssqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicMysqlParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicMysqlParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicMysqlParametersDto() (PublicMysqlParametersDto, error) {
	var body PublicMysqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicMysqlParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicMysqlParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicMysqlParametersDto(v PublicMysqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicMysqlParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicMysqlParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicMysqlParametersDto(v PublicMysqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicOracleParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicOracleParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicOracleParametersDto() (PublicOracleParametersDto, error) {
	var body PublicOracleParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicOracleParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicOracleParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicOracleParametersDto(v PublicOracleParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicOracleParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicOracleParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicOracleParametersDto(v PublicOracleParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicPostgresqlParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicPostgresqlParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicPostgresqlParametersDto() (PublicPostgresqlParametersDto, error) {
	var body PublicPostgresqlParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicPostgresqlParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicPostgresqlParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicPostgresqlParametersDto(v PublicPostgresqlParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicPostgresqlParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicPostgresqlParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicPostgresqlParametersDto(v PublicPostgresqlParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicPowerBiParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicPowerBiParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicPowerBiParametersDto() (PublicPowerBiParametersDto, error) {
	var body PublicPowerBiParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicPowerBiParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicPowerBiParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicPowerBiParametersDto(v PublicPowerBiParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicPowerBiParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicPowerBiParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicPowerBiParametersDto(v PublicPowerBiParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicQuicksightParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicQuicksightParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicQuicksightParametersDto() (PublicQuicksightParametersDto, error) {
	var body PublicQuicksightParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicQuicksightParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicQuicksightParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicQuicksightParametersDto(v PublicQuicksightParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicQuicksightParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicQuicksightParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicQuicksightParametersDto(v PublicQuicksightParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicRedshiftParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicRedshiftParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicRedshiftParametersDto() (PublicRedshiftParametersDto, error) {
	var body PublicRedshiftParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicRedshiftParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicRedshiftParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicRedshiftParametersDto(v PublicRedshiftParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicRedshiftParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicRedshiftParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicRedshiftParametersDto(v PublicRedshiftParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicSnowflakeParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicSnowflakeParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicSnowflakeParametersDto() (PublicSnowflakeParametersDto, error) {
	var body PublicSnowflakeParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicSnowflakeParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicSnowflakeParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicSnowflakeParametersDto(v PublicSnowflakeParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicSnowflakeParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicSnowflakeParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicSnowflakeParametersDto(v PublicSnowflakeParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicSynapseParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicSynapseParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicSynapseParametersDto() (PublicSynapseParametersDto, error) {
	var body PublicSynapseParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicSynapseParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicSynapseParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicSynapseParametersDto(v PublicSynapseParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicSynapseParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicSynapseParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicSynapseParametersDto(v PublicSynapseParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPublicTableauParametersDto returns the union data inside the PublicUpdateSourceDto_Parameters as a PublicTableauParametersDto
func (t PublicUpdateSourceDto_Parameters) AsPublicTableauParametersDto() (PublicTableauParametersDto, error) {
	var body PublicTableauParametersDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPublicTableauParametersDto overwrites any union data inside the PublicUpdateSourceDto_Parameters as the provided PublicTableauParametersDto
func (t *PublicUpdateSourceDto_Parameters) FromPublicTableauParametersDto(v PublicTableauParametersDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePublicTableauParametersDto performs a merge with any union data inside the PublicUpdateSourceDto_Parameters, using the provided PublicTableauParametersDto
func (t *PublicUpdateSourceDto_Parameters) MergePublicTableauParametersDto(v PublicTableauParametersDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PublicUpdateSourceDto_Parameters) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PublicUpdateSourceDto_Parameters) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccessTokenProviderDto returns the union data inside the RuleCatalogAssetDto_Provider as a AccessTokenProviderDto
func (t RuleCatalogAssetDto_Provider) AsAccessTokenProviderDto() (AccessTokenProviderDto, error) {
	var body AccessTokenProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessTokenProviderDto overwrites any union data inside the RuleCatalogAssetDto_Provider as the provided AccessTokenProviderDto
func (t *RuleCatalogAssetDto_Provider) FromAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessTokenProviderDto performs a merge with any union data inside the RuleCatalogAssetDto_Provider, using the provided AccessTokenProviderDto
func (t *RuleCatalogAssetDto_Provider) MergeAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatasourceProviderDto returns the union data inside the RuleCatalogAssetDto_Provider as a DatasourceProviderDto
func (t RuleCatalogAssetDto_Provider) AsDatasourceProviderDto() (DatasourceProviderDto, error) {
	var body DatasourceProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatasourceProviderDto overwrites any union data inside the RuleCatalogAssetDto_Provider as the provided DatasourceProviderDto
func (t *RuleCatalogAssetDto_Provider) FromDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatasourceProviderDto performs a merge with any union data inside the RuleCatalogAssetDto_Provider, using the provided DatasourceProviderDto
func (t *RuleCatalogAssetDto_Provider) MergeDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericProviderDto returns the union data inside the RuleCatalogAssetDto_Provider as a GenericProviderDto
func (t RuleCatalogAssetDto_Provider) AsGenericProviderDto() (GenericProviderDto, error) {
	var body GenericProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericProviderDto overwrites any union data inside the RuleCatalogAssetDto_Provider as the provided GenericProviderDto
func (t *RuleCatalogAssetDto_Provider) FromGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericProviderDto performs a merge with any union data inside the RuleCatalogAssetDto_Provider, using the provided GenericProviderDto
func (t *RuleCatalogAssetDto_Provider) MergeGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserProviderDto returns the union data inside the RuleCatalogAssetDto_Provider as a UserProviderDto
func (t RuleCatalogAssetDto_Provider) AsUserProviderDto() (UserProviderDto, error) {
	var body UserProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserProviderDto overwrites any union data inside the RuleCatalogAssetDto_Provider as the provided UserProviderDto
func (t *RuleCatalogAssetDto_Provider) FromUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserProviderDto performs a merge with any union data inside the RuleCatalogAssetDto_Provider, using the provided UserProviderDto
func (t *RuleCatalogAssetDto_Provider) MergeUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RuleCatalogAssetDto_Provider) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RuleCatalogAssetDto_Provider) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccessTokenProviderDto returns the union data inside the RuleDetailsDto_CreatedByProvider as a AccessTokenProviderDto
func (t RuleDetailsDto_CreatedByProvider) AsAccessTokenProviderDto() (AccessTokenProviderDto, error) {
	var body AccessTokenProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessTokenProviderDto overwrites any union data inside the RuleDetailsDto_CreatedByProvider as the provided AccessTokenProviderDto
func (t *RuleDetailsDto_CreatedByProvider) FromAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessTokenProviderDto performs a merge with any union data inside the RuleDetailsDto_CreatedByProvider, using the provided AccessTokenProviderDto
func (t *RuleDetailsDto_CreatedByProvider) MergeAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatasourceProviderDto returns the union data inside the RuleDetailsDto_CreatedByProvider as a DatasourceProviderDto
func (t RuleDetailsDto_CreatedByProvider) AsDatasourceProviderDto() (DatasourceProviderDto, error) {
	var body DatasourceProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatasourceProviderDto overwrites any union data inside the RuleDetailsDto_CreatedByProvider as the provided DatasourceProviderDto
func (t *RuleDetailsDto_CreatedByProvider) FromDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatasourceProviderDto performs a merge with any union data inside the RuleDetailsDto_CreatedByProvider, using the provided DatasourceProviderDto
func (t *RuleDetailsDto_CreatedByProvider) MergeDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericProviderDto returns the union data inside the RuleDetailsDto_CreatedByProvider as a GenericProviderDto
func (t RuleDetailsDto_CreatedByProvider) AsGenericProviderDto() (GenericProviderDto, error) {
	var body GenericProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericProviderDto overwrites any union data inside the RuleDetailsDto_CreatedByProvider as the provided GenericProviderDto
func (t *RuleDetailsDto_CreatedByProvider) FromGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericProviderDto performs a merge with any union data inside the RuleDetailsDto_CreatedByProvider, using the provided GenericProviderDto
func (t *RuleDetailsDto_CreatedByProvider) MergeGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserProviderDto returns the union data inside the RuleDetailsDto_CreatedByProvider as a UserProviderDto
func (t RuleDetailsDto_CreatedByProvider) AsUserProviderDto() (UserProviderDto, error) {
	var body UserProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserProviderDto overwrites any union data inside the RuleDetailsDto_CreatedByProvider as the provided UserProviderDto
func (t *RuleDetailsDto_CreatedByProvider) FromUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserProviderDto performs a merge with any union data inside the RuleDetailsDto_CreatedByProvider, using the provided UserProviderDto
func (t *RuleDetailsDto_CreatedByProvider) MergeUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RuleDetailsDto_CreatedByProvider) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RuleDetailsDto_CreatedByProvider) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccessTokenProviderDto returns the union data inside the RuleDetailsDto_ModifiedByProvider as a AccessTokenProviderDto
func (t RuleDetailsDto_ModifiedByProvider) AsAccessTokenProviderDto() (AccessTokenProviderDto, error) {
	var body AccessTokenProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessTokenProviderDto overwrites any union data inside the RuleDetailsDto_ModifiedByProvider as the provided AccessTokenProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) FromAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessTokenProviderDto performs a merge with any union data inside the RuleDetailsDto_ModifiedByProvider, using the provided AccessTokenProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) MergeAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatasourceProviderDto returns the union data inside the RuleDetailsDto_ModifiedByProvider as a DatasourceProviderDto
func (t RuleDetailsDto_ModifiedByProvider) AsDatasourceProviderDto() (DatasourceProviderDto, error) {
	var body DatasourceProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatasourceProviderDto overwrites any union data inside the RuleDetailsDto_ModifiedByProvider as the provided DatasourceProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) FromDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatasourceProviderDto performs a merge with any union data inside the RuleDetailsDto_ModifiedByProvider, using the provided DatasourceProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) MergeDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericProviderDto returns the union data inside the RuleDetailsDto_ModifiedByProvider as a GenericProviderDto
func (t RuleDetailsDto_ModifiedByProvider) AsGenericProviderDto() (GenericProviderDto, error) {
	var body GenericProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericProviderDto overwrites any union data inside the RuleDetailsDto_ModifiedByProvider as the provided GenericProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) FromGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericProviderDto performs a merge with any union data inside the RuleDetailsDto_ModifiedByProvider, using the provided GenericProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) MergeGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserProviderDto returns the union data inside the RuleDetailsDto_ModifiedByProvider as a UserProviderDto
func (t RuleDetailsDto_ModifiedByProvider) AsUserProviderDto() (UserProviderDto, error) {
	var body UserProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserProviderDto overwrites any union data inside the RuleDetailsDto_ModifiedByProvider as the provided UserProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) FromUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserProviderDto performs a merge with any union data inside the RuleDetailsDto_ModifiedByProvider, using the provided UserProviderDto
func (t *RuleDetailsDto_ModifiedByProvider) MergeUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RuleDetailsDto_ModifiedByProvider) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RuleDetailsDto_ModifiedByProvider) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccessTokenProviderDto returns the union data inside the RuleDetailsDto_Provider as a AccessTokenProviderDto
func (t RuleDetailsDto_Provider) AsAccessTokenProviderDto() (AccessTokenProviderDto, error) {
	var body AccessTokenProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccessTokenProviderDto overwrites any union data inside the RuleDetailsDto_Provider as the provided AccessTokenProviderDto
func (t *RuleDetailsDto_Provider) FromAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccessTokenProviderDto performs a merge with any union data inside the RuleDetailsDto_Provider, using the provided AccessTokenProviderDto
func (t *RuleDetailsDto_Provider) MergeAccessTokenProviderDto(v AccessTokenProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDatasourceProviderDto returns the union data inside the RuleDetailsDto_Provider as a DatasourceProviderDto
func (t RuleDetailsDto_Provider) AsDatasourceProviderDto() (DatasourceProviderDto, error) {
	var body DatasourceProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDatasourceProviderDto overwrites any union data inside the RuleDetailsDto_Provider as the provided DatasourceProviderDto
func (t *RuleDetailsDto_Provider) FromDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDatasourceProviderDto performs a merge with any union data inside the RuleDetailsDto_Provider, using the provided DatasourceProviderDto
func (t *RuleDetailsDto_Provider) MergeDatasourceProviderDto(v DatasourceProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenericProviderDto returns the union data inside the RuleDetailsDto_Provider as a GenericProviderDto
func (t RuleDetailsDto_Provider) AsGenericProviderDto() (GenericProviderDto, error) {
	var body GenericProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericProviderDto overwrites any union data inside the RuleDetailsDto_Provider as the provided GenericProviderDto
func (t *RuleDetailsDto_Provider) FromGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericProviderDto performs a merge with any union data inside the RuleDetailsDto_Provider, using the provided GenericProviderDto
func (t *RuleDetailsDto_Provider) MergeGenericProviderDto(v GenericProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserProviderDto returns the union data inside the RuleDetailsDto_Provider as a UserProviderDto
func (t RuleDetailsDto_Provider) AsUserProviderDto() (UserProviderDto, error) {
	var body UserProviderDto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserProviderDto overwrites any union data inside the RuleDetailsDto_Provider as the provided UserProviderDto
func (t *RuleDetailsDto_Provider) FromUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserProviderDto performs a merge with any union data inside the RuleDetailsDto_Provider, using the provided UserProviderDto
func (t *RuleDetailsDto_Provider) MergeUserProviderDto(v UserProviderDto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RuleDetailsDto_Provider) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RuleDetailsDto_Provider) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PublicEditAssetWithBody request with any body
	PublicEditAssetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicEditAsset(ctx context.Context, body PublicEditAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetAssetWithBody request with any body
	PublicGetAssetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicGetAsset(ctx context.Context, body PublicGetAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetAssetsWithBody request with any body
	PublicGetAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicGetAssets(ctx context.Context, body PublicGetAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicSyncAssetsWithBody request with any body
	PublicSyncAssetsWithBody(ctx context.Context, params *PublicSyncAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicSyncAssets(ctx context.Context, params *PublicSyncAssetsParams, body PublicSyncAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicDeleteWorkspace request
	PublicDeleteWorkspace(ctx context.Context, name string, params *PublicDeleteWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetCalendars request
	PublicGetCalendars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicCreateCalendarWithBody request with any body
	PublicCreateCalendarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicCreateCalendar(ctx context.Context, body PublicCreateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicDeleteCalendar request
	PublicDeleteCalendar(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetCalendar request
	PublicGetCalendar(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicUpdateCalendarWithBody request with any body
	PublicUpdateCalendarWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicUpdateCalendar(ctx context.Context, id openapi_types.UUID, body PublicUpdateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetAllCredentials request
	PublicGetAllCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicCreateCredentialsWithBody request with any body
	PublicCreateCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicCreateCredentials(ctx context.Context, body PublicCreateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicDeleteCredentials request
	PublicDeleteCredentials(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetCredentials request
	PublicGetCredentials(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicUpdateCredentialsWithBody request with any body
	PublicUpdateCredentialsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicUpdateCredentials(ctx context.Context, name string, body PublicUpdateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadDbtMetadataFilesWithBody request with any body
	UploadDbtMetadataFilesWithBody(ctx context.Context, projectName string, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllRule request
	GetAllRule(ctx context.Context, params *GetAllRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SiffletRuleManualRun request
	SiffletRuleManualRun(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSiffletRuleDetails request
	GetSiffletRuleDetails(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSiffletRuleInfo request
	GetSiffletRuleInfo(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSiffletRuleOverview request
	GetSiffletRuleOverview(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSiffletRuleRuns request
	GetSiffletRuleRuns(ctx context.Context, id openapi_types.UUID, params *GetSiffletRuleRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSiffletRuleRun request
	GetSiffletRuleRun(ctx context.Context, id openapi_types.UUID, runId openapi_types.UUID, params *GetSiffletRuleRunParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicCreateSourceWithBody request with any body
	PublicCreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicCreateSource(ctx context.Context, body PublicCreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetSourcesWithBody request with any body
	PublicGetSourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicGetSources(ctx context.Context, body PublicGetSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestSourceConnectionWithBody request with any body
	TestSourceConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TestSourceConnection(ctx context.Context, body TestSourceConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicDeleteSourceById request
	PublicDeleteSourceById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetSource request
	PublicGetSource(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicEditSourceWithBody request with any body
	PublicEditSourceWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicEditSource(ctx context.Context, id openapi_types.UUID, body PublicEditSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicSourceIngestionManualRun request
	PublicSourceIngestionManualRun(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetUsers request
	PublicGetUsers(ctx context.Context, params *PublicGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicCreateUserWithBody request with any body
	PublicCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicCreateUser(ctx context.Context, body PublicCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicDeleteUser request
	PublicDeleteUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicGetUser request
	PublicGetUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicUpdateUserWithBody request with any body
	PublicUpdateUserWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublicUpdateUser(ctx context.Context, id openapi_types.UUID, body PublicUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicResetUserPassword request
	PublicResetUserPassword(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PublicEditAssetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicEditAssetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicEditAsset(ctx context.Context, body PublicEditAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicEditAssetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetAssetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetAssetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetAsset(ctx context.Context, body PublicGetAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetAssetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetAssetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetAssetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetAssets(ctx context.Context, body PublicGetAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetAssetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicSyncAssetsWithBody(ctx context.Context, params *PublicSyncAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicSyncAssetsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicSyncAssets(ctx context.Context, params *PublicSyncAssetsParams, body PublicSyncAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicSyncAssetsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicDeleteWorkspace(ctx context.Context, name string, params *PublicDeleteWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicDeleteWorkspaceRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetCalendars(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetCalendarsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateCalendarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateCalendarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateCalendar(ctx context.Context, body PublicCreateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateCalendarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicDeleteCalendar(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicDeleteCalendarRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetCalendar(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetCalendarRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicUpdateCalendarWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicUpdateCalendarRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicUpdateCalendar(ctx context.Context, id openapi_types.UUID, body PublicUpdateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicUpdateCalendarRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetAllCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetAllCredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateCredentialsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateCredentialsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateCredentials(ctx context.Context, body PublicCreateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateCredentialsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicDeleteCredentials(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicDeleteCredentialsRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetCredentials(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetCredentialsRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicUpdateCredentialsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicUpdateCredentialsRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicUpdateCredentials(ctx context.Context, name string, body PublicUpdateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicUpdateCredentialsRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadDbtMetadataFilesWithBody(ctx context.Context, projectName string, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadDbtMetadataFilesRequestWithBody(c.Server, projectName, target, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllRule(ctx context.Context, params *GetAllRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRuleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SiffletRuleManualRun(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSiffletRuleManualRunRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSiffletRuleDetails(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiffletRuleDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSiffletRuleInfo(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiffletRuleInfoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSiffletRuleOverview(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiffletRuleOverviewRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSiffletRuleRuns(ctx context.Context, id openapi_types.UUID, params *GetSiffletRuleRunsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiffletRuleRunsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSiffletRuleRun(ctx context.Context, id openapi_types.UUID, runId openapi_types.UUID, params *GetSiffletRuleRunParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiffletRuleRunRequest(c.Server, id, runId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateSource(ctx context.Context, body PublicCreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetSourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetSourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetSources(ctx context.Context, body PublicGetSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetSourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestSourceConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestSourceConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestSourceConnection(ctx context.Context, body TestSourceConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestSourceConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicDeleteSourceById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicDeleteSourceByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetSource(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicEditSourceWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicEditSourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicEditSource(ctx context.Context, id openapi_types.UUID, body PublicEditSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicEditSourceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicSourceIngestionManualRun(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicSourceIngestionManualRunRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetUsers(ctx context.Context, params *PublicGetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCreateUser(ctx context.Context, body PublicCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicDeleteUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicDeleteUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicGetUser(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicGetUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicUpdateUserWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicUpdateUserRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicUpdateUser(ctx context.Context, id openapi_types.UUID, body PublicUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicUpdateUserRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicResetUserPassword(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicResetUserPasswordRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPublicEditAssetRequest calls the generic PublicEditAsset builder with application/json body
func NewPublicEditAssetRequest(server string, body PublicEditAssetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicEditAssetRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicEditAssetRequestWithBody generates requests for PublicEditAsset with any type of body
func NewPublicEditAssetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/assets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicGetAssetRequest calls the generic PublicGetAsset builder with application/json body
func NewPublicGetAssetRequest(server string, body PublicGetAssetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicGetAssetRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicGetAssetRequestWithBody generates requests for PublicGetAsset with any type of body
func NewPublicGetAssetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/assets/get-asset-with-uri")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicGetAssetsRequest calls the generic PublicGetAssets builder with application/json body
func NewPublicGetAssetsRequest(server string, body PublicGetAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicGetAssetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicGetAssetsRequestWithBody generates requests for PublicGetAssets with any type of body
func NewPublicGetAssetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/assets/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicSyncAssetsRequest calls the generic PublicSyncAssets builder with application/json body
func NewPublicSyncAssetsRequest(server string, params *PublicSyncAssetsParams, body PublicSyncAssetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicSyncAssetsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPublicSyncAssetsRequestWithBody generates requests for PublicSyncAssets with any type of body
func NewPublicSyncAssetsRequestWithBody(server string, params *PublicSyncAssetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/assets/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dryRun", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicDeleteWorkspaceRequest generates requests for PublicDeleteWorkspace
func NewPublicDeleteWorkspaceRequest(server string, name string, params *PublicDeleteWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/assets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DryRun != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dryRun", runtime.ParamLocationQuery, *params.DryRun); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicGetCalendarsRequest generates requests for PublicGetCalendars
func NewPublicGetCalendarsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/calendars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicCreateCalendarRequest calls the generic PublicCreateCalendar builder with application/json body
func NewPublicCreateCalendarRequest(server string, body PublicCreateCalendarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicCreateCalendarRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicCreateCalendarRequestWithBody generates requests for PublicCreateCalendar with any type of body
func NewPublicCreateCalendarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/calendars")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicDeleteCalendarRequest generates requests for PublicDeleteCalendar
func NewPublicDeleteCalendarRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/calendars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicGetCalendarRequest generates requests for PublicGetCalendar
func NewPublicGetCalendarRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/calendars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicUpdateCalendarRequest calls the generic PublicUpdateCalendar builder with application/json body
func NewPublicUpdateCalendarRequest(server string, id openapi_types.UUID, body PublicUpdateCalendarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicUpdateCalendarRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPublicUpdateCalendarRequestWithBody generates requests for PublicUpdateCalendar with any type of body
func NewPublicUpdateCalendarRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/calendars/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicGetAllCredentialsRequest generates requests for PublicGetAllCredentials
func NewPublicGetAllCredentialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicCreateCredentialsRequest calls the generic PublicCreateCredentials builder with application/json body
func NewPublicCreateCredentialsRequest(server string, body PublicCreateCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicCreateCredentialsRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicCreateCredentialsRequestWithBody generates requests for PublicCreateCredentials with any type of body
func NewPublicCreateCredentialsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicDeleteCredentialsRequest generates requests for PublicDeleteCredentials
func NewPublicDeleteCredentialsRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicGetCredentialsRequest generates requests for PublicGetCredentials
func NewPublicGetCredentialsRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicUpdateCredentialsRequest calls the generic PublicUpdateCredentials builder with application/json body
func NewPublicUpdateCredentialsRequest(server string, name string, body PublicUpdateCredentialsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicUpdateCredentialsRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPublicUpdateCredentialsRequestWithBody generates requests for PublicUpdateCredentials with any type of body
func NewPublicUpdateCredentialsRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadDbtMetadataFilesRequestWithBody generates requests for UploadDbtMetadataFiles with any type of body
func NewUploadDbtMetadataFilesRequestWithBody(server string, projectName string, target string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectName", runtime.ParamLocationPath, projectName)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "target", runtime.ParamLocationPath, target)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metadata/dbt/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllRuleRequest generates requests for GetAllRule
func NewGetAllRuleRequest(server string, params *GetAllRuleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TextSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "textSearch", runtime.ParamLocationQuery, *params.TextSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RuleTemplateName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruleTemplateName", runtime.ParamLocationQuery, *params.RuleTemplateName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastRunStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastRunStatus", runtime.ParamLocationQuery, *params.LastRunStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RuleStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ruleStatus", runtime.ParamLocationQuery, *params.RuleStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dataset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dataset", runtime.ParamLocationQuery, *params.Dataset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Datasource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "datasource", runtime.ParamLocationQuery, *params.Datasource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Criticality != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "criticality", runtime.ParamLocationQuery, *params.Criticality); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Domain != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain", runtime.ParamLocationQuery, *params.Domain); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSiffletRuleManualRunRequest generates requests for SiffletRuleManualRun
func NewSiffletRuleManualRunRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rules/%s/_run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSiffletRuleDetailsRequest generates requests for GetSiffletRuleDetails
func NewGetSiffletRuleDetailsRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rules/%s/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSiffletRuleInfoRequest generates requests for GetSiffletRuleInfo
func NewGetSiffletRuleInfoRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rules/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSiffletRuleOverviewRequest generates requests for GetSiffletRuleOverview
func NewGetSiffletRuleOverviewRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rules/%s/overview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSiffletRuleRunsRequest generates requests for GetSiffletRuleRuns
func NewGetSiffletRuleRunsRequest(server string, id openapi_types.UUID, params *GetSiffletRuleRunsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rules/%s/runs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSiffletRuleRunRequest generates requests for GetSiffletRuleRun
func NewGetSiffletRuleRunRequest(server string, id openapi_types.UUID, runId openapi_types.UUID, params *GetSiffletRuleRunParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/rules/%s/runs/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicCreateSourceRequest calls the generic PublicCreateSource builder with application/json body
func NewPublicCreateSourceRequest(server string, body PublicCreateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicCreateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicCreateSourceRequestWithBody generates requests for PublicCreateSource with any type of body
func NewPublicCreateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicGetSourcesRequest calls the generic PublicGetSources builder with application/json body
func NewPublicGetSourcesRequest(server string, body PublicGetSourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicGetSourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicGetSourcesRequestWithBody generates requests for PublicGetSources with any type of body
func NewPublicGetSourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestSourceConnectionRequest calls the generic TestSourceConnection builder with application/json body
func NewTestSourceConnectionRequest(server string, body TestSourceConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTestSourceConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewTestSourceConnectionRequestWithBody generates requests for TestSourceConnection with any type of body
func NewTestSourceConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/test-connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicDeleteSourceByIdRequest generates requests for PublicDeleteSourceById
func NewPublicDeleteSourceByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicGetSourceRequest generates requests for PublicGetSource
func NewPublicGetSourceRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicEditSourceRequest calls the generic PublicEditSource builder with application/json body
func NewPublicEditSourceRequest(server string, id openapi_types.UUID, body PublicEditSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicEditSourceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPublicEditSourceRequestWithBody generates requests for PublicEditSource with any type of body
func NewPublicEditSourceRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicSourceIngestionManualRunRequest generates requests for PublicSourceIngestionManualRun
func NewPublicSourceIngestionManualRunRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicGetUsersRequest generates requests for PublicGetUsers
func NewPublicGetUsersRequest(server string, params *PublicGetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicCreateUserRequest calls the generic PublicCreateUser builder with application/json body
func NewPublicCreateUserRequest(server string, body PublicCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPublicCreateUserRequestWithBody generates requests for PublicCreateUser with any type of body
func NewPublicCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicDeleteUserRequest generates requests for PublicDeleteUser
func NewPublicDeleteUserRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicGetUserRequest generates requests for PublicGetUser
func NewPublicGetUserRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicUpdateUserRequest calls the generic PublicUpdateUser builder with application/json body
func NewPublicUpdateUserRequest(server string, id openapi_types.UUID, body PublicUpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPublicUpdateUserRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPublicUpdateUserRequestWithBody generates requests for PublicUpdateUser with any type of body
func NewPublicUpdateUserRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicResetUserPasswordRequest generates requests for PublicResetUserPassword
func NewPublicResetUserPasswordRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/users/%s/reset-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PublicEditAssetWithBodyWithResponse request with any body
	PublicEditAssetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicEditAssetResponse, error)

	PublicEditAssetWithResponse(ctx context.Context, body PublicEditAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicEditAssetResponse, error)

	// PublicGetAssetWithBodyWithResponse request with any body
	PublicGetAssetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicGetAssetResponse, error)

	PublicGetAssetWithResponse(ctx context.Context, body PublicGetAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicGetAssetResponse, error)

	// PublicGetAssetsWithBodyWithResponse request with any body
	PublicGetAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicGetAssetsResponse, error)

	PublicGetAssetsWithResponse(ctx context.Context, body PublicGetAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicGetAssetsResponse, error)

	// PublicSyncAssetsWithBodyWithResponse request with any body
	PublicSyncAssetsWithBodyWithResponse(ctx context.Context, params *PublicSyncAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicSyncAssetsResponse, error)

	PublicSyncAssetsWithResponse(ctx context.Context, params *PublicSyncAssetsParams, body PublicSyncAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicSyncAssetsResponse, error)

	// PublicDeleteWorkspaceWithResponse request
	PublicDeleteWorkspaceWithResponse(ctx context.Context, name string, params *PublicDeleteWorkspaceParams, reqEditors ...RequestEditorFn) (*PublicDeleteWorkspaceResponse, error)

	// PublicGetCalendarsWithResponse request
	PublicGetCalendarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicGetCalendarsResponse, error)

	// PublicCreateCalendarWithBodyWithResponse request with any body
	PublicCreateCalendarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateCalendarResponse, error)

	PublicCreateCalendarWithResponse(ctx context.Context, body PublicCreateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateCalendarResponse, error)

	// PublicDeleteCalendarWithResponse request
	PublicDeleteCalendarWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicDeleteCalendarResponse, error)

	// PublicGetCalendarWithResponse request
	PublicGetCalendarWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicGetCalendarResponse, error)

	// PublicUpdateCalendarWithBodyWithResponse request with any body
	PublicUpdateCalendarWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicUpdateCalendarResponse, error)

	PublicUpdateCalendarWithResponse(ctx context.Context, id openapi_types.UUID, body PublicUpdateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicUpdateCalendarResponse, error)

	// PublicGetAllCredentialsWithResponse request
	PublicGetAllCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicGetAllCredentialsResponse, error)

	// PublicCreateCredentialsWithBodyWithResponse request with any body
	PublicCreateCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateCredentialsResponse, error)

	PublicCreateCredentialsWithResponse(ctx context.Context, body PublicCreateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateCredentialsResponse, error)

	// PublicDeleteCredentialsWithResponse request
	PublicDeleteCredentialsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*PublicDeleteCredentialsResponse, error)

	// PublicGetCredentialsWithResponse request
	PublicGetCredentialsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*PublicGetCredentialsResponse, error)

	// PublicUpdateCredentialsWithBodyWithResponse request with any body
	PublicUpdateCredentialsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicUpdateCredentialsResponse, error)

	PublicUpdateCredentialsWithResponse(ctx context.Context, name string, body PublicUpdateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicUpdateCredentialsResponse, error)

	// UploadDbtMetadataFilesWithBodyWithResponse request with any body
	UploadDbtMetadataFilesWithBodyWithResponse(ctx context.Context, projectName string, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadDbtMetadataFilesResponse, error)

	// GetAllRuleWithResponse request
	GetAllRuleWithResponse(ctx context.Context, params *GetAllRuleParams, reqEditors ...RequestEditorFn) (*GetAllRuleResponse, error)

	// SiffletRuleManualRunWithResponse request
	SiffletRuleManualRunWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*SiffletRuleManualRunResponse, error)

	// GetSiffletRuleDetailsWithResponse request
	GetSiffletRuleDetailsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSiffletRuleDetailsResponse, error)

	// GetSiffletRuleInfoWithResponse request
	GetSiffletRuleInfoWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSiffletRuleInfoResponse, error)

	// GetSiffletRuleOverviewWithResponse request
	GetSiffletRuleOverviewWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSiffletRuleOverviewResponse, error)

	// GetSiffletRuleRunsWithResponse request
	GetSiffletRuleRunsWithResponse(ctx context.Context, id openapi_types.UUID, params *GetSiffletRuleRunsParams, reqEditors ...RequestEditorFn) (*GetSiffletRuleRunsResponse, error)

	// GetSiffletRuleRunWithResponse request
	GetSiffletRuleRunWithResponse(ctx context.Context, id openapi_types.UUID, runId openapi_types.UUID, params *GetSiffletRuleRunParams, reqEditors ...RequestEditorFn) (*GetSiffletRuleRunResponse, error)

	// PublicCreateSourceWithBodyWithResponse request with any body
	PublicCreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateSourceResponse, error)

	PublicCreateSourceWithResponse(ctx context.Context, body PublicCreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateSourceResponse, error)

	// PublicGetSourcesWithBodyWithResponse request with any body
	PublicGetSourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicGetSourcesResponse, error)

	PublicGetSourcesWithResponse(ctx context.Context, body PublicGetSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicGetSourcesResponse, error)

	// TestSourceConnectionWithBodyWithResponse request with any body
	TestSourceConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestSourceConnectionResponse, error)

	TestSourceConnectionWithResponse(ctx context.Context, body TestSourceConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TestSourceConnectionResponse, error)

	// PublicDeleteSourceByIdWithResponse request
	PublicDeleteSourceByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicDeleteSourceByIdResponse, error)

	// PublicGetSourceWithResponse request
	PublicGetSourceWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicGetSourceResponse, error)

	// PublicEditSourceWithBodyWithResponse request with any body
	PublicEditSourceWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicEditSourceResponse, error)

	PublicEditSourceWithResponse(ctx context.Context, id openapi_types.UUID, body PublicEditSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicEditSourceResponse, error)

	// PublicSourceIngestionManualRunWithResponse request
	PublicSourceIngestionManualRunWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicSourceIngestionManualRunResponse, error)

	// PublicGetUsersWithResponse request
	PublicGetUsersWithResponse(ctx context.Context, params *PublicGetUsersParams, reqEditors ...RequestEditorFn) (*PublicGetUsersResponse, error)

	// PublicCreateUserWithBodyWithResponse request with any body
	PublicCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateUserResponse, error)

	PublicCreateUserWithResponse(ctx context.Context, body PublicCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateUserResponse, error)

	// PublicDeleteUserWithResponse request
	PublicDeleteUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicDeleteUserResponse, error)

	// PublicGetUserWithResponse request
	PublicGetUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicGetUserResponse, error)

	// PublicUpdateUserWithBodyWithResponse request with any body
	PublicUpdateUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicUpdateUserResponse, error)

	PublicUpdateUserWithResponse(ctx context.Context, id openapi_types.UUID, body PublicUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicUpdateUserResponse, error)

	// PublicResetUserPasswordWithResponse request
	PublicResetUserPasswordWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicResetUserPasswordResponse, error)
}

type PublicEditAssetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicGetAssetDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicEditAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicEditAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetAssetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicGetAssetDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetAssetsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicPageDtoPublicGetAssetListDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicSyncAssetsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *WorkspaceApplyResponseDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicSyncAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicSyncAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicDeleteWorkspaceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *WorkspaceApplyResponseDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicDeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicDeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetCalendarsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicPageDtoPublicCalendarGetDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetCalendarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetCalendarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicCreateCalendarResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *PublicCalendarGetDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicCreateCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicCreateCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicDeleteCalendarResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicDeleteCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicDeleteCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetCalendarResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicCalendarGetDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicUpdateCalendarResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicCalendarGetDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicUpdateCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicUpdateCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetAllCredentialsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicCredentialsPageDtoPublicCredentialsGetDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON429 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetAllCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetAllCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicCreateCredentialsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON429 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicCreateCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicCreateCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicDeleteCredentialsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON429 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicDeleteCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicDeleteCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetCredentialsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicCredentialsGetDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON429 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicUpdateCredentialsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON429 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicUpdateCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicUpdateCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadDbtMetadataFilesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r UploadDbtMetadataFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadDbtMetadataFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRuleResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *MonitoringSearchDto
	JSON206                   *MonitoringSearchDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r GetAllRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SiffletRuleManualRunResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RuleRunDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r SiffletRuleManualRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SiffletRuleManualRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiffletRuleDetailsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RuleDetailsDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r GetSiffletRuleDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiffletRuleDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiffletRuleInfoResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RuleInfoDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r GetSiffletRuleInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiffletRuleInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiffletRuleOverviewResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RuleOverviewDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r GetSiffletRuleOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiffletRuleOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiffletRuleRunsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *SearchCollectionRuleRunDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r GetSiffletRuleRunsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiffletRuleRunsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiffletRuleRunResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RuleRunDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r GetSiffletRuleRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiffletRuleRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicCreateSourceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *PublicGetSourceDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicCreateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicCreateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetSourcesResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicPageDtoPublicGetSourceDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestSourceConnectionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r TestSourceConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestSourceConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicDeleteSourceByIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicDeleteSourceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicDeleteSourceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetSourceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicGetSourceDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicEditSourceResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicGetSourceDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicEditSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicEditSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicSourceIngestionManualRunResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicSourceIngestionManualRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicSourceIngestionManualRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetUsersResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicPageDtoPublicUserGetDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicCreateUserResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *PublicUserGetDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicCreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicCreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicDeleteUserResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicDeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicDeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicGetUserResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicUserGetDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicUpdateUserResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicUserGetDto
	ApplicationproblemJSON400 *ApiProblemSchema
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON409 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicUpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicUpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicResetUserPasswordResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PublicUserResetPasswordDto
	ApplicationproblemJSON401 *ApiProblemSchema
	ApplicationproblemJSON403 *ApiProblemSchema
	ApplicationproblemJSON404 *ApiProblemSchema
	ApplicationproblemJSON500 *ApiProblemSchema
}

// Status returns HTTPResponse.Status
func (r PublicResetUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicResetUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PublicEditAssetWithBodyWithResponse request with arbitrary body returning *PublicEditAssetResponse
func (c *ClientWithResponses) PublicEditAssetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicEditAssetResponse, error) {
	rsp, err := c.PublicEditAssetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicEditAssetResponse(rsp)
}

func (c *ClientWithResponses) PublicEditAssetWithResponse(ctx context.Context, body PublicEditAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicEditAssetResponse, error) {
	rsp, err := c.PublicEditAsset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicEditAssetResponse(rsp)
}

// PublicGetAssetWithBodyWithResponse request with arbitrary body returning *PublicGetAssetResponse
func (c *ClientWithResponses) PublicGetAssetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicGetAssetResponse, error) {
	rsp, err := c.PublicGetAssetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetAssetResponse(rsp)
}

func (c *ClientWithResponses) PublicGetAssetWithResponse(ctx context.Context, body PublicGetAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicGetAssetResponse, error) {
	rsp, err := c.PublicGetAsset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetAssetResponse(rsp)
}

// PublicGetAssetsWithBodyWithResponse request with arbitrary body returning *PublicGetAssetsResponse
func (c *ClientWithResponses) PublicGetAssetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicGetAssetsResponse, error) {
	rsp, err := c.PublicGetAssetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetAssetsResponse(rsp)
}

func (c *ClientWithResponses) PublicGetAssetsWithResponse(ctx context.Context, body PublicGetAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicGetAssetsResponse, error) {
	rsp, err := c.PublicGetAssets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetAssetsResponse(rsp)
}

// PublicSyncAssetsWithBodyWithResponse request with arbitrary body returning *PublicSyncAssetsResponse
func (c *ClientWithResponses) PublicSyncAssetsWithBodyWithResponse(ctx context.Context, params *PublicSyncAssetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicSyncAssetsResponse, error) {
	rsp, err := c.PublicSyncAssetsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicSyncAssetsResponse(rsp)
}

func (c *ClientWithResponses) PublicSyncAssetsWithResponse(ctx context.Context, params *PublicSyncAssetsParams, body PublicSyncAssetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicSyncAssetsResponse, error) {
	rsp, err := c.PublicSyncAssets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicSyncAssetsResponse(rsp)
}

// PublicDeleteWorkspaceWithResponse request returning *PublicDeleteWorkspaceResponse
func (c *ClientWithResponses) PublicDeleteWorkspaceWithResponse(ctx context.Context, name string, params *PublicDeleteWorkspaceParams, reqEditors ...RequestEditorFn) (*PublicDeleteWorkspaceResponse, error) {
	rsp, err := c.PublicDeleteWorkspace(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicDeleteWorkspaceResponse(rsp)
}

// PublicGetCalendarsWithResponse request returning *PublicGetCalendarsResponse
func (c *ClientWithResponses) PublicGetCalendarsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicGetCalendarsResponse, error) {
	rsp, err := c.PublicGetCalendars(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetCalendarsResponse(rsp)
}

// PublicCreateCalendarWithBodyWithResponse request with arbitrary body returning *PublicCreateCalendarResponse
func (c *ClientWithResponses) PublicCreateCalendarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateCalendarResponse, error) {
	rsp, err := c.PublicCreateCalendarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateCalendarResponse(rsp)
}

func (c *ClientWithResponses) PublicCreateCalendarWithResponse(ctx context.Context, body PublicCreateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateCalendarResponse, error) {
	rsp, err := c.PublicCreateCalendar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateCalendarResponse(rsp)
}

// PublicDeleteCalendarWithResponse request returning *PublicDeleteCalendarResponse
func (c *ClientWithResponses) PublicDeleteCalendarWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicDeleteCalendarResponse, error) {
	rsp, err := c.PublicDeleteCalendar(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicDeleteCalendarResponse(rsp)
}

// PublicGetCalendarWithResponse request returning *PublicGetCalendarResponse
func (c *ClientWithResponses) PublicGetCalendarWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicGetCalendarResponse, error) {
	rsp, err := c.PublicGetCalendar(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetCalendarResponse(rsp)
}

// PublicUpdateCalendarWithBodyWithResponse request with arbitrary body returning *PublicUpdateCalendarResponse
func (c *ClientWithResponses) PublicUpdateCalendarWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicUpdateCalendarResponse, error) {
	rsp, err := c.PublicUpdateCalendarWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicUpdateCalendarResponse(rsp)
}

func (c *ClientWithResponses) PublicUpdateCalendarWithResponse(ctx context.Context, id openapi_types.UUID, body PublicUpdateCalendarJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicUpdateCalendarResponse, error) {
	rsp, err := c.PublicUpdateCalendar(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicUpdateCalendarResponse(rsp)
}

// PublicGetAllCredentialsWithResponse request returning *PublicGetAllCredentialsResponse
func (c *ClientWithResponses) PublicGetAllCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicGetAllCredentialsResponse, error) {
	rsp, err := c.PublicGetAllCredentials(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetAllCredentialsResponse(rsp)
}

// PublicCreateCredentialsWithBodyWithResponse request with arbitrary body returning *PublicCreateCredentialsResponse
func (c *ClientWithResponses) PublicCreateCredentialsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateCredentialsResponse, error) {
	rsp, err := c.PublicCreateCredentialsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateCredentialsResponse(rsp)
}

func (c *ClientWithResponses) PublicCreateCredentialsWithResponse(ctx context.Context, body PublicCreateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateCredentialsResponse, error) {
	rsp, err := c.PublicCreateCredentials(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateCredentialsResponse(rsp)
}

// PublicDeleteCredentialsWithResponse request returning *PublicDeleteCredentialsResponse
func (c *ClientWithResponses) PublicDeleteCredentialsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*PublicDeleteCredentialsResponse, error) {
	rsp, err := c.PublicDeleteCredentials(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicDeleteCredentialsResponse(rsp)
}

// PublicGetCredentialsWithResponse request returning *PublicGetCredentialsResponse
func (c *ClientWithResponses) PublicGetCredentialsWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*PublicGetCredentialsResponse, error) {
	rsp, err := c.PublicGetCredentials(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetCredentialsResponse(rsp)
}

// PublicUpdateCredentialsWithBodyWithResponse request with arbitrary body returning *PublicUpdateCredentialsResponse
func (c *ClientWithResponses) PublicUpdateCredentialsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicUpdateCredentialsResponse, error) {
	rsp, err := c.PublicUpdateCredentialsWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicUpdateCredentialsResponse(rsp)
}

func (c *ClientWithResponses) PublicUpdateCredentialsWithResponse(ctx context.Context, name string, body PublicUpdateCredentialsJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicUpdateCredentialsResponse, error) {
	rsp, err := c.PublicUpdateCredentials(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicUpdateCredentialsResponse(rsp)
}

// UploadDbtMetadataFilesWithBodyWithResponse request with arbitrary body returning *UploadDbtMetadataFilesResponse
func (c *ClientWithResponses) UploadDbtMetadataFilesWithBodyWithResponse(ctx context.Context, projectName string, target string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadDbtMetadataFilesResponse, error) {
	rsp, err := c.UploadDbtMetadataFilesWithBody(ctx, projectName, target, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadDbtMetadataFilesResponse(rsp)
}

// GetAllRuleWithResponse request returning *GetAllRuleResponse
func (c *ClientWithResponses) GetAllRuleWithResponse(ctx context.Context, params *GetAllRuleParams, reqEditors ...RequestEditorFn) (*GetAllRuleResponse, error) {
	rsp, err := c.GetAllRule(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRuleResponse(rsp)
}

// SiffletRuleManualRunWithResponse request returning *SiffletRuleManualRunResponse
func (c *ClientWithResponses) SiffletRuleManualRunWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*SiffletRuleManualRunResponse, error) {
	rsp, err := c.SiffletRuleManualRun(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSiffletRuleManualRunResponse(rsp)
}

// GetSiffletRuleDetailsWithResponse request returning *GetSiffletRuleDetailsResponse
func (c *ClientWithResponses) GetSiffletRuleDetailsWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSiffletRuleDetailsResponse, error) {
	rsp, err := c.GetSiffletRuleDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiffletRuleDetailsResponse(rsp)
}

// GetSiffletRuleInfoWithResponse request returning *GetSiffletRuleInfoResponse
func (c *ClientWithResponses) GetSiffletRuleInfoWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSiffletRuleInfoResponse, error) {
	rsp, err := c.GetSiffletRuleInfo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiffletRuleInfoResponse(rsp)
}

// GetSiffletRuleOverviewWithResponse request returning *GetSiffletRuleOverviewResponse
func (c *ClientWithResponses) GetSiffletRuleOverviewWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSiffletRuleOverviewResponse, error) {
	rsp, err := c.GetSiffletRuleOverview(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiffletRuleOverviewResponse(rsp)
}

// GetSiffletRuleRunsWithResponse request returning *GetSiffletRuleRunsResponse
func (c *ClientWithResponses) GetSiffletRuleRunsWithResponse(ctx context.Context, id openapi_types.UUID, params *GetSiffletRuleRunsParams, reqEditors ...RequestEditorFn) (*GetSiffletRuleRunsResponse, error) {
	rsp, err := c.GetSiffletRuleRuns(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiffletRuleRunsResponse(rsp)
}

// GetSiffletRuleRunWithResponse request returning *GetSiffletRuleRunResponse
func (c *ClientWithResponses) GetSiffletRuleRunWithResponse(ctx context.Context, id openapi_types.UUID, runId openapi_types.UUID, params *GetSiffletRuleRunParams, reqEditors ...RequestEditorFn) (*GetSiffletRuleRunResponse, error) {
	rsp, err := c.GetSiffletRuleRun(ctx, id, runId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiffletRuleRunResponse(rsp)
}

// PublicCreateSourceWithBodyWithResponse request with arbitrary body returning *PublicCreateSourceResponse
func (c *ClientWithResponses) PublicCreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateSourceResponse, error) {
	rsp, err := c.PublicCreateSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateSourceResponse(rsp)
}

func (c *ClientWithResponses) PublicCreateSourceWithResponse(ctx context.Context, body PublicCreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateSourceResponse, error) {
	rsp, err := c.PublicCreateSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateSourceResponse(rsp)
}

// PublicGetSourcesWithBodyWithResponse request with arbitrary body returning *PublicGetSourcesResponse
func (c *ClientWithResponses) PublicGetSourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicGetSourcesResponse, error) {
	rsp, err := c.PublicGetSourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetSourcesResponse(rsp)
}

func (c *ClientWithResponses) PublicGetSourcesWithResponse(ctx context.Context, body PublicGetSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicGetSourcesResponse, error) {
	rsp, err := c.PublicGetSources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetSourcesResponse(rsp)
}

// TestSourceConnectionWithBodyWithResponse request with arbitrary body returning *TestSourceConnectionResponse
func (c *ClientWithResponses) TestSourceConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TestSourceConnectionResponse, error) {
	rsp, err := c.TestSourceConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestSourceConnectionResponse(rsp)
}

func (c *ClientWithResponses) TestSourceConnectionWithResponse(ctx context.Context, body TestSourceConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*TestSourceConnectionResponse, error) {
	rsp, err := c.TestSourceConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestSourceConnectionResponse(rsp)
}

// PublicDeleteSourceByIdWithResponse request returning *PublicDeleteSourceByIdResponse
func (c *ClientWithResponses) PublicDeleteSourceByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicDeleteSourceByIdResponse, error) {
	rsp, err := c.PublicDeleteSourceById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicDeleteSourceByIdResponse(rsp)
}

// PublicGetSourceWithResponse request returning *PublicGetSourceResponse
func (c *ClientWithResponses) PublicGetSourceWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicGetSourceResponse, error) {
	rsp, err := c.PublicGetSource(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetSourceResponse(rsp)
}

// PublicEditSourceWithBodyWithResponse request with arbitrary body returning *PublicEditSourceResponse
func (c *ClientWithResponses) PublicEditSourceWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicEditSourceResponse, error) {
	rsp, err := c.PublicEditSourceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicEditSourceResponse(rsp)
}

func (c *ClientWithResponses) PublicEditSourceWithResponse(ctx context.Context, id openapi_types.UUID, body PublicEditSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicEditSourceResponse, error) {
	rsp, err := c.PublicEditSource(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicEditSourceResponse(rsp)
}

// PublicSourceIngestionManualRunWithResponse request returning *PublicSourceIngestionManualRunResponse
func (c *ClientWithResponses) PublicSourceIngestionManualRunWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicSourceIngestionManualRunResponse, error) {
	rsp, err := c.PublicSourceIngestionManualRun(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicSourceIngestionManualRunResponse(rsp)
}

// PublicGetUsersWithResponse request returning *PublicGetUsersResponse
func (c *ClientWithResponses) PublicGetUsersWithResponse(ctx context.Context, params *PublicGetUsersParams, reqEditors ...RequestEditorFn) (*PublicGetUsersResponse, error) {
	rsp, err := c.PublicGetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetUsersResponse(rsp)
}

// PublicCreateUserWithBodyWithResponse request with arbitrary body returning *PublicCreateUserResponse
func (c *ClientWithResponses) PublicCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicCreateUserResponse, error) {
	rsp, err := c.PublicCreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateUserResponse(rsp)
}

func (c *ClientWithResponses) PublicCreateUserWithResponse(ctx context.Context, body PublicCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicCreateUserResponse, error) {
	rsp, err := c.PublicCreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCreateUserResponse(rsp)
}

// PublicDeleteUserWithResponse request returning *PublicDeleteUserResponse
func (c *ClientWithResponses) PublicDeleteUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicDeleteUserResponse, error) {
	rsp, err := c.PublicDeleteUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicDeleteUserResponse(rsp)
}

// PublicGetUserWithResponse request returning *PublicGetUserResponse
func (c *ClientWithResponses) PublicGetUserWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicGetUserResponse, error) {
	rsp, err := c.PublicGetUser(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicGetUserResponse(rsp)
}

// PublicUpdateUserWithBodyWithResponse request with arbitrary body returning *PublicUpdateUserResponse
func (c *ClientWithResponses) PublicUpdateUserWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublicUpdateUserResponse, error) {
	rsp, err := c.PublicUpdateUserWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) PublicUpdateUserWithResponse(ctx context.Context, id openapi_types.UUID, body PublicUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PublicUpdateUserResponse, error) {
	rsp, err := c.PublicUpdateUser(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicUpdateUserResponse(rsp)
}

// PublicResetUserPasswordWithResponse request returning *PublicResetUserPasswordResponse
func (c *ClientWithResponses) PublicResetUserPasswordWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PublicResetUserPasswordResponse, error) {
	rsp, err := c.PublicResetUserPassword(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicResetUserPasswordResponse(rsp)
}

// ParsePublicEditAssetResponse parses an HTTP response from a PublicEditAssetWithResponse call
func ParsePublicEditAssetResponse(rsp *http.Response) (*PublicEditAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicEditAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicGetAssetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetAssetResponse parses an HTTP response from a PublicGetAssetWithResponse call
func ParsePublicGetAssetResponse(rsp *http.Response) (*PublicGetAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicGetAssetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetAssetsResponse parses an HTTP response from a PublicGetAssetsWithResponse call
func ParsePublicGetAssetsResponse(rsp *http.Response) (*PublicGetAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicPageDtoPublicGetAssetListDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicSyncAssetsResponse parses an HTTP response from a PublicSyncAssetsWithResponse call
func ParsePublicSyncAssetsResponse(rsp *http.Response) (*PublicSyncAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicSyncAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceApplyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicDeleteWorkspaceResponse parses an HTTP response from a PublicDeleteWorkspaceWithResponse call
func ParsePublicDeleteWorkspaceResponse(rsp *http.Response) (*PublicDeleteWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicDeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceApplyResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetCalendarsResponse parses an HTTP response from a PublicGetCalendarsWithResponse call
func ParsePublicGetCalendarsResponse(rsp *http.Response) (*PublicGetCalendarsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetCalendarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicPageDtoPublicCalendarGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicCreateCalendarResponse parses an HTTP response from a PublicCreateCalendarWithResponse call
func ParsePublicCreateCalendarResponse(rsp *http.Response) (*PublicCreateCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicCreateCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PublicCalendarGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicDeleteCalendarResponse parses an HTTP response from a PublicDeleteCalendarWithResponse call
func ParsePublicDeleteCalendarResponse(rsp *http.Response) (*PublicDeleteCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicDeleteCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetCalendarResponse parses an HTTP response from a PublicGetCalendarWithResponse call
func ParsePublicGetCalendarResponse(rsp *http.Response) (*PublicGetCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicCalendarGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicUpdateCalendarResponse parses an HTTP response from a PublicUpdateCalendarWithResponse call
func ParsePublicUpdateCalendarResponse(rsp *http.Response) (*PublicUpdateCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicUpdateCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicCalendarGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetAllCredentialsResponse parses an HTTP response from a PublicGetAllCredentialsWithResponse call
func ParsePublicGetAllCredentialsResponse(rsp *http.Response) (*PublicGetAllCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetAllCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicCredentialsPageDtoPublicCredentialsGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicCreateCredentialsResponse parses an HTTP response from a PublicCreateCredentialsWithResponse call
func ParsePublicCreateCredentialsResponse(rsp *http.Response) (*PublicCreateCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicCreateCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicDeleteCredentialsResponse parses an HTTP response from a PublicDeleteCredentialsWithResponse call
func ParsePublicDeleteCredentialsResponse(rsp *http.Response) (*PublicDeleteCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicDeleteCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetCredentialsResponse parses an HTTP response from a PublicGetCredentialsWithResponse call
func ParsePublicGetCredentialsResponse(rsp *http.Response) (*PublicGetCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicCredentialsGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicUpdateCredentialsResponse parses an HTTP response from a PublicUpdateCredentialsWithResponse call
func ParsePublicUpdateCredentialsResponse(rsp *http.Response) (*PublicUpdateCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicUpdateCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUploadDbtMetadataFilesResponse parses an HTTP response from a UploadDbtMetadataFilesWithResponse call
func ParseUploadDbtMetadataFilesResponse(rsp *http.Response) (*UploadDbtMetadataFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadDbtMetadataFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAllRuleResponse parses an HTTP response from a GetAllRuleWithResponse call
func ParseGetAllRuleResponse(rsp *http.Response) (*GetAllRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MonitoringSearchDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 206:
		var dest MonitoringSearchDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON206 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseSiffletRuleManualRunResponse parses an HTTP response from a SiffletRuleManualRunWithResponse call
func ParseSiffletRuleManualRunResponse(rsp *http.Response) (*SiffletRuleManualRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SiffletRuleManualRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleRunDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSiffletRuleDetailsResponse parses an HTTP response from a GetSiffletRuleDetailsWithResponse call
func ParseGetSiffletRuleDetailsResponse(rsp *http.Response) (*GetSiffletRuleDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiffletRuleDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleDetailsDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSiffletRuleInfoResponse parses an HTTP response from a GetSiffletRuleInfoWithResponse call
func ParseGetSiffletRuleInfoResponse(rsp *http.Response) (*GetSiffletRuleInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiffletRuleInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleInfoDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSiffletRuleOverviewResponse parses an HTTP response from a GetSiffletRuleOverviewWithResponse call
func ParseGetSiffletRuleOverviewResponse(rsp *http.Response) (*GetSiffletRuleOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiffletRuleOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleOverviewDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSiffletRuleRunsResponse parses an HTTP response from a GetSiffletRuleRunsWithResponse call
func ParseGetSiffletRuleRunsResponse(rsp *http.Response) (*GetSiffletRuleRunsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiffletRuleRunsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchCollectionRuleRunDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetSiffletRuleRunResponse parses an HTTP response from a GetSiffletRuleRunWithResponse call
func ParseGetSiffletRuleRunResponse(rsp *http.Response) (*GetSiffletRuleRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiffletRuleRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuleRunDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicCreateSourceResponse parses an HTTP response from a PublicCreateSourceWithResponse call
func ParsePublicCreateSourceResponse(rsp *http.Response) (*PublicCreateSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicCreateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PublicGetSourceDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetSourcesResponse parses an HTTP response from a PublicGetSourcesWithResponse call
func ParsePublicGetSourcesResponse(rsp *http.Response) (*PublicGetSourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicPageDtoPublicGetSourceDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseTestSourceConnectionResponse parses an HTTP response from a TestSourceConnectionWithResponse call
func ParseTestSourceConnectionResponse(rsp *http.Response) (*TestSourceConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestSourceConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicDeleteSourceByIdResponse parses an HTTP response from a PublicDeleteSourceByIdWithResponse call
func ParsePublicDeleteSourceByIdResponse(rsp *http.Response) (*PublicDeleteSourceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicDeleteSourceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetSourceResponse parses an HTTP response from a PublicGetSourceWithResponse call
func ParsePublicGetSourceResponse(rsp *http.Response) (*PublicGetSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicGetSourceDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicEditSourceResponse parses an HTTP response from a PublicEditSourceWithResponse call
func ParsePublicEditSourceResponse(rsp *http.Response) (*PublicEditSourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicEditSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicGetSourceDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicSourceIngestionManualRunResponse parses an HTTP response from a PublicSourceIngestionManualRunWithResponse call
func ParsePublicSourceIngestionManualRunResponse(rsp *http.Response) (*PublicSourceIngestionManualRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicSourceIngestionManualRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetUsersResponse parses an HTTP response from a PublicGetUsersWithResponse call
func ParsePublicGetUsersResponse(rsp *http.Response) (*PublicGetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicPageDtoPublicUserGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicCreateUserResponse parses an HTTP response from a PublicCreateUserWithResponse call
func ParsePublicCreateUserResponse(rsp *http.Response) (*PublicCreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicCreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PublicUserGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicDeleteUserResponse parses an HTTP response from a PublicDeleteUserWithResponse call
func ParsePublicDeleteUserResponse(rsp *http.Response) (*PublicDeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicDeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicGetUserResponse parses an HTTP response from a PublicGetUserWithResponse call
func ParsePublicGetUserResponse(rsp *http.Response) (*PublicGetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicUserGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicUpdateUserResponse parses an HTTP response from a PublicUpdateUserWithResponse call
func ParsePublicUpdateUserResponse(rsp *http.Response) (*PublicUpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicUpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicUserGetDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePublicResetUserPasswordResponse parses an HTTP response from a PublicResetUserPasswordWithResponse call
func ParsePublicResetUserPasswordResponse(rsp *http.Response) (*PublicResetUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicResetUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicUserResetPasswordDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiProblemSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
